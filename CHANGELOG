2.0.92 (7/6/2021)

* Added the signed int (sint) constraint into the language.

2.0.91 (7/2/2021)

* Fixed a bug in array `filter` and `choose`.

2.0.90 (7/2/2021)

* Fixed a variable shadowing bug when filling in the type annotation of default values in patterns.

2.0.89 (7/1/2021)

* Added `clear` to the `rm` module.
* Extended the PrintStatic op so it can print raw types.
* Adjusted the F# and the Cython codegen so that the floats get printed without loss of precision.

2.0.88 (6/15/2021)

* I was too hasty in fixing the codegen bug and introduced a performance bug instead. Now it should be fixed properly.

2.0.87 (6/15/2021)

* Fixed the length Cython codegen bug when using arrays other than u64/i64.

2.0.86 (6/8/2021)

* Renamed array's iter2i to iteri2 so it matches the F# naming scheme.
* Added `3` and `4` versions of `map` and `iter` function into the array module.
* Since tail recursive loops keep stack overflowing in Cython, the array module now uses the imperative while loops instead.
* Added `CythonToNamedTuple` op, the `record` constraint and fixed the lack of dyning bug in `CythonToRecord`'s partial evaluation case.
* Added the `namedtuple` function to core. This should help Python interop as it provides a succinct way of converting Spiral records into Python objects.
* `except *` now does not get generated on main functions returning objects. The Cython codegen is a rat's nest of hacks due to all the non-composable features of Cython.
* Changed the semantics of the Cython codegen so closure arguments now behave like those for regular join points. This should make interop easier.
* For unknown reasons, the language server will sometimes rarely miss a heartbeat and terminate. I haven't resolved the reason for that yet, but the `Restart Server` command should now work properly as it will clear the previous request instead of waiting for it to finish.

2.0.85 (5/22/2021)

Minor fixes. I'll start keeping a changelog from here as development on the compiler has stabilized. For the previous versions, the commit history can serve as the changelog. I have a bunch of stuff on the TODO list, but don't have much drive to work on them at this time. At this point the compiler itself is good enough.

* Added mapi and mapi2 to the `am` module of the `core2` package.
* Fixed filter so it passes the actual element instead of the index.