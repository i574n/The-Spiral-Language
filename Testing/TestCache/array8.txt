let rec method_0 ((var_3 : (int64 [])), (var_4 : int64)) : unit =
    let ((var_5 : bool)) = var_4 < 4L
    if var_5 then
        let ((var_6 : int64)) = var_4 + 1L
        let ((var_7 : int64)) = method_2 (var_4)
        let () = var_3.[int32 var_4] <- var_7
        method_0 (var_3, var_6)
    else
        ()
and method_1 ((var_3 : (int64 [])), (var_22 : (int64 [])), (var_17 : int64), (var_24 : int64), (var_23 : int64)) : int64 =
    let ((var_25 : bool)) = var_24 < var_17
    if var_25 then
        let ((var_26 : int64)) = var_24 + 1L
        let ((var_27 : int64)) = var_3.[int32 var_24]
        let () = var_22.[int32 var_23] <- var_27
        let ((var_28 : int64)) = var_23 + 1L
        method_1 (var_3, var_22, var_17, var_26, var_28)
    else
        var_23
and method_2 ((var_1 : int64)) : int64 =
    var_1
let ((var_3 : (int64 []))) = Array.zeroCreate (System.Convert.ToInt32 4L)
let ((var_4 : int64)) = 0L
let () = method_0 (var_3, var_4)
let ((var_10 : (int64 []))) = Array.zeroCreate (System.Convert.ToInt32 4L)
let ((var_11 : int64)) = 0L
let () = method_0 (var_10, var_11)
let ((var_14 : (int64 []))) = Array.zeroCreate (System.Convert.ToInt32 4L)
let ((var_15 : int64)) = 0L
let () = method_0 (var_14, var_15)
let ((var_17 : int64)) = var_3.LongLength
let ((var_18 : int64)) = var_10.LongLength
let ((var_19 : int64)) = var_17 + var_18
let ((var_20 : int64)) = var_14.LongLength
let ((var_21 : int64)) = var_19 + var_20
let ((var_22 : (int64 []))) = Array.zeroCreate (System.Convert.ToInt32 var_21)
let ((var_23 : int64)) = 0L
let ((var_24 : int64)) = 0L
let ((var_31 : int64)) = method_1 (var_3, var_22, var_17, var_24, var_23)
let ((var_32 : int64)) = 0L
let ((var_33 : int64)) = method_1 (var_10, var_22, var_18, var_32, var_31)
let ((var_34 : int64)) = 0L
let ((var_35 : int64)) = method_1 (var_14, var_22, var_20, var_34, var_33)
