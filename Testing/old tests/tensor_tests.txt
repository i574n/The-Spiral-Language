let tensor1: SpiralModule =
    {
    name="tensor1"
    prerequisites=[host_tensor]
    opens=[]
    description="Does the Tensor init work? Do set and index for the new array module work?"
    code=
    """
inl tns = Tensor.init (10,10) (inl a b -> a*b)
inl x = tns 2 2 .get
tns 2 2 .set (x+100)
tns 2 2 .get
    """
    }

let tensor2: SpiralModule =
    {
    name="tensor2"
    prerequisites=[host_tensor]
    opens=[]
    description="Does the scalar tensor work?"
    code=
    """
open Tensor
inl ar = init () 5
ar .get
    """
    }

let tensor3: SpiralModule =
    {
    name="tensor3"
    prerequisites=[host_tensor]
    opens=[]
    description="Does the split work?"
    code=
    """
open Tensor
inl ar = init (32*32) id |> split (const (16,64))
(ar 0 0, ar 0 1, ar 0 2, ar 1 0, ar 1 1, ar 1 2) |> Tuple.map (inl x -> x.get)
    """
    }

let tensor4: SpiralModule =
    {
    name="tensor4"
    prerequisites=[host_tensor]
    opens=[]
    description="Is the type of host tensor for the TOA layout correct? Does it work on the singleton dimensions?"
    code=
    """
open Tensor
inl ar = init 10 id
ar 5 .get
    """
    }

let tensor5: SpiralModule =
    {
    name="tensor5"
    prerequisites=[host_tensor]
    opens=[]
    description="Does the tensor map work?"
    code=
    """
// TODO
open Tensor
init (2,2) (inl a b -> a*2+b)
|> map ((*) 2)
    """
    }

let tensor6: SpiralModule =
    {
    name="tensor6"
    prerequisites=[array; host_tensor]
    opens=[]
    description="Does assert_size work? Does converting from array to tensor work?"
    code=
    """
open Tensor
inl tns =
    Array.init 6 id
    |> array_to_tensor
    |> split (dyn (2,3) |> const)
    |> assert_size (2,3)
    
tns 1 0 .get |> ignore
    """
    }

let tensor7: SpiralModule =
    {
    name="tensor7"
    prerequisites=[host_tensor; console]
    opens=[]
    description="Does the show from Tensor work?"
    code=
    """
open Tensor
init (2,3,4) (inl a b c -> a*b*c)  
|> show |> Console.writeline
    """
    }

let tensor8: SpiralModule =
    {
    name="tensor8"
    prerequisites=[host_tensor; console]
    opens=[]
    description="Does the view indexing work?"
    code=
    """
open Tensor
inl w = 2,3,4
init (2,3,4) (inl a b c -> a*b*c) (1,{from=1},{from=1; by=2})
|> show |> Console.writeline
    """
    }

let tensor9: SpiralModule =
    {
    name="tensor9"
    prerequisites=[host_tensor_range_view; console]
    opens=[]
    description="Do the tensor range views work?"
    code=
    """
inl tns =
    Tensor.init (2,3,4) (inl a b c -> a*b*c)  
    |> ViewR.wrap ({from=2; near_to=4},{from=2; near_to=5},{from=2; near_to=6})

inl tns = tns ((), {from=3; by=2}, {from=3})
tns .basic |> Tensor.print
    """
    }

let tensor10: SpiralModule =
    {
    name="tensor10"
    prerequisites=[host_tensor_tree_view; console]
    opens=[]
    description="Do the tensor tree views work?"
    code=
    """
inl tns =
    Tensor.init (2,3,4) (inl a b c -> a*b*c)  
    |> View.wrap ({a=1; b=1},{a=1; b=2},{a=1; b={q=3}})

inl tns = tns ({b=()}, {b=()}, {b={q=()}})
tns .basic |> Tensor.print
    """
    }

let tensor11: SpiralModule =
    {
    name="tensor11"
    prerequisites=[host_tensor_tree_view; console]
    opens=[]
    description="Does the tensor view's create function work?"
    code=
    """
inl tns = View.create {dim={a=1; b=1}, {a=1; b=2}, {a=1; b={q=3}}; elem_type=float32}

inl tns = tns ({b=()}, {b=()}, {b={q=()}})
tns .basic |> Tensor.print
    """
    }

let tensor12: SpiralModule =
    {
    name="tensor12"
    prerequisites=[host_tensor_tree_view; console]
    opens=[]
    description="Do the tensor tree partial views work?"
    code=
    """
inl tns =
    Tensor.init (4,16) (inl a b -> a,b)
    |> View.wrap ((), {a={b=4; c=4}; d={e=4; f=4}})

tns ((),{d=()}) .basic |> Tensor.print
    """
    }

let tensor13: SpiralModule =
    {
    name="tensor13"
    prerequisites=[host_tensor; console]
    opens=[]
    description="Does the tensor expand_singular work?"
    code=
    """
open Tensor
init (1,5) (inl a b -> a, b)
|> Tensor.expand_singular (5,5) 
|> Tensor.print
    """
    }
