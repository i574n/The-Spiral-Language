let extern1: SpiralModule =
    {
    name="extern1"
    prerequisites=[extern_]
    opens=[]
    description="Does basic .NET interop work?"
    code=
    """
open Extern
inl builder_type = fs [text: "System.Text.StringBuilder"]
inl b = FS.Constructor builder_type ("Qwe", 128i32)
inl a x =
    FS.Method b .Append x builder_type |> ignore
    FS.Method b .AppendLine () builder_type |> ignore
a 123
a 123i16
a "qwe"
inl str = FS.Method b .ToString () string

inl console = fs [text: "System.Console"]
FS.StaticMethod console .Write str ()

inl key = 1, 1
inl value = {a=1;b=2;c=3}
inl dictionary_type = fs [text: "System.Collections.Generic.Dictionary"; types: type (key,value)]
inl dict = FS.Constructor dictionary_type 128i32
FS.Method dict .Add (key,value) ()
FS.Method dict .Item (key :: ()) value |> dyn |> ignore
0
    """
    }

let extern2: SpiralModule =
    {
    name="extern2"
    prerequisites=[extern_]
    opens=[]
    description="Does string indexing work?"
    code=
    """
open Extern
inl console_type = fs [text: "System.Console"]
inl a = "qwe"
inl b = FS.StaticMethod console_type .ReadLine() string
a(0),b(0)
    """
    }

let extern3: SpiralModule =
    {
    name="extern3"
    prerequisites=[extern_]
    opens=[]
    description="Do the .NET methods work inside methods?"
    code=
    """
open Extern
inl convert_type = fs [text: "System.Convert"]
inl to_int64 x = FS.StaticMethod convert_type .ToInt64 x int64
met f = to_int64 (dyn 'a')
f
    """
    }

let extern4: SpiralModule =
    {
    name="extern4"
    prerequisites=[extern_]
    opens=[]
    description="Does the => related stuff work?"
    code=
    """
// TODO
open Extern
inl closure_type = (int64 => int64 => int64)
inl add a b = a + b
inl clo_add = closure_of add closure_type
match clo_add with
| (a: int64) => (b: (int64 => int64)) -> clo_add 1 2
    """
    }

let extern5: SpiralModule =
    {
    name="extern5"
    prerequisites=[extern_; array]
    opens=[]
    description="Does the show work?"
    code=
    """
open Extern
Array.init 8 (inl i -> {x = to float64 i; y = to float64 i-30.0} |> dyn |> stack) |> show
    """
    }
