let euler1: SpiralModule =
    {
    name="euler1"
    prerequisites=[loops; console]
    opens=[]
    description="Even Fibonacci Numbers."
    code=
    """
open Loops
open Console

while {
    state={sum=dyn 0; a=dyn 1; b=dyn 2}
    cond=inl {b} -> if b <= 4*1000*1000 then true else false
    body=inl {sum a b} -> {sum=if b % 2 = 0 then sum+b else sum; a=b; b=a+b}
    }
|> inl {sum} -> writeline sum
    """
    }

let euler2: SpiralModule =
    {
    name="euler2"
    prerequisites=[array; loops; console; option; extern_]
    opens=[]
    description="Largest prime factor"
    code=
    """
open Extern
open Loops
open Console
open Array
open Option

// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143 ?

inl math_type = fs [text: "System.Math"]

inl target = dyn 600851475143

inl sieve_length = 
    FS.StaticMethod math_type .Sqrt(to float64 target) float64
    |> to int64

inl sieve = Array.init (sieve_length+1) (inl _ -> true)
for {from=2; to=sieve_length; body = inl {i} ->
    if sieve i = true then
        for {from=i+i; to=sieve_length; by=i; body = inl {i} -> 
            sieve i <- false
            }
    }

for' {from=sieve_length; to=2; by= -1; state=none int64; body = inl {next state i} ->
    if sieve i = true && target % i = 0 then some i
    else next state
    }
|>  function
    | .Some, result -> writeline result // 6857
    | .None -> failwith () "No prime factor found!"
    """
    }

let euler3: SpiralModule =
    {
    name="euler3"
    prerequisites=[array; loops; console]
    opens=[]
    description="Largest palindrome product"
    code=
    """
//A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
//Find the largest palindrome made from the product of two 3-digit numbers.

open Loops
open Console

inl reverse_number x =
    while {
        cond=inl {x} -> x > 0 
        state={x x' = dyn 0}
        body=inl {x x'} -> {x=x/10; x'= x'*10+x%10}
        }
    |> inl {x'} -> x'
inl is_palindrome x = x = reverse_number x
for {from=dyn 100; to=dyn 999; state={highest_palindrome=dyn 0}; body=inl {state i} ->
    for {from=i; to=dyn 999; state; body=inl {{state with highest_palindrome} i=j} ->
        inl x = i*j
        if is_palindrome x && highest_palindrome < x then {highest_palindrome=x} else state
        }
    } 
|> inl {highest_palindrome} -> writeline highest_palindrome
    """
    }

let euler4: SpiralModule =
    {
    name="euler4"
    prerequisites=[tuple; loops; console; extern_]
    opens=[]
    description="Smallest multiple"
    code=
    """
//2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
//What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

open Extern
open Loops
open Console

inl primes = 2,3,5,11,13,17,19
inl non_primes = Tuple (min: 2 max: 20) |> Tuple.filter (Tuple.contains primes >> not)
inl step = Tuple.foldl (*) 1 primes
inl int64_maxvalue = FS.Constant "System.Int64.MaxValue" int64
for' {from=step; to=int64_maxvalue; by=step; state= -1; body=inl {next state i} ->
    if Tuple.forall (inl x -> i % x = 0) non_primes then i
    else next state
    }
|> writeline
    """
    }
