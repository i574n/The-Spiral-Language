let parsing1: SpiralModule =
    {
    name="parsing1"
    prerequisites=[parsing; console]
    opens=[]
    description="Does the Parsing module work?"
    code=
    """
open Parsing
open Console

inl p = 
    succ 1
    |>> writeline

run_with_unit_ret (readall()) p
    """
    }

let parsing2: SpiralModule =
    {
    name="parsing2"
    prerequisites=[parsing; console]
    opens=[]
    description="Does the Parsing module work?"
    code=
    """
open Parsing
open Console

inl p = 
    pdigit
    |>> writeline

run_with_unit_ret (dyn "2") p
    """
    }

let parsing3: SpiralModule =
    {
    name="parsing3"
    prerequisites=[parsing; console]
    opens=[]
    description="Does the Parsing module work?"
    code=
    """
open Parsing
open Console

inl p = 
    pstring "qwe"
    |>> writeline

run_with_unit_ret (dyn "qwerty") p
    """
    }

let parsing4: SpiralModule =
    {
    name="parsing4"
    prerequisites=[parsing; console]
    opens=[]
    description="Does the Parsing module work?"
    code=
    """
open Parsing
open Console

inl p = 
    parse_int
    |>> writeline

run_with_unit_ret (dyn "1 2 3") p
    """
    }

let parsing5: SpiralModule =
    {
    name="parsing5"
    prerequisites=[parsing; console]
    opens=[]
    description="Does the Parsing module work?"
    code=
    """
open Parsing
open Console

inl p = 
    parse_array {parser=parse_int; typ=int64; n=16}
    >>. succ ()

run_with_unit_ret (readall()) p
    """
    }

let parsing6: SpiralModule =
    {
    name="parsing6"
    prerequisites=[parsing; console]
    opens=[]
    description="Do the printf's work?"
    code=
    """
open Parsing

inl a,b,c = dyn (1,2,3)
sprintf "%i + %i = %i" a b c |> ignore
    """
    }

let parsing7: SpiralModule =
    {
    name="parsing7"
    prerequisites=[array; console; parsing; extern_]
    opens=[]
    description="Does the parsing library work? Birthday Cake Candles problem."
    code=
    """
//https://www.hackerrank.com/challenges/birthday-cake-candles

open Extern
open Console
open Parsing

inl int64_minvalue = FS.Constant "System.Int64.MinValue" int64

inl p = 
    inm n = parse_int
    inm ar = parse_array {parser=parse_int; typ=int64; n} 
    Array.foldl (inl (min,score as s) x ->
        if x > score then (1,x)
        elif x = score then (min+1,score)
        else s
        ) (dyn (0,int64_minvalue)) ar
    |> fst
    |> writeline
    |> succ
        
run_with_unit_ret (readall()) p
    """
    }

let parsing8: SpiralModule =
    {
    name="parsing8"
    prerequisites=[array; console; parsing]
    opens=[]
    description="Does the parsing library work? Diagonal Sum Difference problem."
    code=
    """
//https://www.hackerrank.com/challenges/diagonal-difference
open Console
open Parsing

inl abs x = if x >= 0 then x else -x

inl f =
    inm n = parse_int
    inm ar = parse_array {parser=parse_int; typ=int64; n=n*n}
    inl load row col = 
        inl f x = x >= 0 || x < n
        assert (f row && f col) "Out of bounds."
        ar (n * row + col)
    met rec loop (!dyn i) (d1,d2 as s) =
        if i < n then loop (i+1) (d1 + load i i, d2 + load i (n-i-1))
        else s
        : s
    inl a,b = loop 0 (0,0)
    abs (a-b) 
    |> writeline
    |> succ

run_with_unit_ret (readall()) f
        """
    }
