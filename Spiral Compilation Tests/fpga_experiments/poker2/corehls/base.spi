prototype equable a : a -> a -> bool

nominal order = i32
prototype comparable a : a -> a -> order
inl eq() = order 0i32
inl eq_is (order x) : bool = !!!!EQ(x, 0i32)
inl lt() = order -1i32
inl lt_is (order x) : bool = !!!!EQ(x, -1i32)
inl gt() = order 1i32
inl gt_is (order x) : bool = !!!!EQ(x, 1i32)

prototype hashable a : a -> i32

union option a = Some : a | None
union choice2 a b = C1of2 : a | C2of2 : b
union result a b = Ok : a | Error : b
union rec list a = Nil | Cons : a * list a
// Concatenates an element to the head of a list.
inl (::) a b = Cons (a,b)

// Statically sized array with a type literal for a dimension.
nominal sa dim el = $"array<@dim,`el>"
// Puts a statement in the global scope.
inl global (x : string) : () = !!!!Global(x)