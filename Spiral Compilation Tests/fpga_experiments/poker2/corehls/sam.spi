// The array template module. Generic functions for array like structures.
open loop

// Creates an empty array.
inl create forall dim el. : sa dim el = $"std::array<`el,@dim> v$"
// Indexes into an array.
inl index forall dim el. (ar : sa dim el) (i : sa_dim) : el = $"!ar[!i]"
// Sets the value of an array at the specified index.
inl set forall dim el. (ar : sa dim el) (i : sa_dim) (v : el) : () = $"!ar[!i] = !v"
// Returns the length of an array.
inl length forall dim el. (ar : sa dim el) : sa_dim = real real_core.type_lit_to_lit `dim : sa_dim

// Initializes array using the given function.
inl init forall dim el. f : sa dim el = 
    inl ar = create
    for' {from=0; nearTo=length ar} (fun i => set ar i (f i))
    ar

// Maps an array.
inl map forall dim. f (ar : sa dim _) : sa dim _ = init (fun i => index ar i |> f)
// Maps an array. Provides the index as the first argument.
inl mapi forall dim. f (ar : sa dim _) : sa dim _ = init (fun i => index ar i |> f i)
// Iterates over an array.
inl iter forall dim el. f (ar : sa dim el) = for' {from=0; nearTo=length ar} (index ar >> f)
// Iterates over an array. Provides the index as the first argument.
inl iteri forall dim el. f (ar : sa dim el) = for' {from=0; nearTo=length ar} (fun i => f i (index ar i))

// Applies a function to each element of the array, threading an accumulator argument through the computation. 
// If the input function is f and the elements are i0...iN then computes f (... (f s i0)...) iN
inl fold f s ar = for {from=0; nearTo= length ar} (fun i s => f s (index ar i)) s

// Same as fold, but also passes the array index into the body.
inl foldi f s ar = for {from=0; nearTo= length ar} (fun i s => f i s (index ar i)) s

// Applies a function to each element of the two arrays, threading an accumulator argument through the computation.
inl fold2 forall dim. f s (ar1 : sa dim _) (ar2 : sa dim _) = for {from=0; nearTo=length ar1} (fun i s => f s (index ar1 i) (index ar2 i)) s

// Reduces the array in a tree like fashion using the provided function.
inl reduce forall dim el. (f : el -> el -> el) (ar : sa dim el) =
    inl step forall dim_full dim_half. (inp : sa dim_full el) (out : sa dim_half el) =
        inl index i = 
            if i+1 < length inp then f (index inp i) (index inp (i+1))
            else index inp i
        for' {from=0; nearTo=length out} (fun i =>
            set out i (index (i*2))
            )
    // Division with rounding up.
    inl divup a b : sa_dim = (a+b-1)/2
    inl rec unroll forall dim_full. (inp : sa dim_full el) : el = real
        open real_core
        inl full = type_lit_to_lit `dim_full
        if full > 1 then
            inl half = divup full 2
            inl out = create `@half `el
            step `@full `@half inp out
            unroll `@half out
        else
            index `dim_full `el inp 0

    unroll ar

instance equable sa dim el = fun a b =>
    loop.while (fun is_eq, i => is_eq && i < length a) (fun (is_eq, i) =>
        index a i = index b i, i + 1
        ) (true, 0)
    |> fst
    
instance comparable sa dim el = fun a b =>
    loop.while (fun is_eq, i => eq_is is_eq && i < length a) (fun (is_eq, i) =>
        comp (index a i) (index b i), i + 1
        ) (Eq, 0)
    |> fst