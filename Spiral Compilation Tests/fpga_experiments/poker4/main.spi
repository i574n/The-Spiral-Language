// The poker hand ranker.
// The stuff in this file is just for the test bench.
open corehls

nominal random_device = $"std::random_device"
nominal mt = $"std::mt19937"
nominal uint_dist = $"std::uniform_int_distribution<`mt::result_type>"
nominal byref t = $"`t &"

type n = 5

inl main () : i32 =
    global "#include <random>"
    global "#include \"ap_int.h\""
    global "#include <iostream>"

    inl n = real real_core.type_lit_to_lit `n

    inl dev = $"`random_device v$" : random_device
    inl rng = $"`mt v$(!dev())" : mt
    inl dist = $"`uint_dist v$(0,51)" : uint_dist // The dist takes an inclusive [a,b] range.


    loop.for {from=0u64; nearTo=100_000} (fun i num_errors =>
        inl make_hand () = 
            open real_utils
            open hand_scorer_orig
            inl get h i = h &&& (1 <<< i) <> 0
            inl set h i = h ||| (1 <<< i)

            let ar = sam.create : sa n _
            inl ~h = 0u64

            loop.while (fun i => i > 0) (fun i =>
                inl r : i8 = $"!dist(!rng)"
                if get h (i32 r) then i
                else 
                    sam.set ar (i-1) {rank = rank r; suit = suit r}
                    loop._set h (set h (i32 r))
                    i-1
                ) n
            |> ignore

            listm.init n (sam.index ar)

        inl hand : list {rank : i8; suit : i8} = make_hand()

        inl q = 
            open hand_scorer_orig
            inl f x = 1 <<< conv_int (full x)
            inl {hand=c1,c2,c3,c4,c5 score} = score' (hand |> listm.map f |> listm.fold (|||) 0)
            inl f x = {suit=suit x; rank=rank x}
            {hand=f c1, f c2, f c3, f c4, f c5; score}

        inl q' = 
            open real_utils
            open hand_scorer
            open sam
            inl ar : sa n _ = create
            inl f {rank suit} = card {rank = #(conv_int rank); suit = #(conv_int suit)}
            inl i = hand |> listm.fold (fun i x => set ar i (f x) . i + 1) 0
            if i <> length ar then error_type "Invalid size in the array."

            // TODO: Note that we are sorting the array. Move this into the function later.
            inl {hand score} = score (sort ar)

            inl i8 (x : ap_uint _) : i8 = $"!x"
            inl f i = index hand i |> fun (card {suit rank}) => {suit=i8 suit; rank=i8 rank}
            {hand=f 0, f 1, f 2, f 3, f 4; score=i8 score}

        inl print_score_hand {score hand=c0,c1,c2,c3,c4} =
            inl f {rank suit} : () = $'std::cout << "(" << (int) !rank << "," << (int) !suit << ") " '
            $'std::cout << "Score: " << (int) !score << " " '
            $'std::cout << "Card: "' . f c0 . f c1 . f c2 . f c3 . f c4
            $'std::cout << std::endl'

        if q <> q' then 
            hand |> listm.iter (fun {rank suit} => $'std::cout << "{rank = " << (int) !rank << "; suit = " << (int) !suit << "}; " ')
            $'std::cout << std::endl'

            print_score_hand q
            print_score_hand q'
            num_errors + 1 
        else num_errors
    ) 0