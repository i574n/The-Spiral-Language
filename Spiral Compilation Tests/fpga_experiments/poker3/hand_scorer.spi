open corehls
open type_arith
open real_utils

// TODO: Make the folds reductions whenever possible.
// TODO: Use u8 indices in array folds.

prototype filter_take ar dim el : forall dim'. (el -> bool) -> ar dim el -> option (ar dim' el)
prototype try_straight_flush_for_suit ar dim el {suit; rank} : ap_uint 2 -> ar dim el -> option (ar 5 el)
prototype try_straight ar dim el {suit; rank} : ar dim el -> option (ar 5 el)
prototype max_hand ar dim el {rank} : ar dim el -> ar dim el -> ar dim el
prototype partition_topk_pair ar dim el {rank} : forall dim'. ar dim el -> option (ar dim' el * ar (sub dim dim') el)
prototype take ar dim el : forall dim'. ar dim el -> ar dim' el
prototype merge_hands ar dim el : forall dim'. ar dim el -> ar dim' el -> ar (add dim dim') el
prototype merge_hands2 ar dim el : forall dim' dim''. ar dim el -> ar dim' el -> ar dim'' el -> ar (add (add dim dim') dim'') el

instance filter_take sa = fun f ar => 
    open sam
    inl ar' = create
    inl i = fold (fun i x => if f x && i < length ar' then set ar' i x . i+1 else i) 0 ar
    if i = length ar' then Some ar'
    else None

union try_straight_config el = StraightFlush : ap_uint 2 | Straight

inl (-.) forall dim. (a : ap_uint dim) (b : ap_uint dim) : ap_uint dim = $"!a - !b"
inl (>.) forall dim. (a : ap_uint dim) (b : ap_uint dim) : bool = $"!a > !b"
inl (<.) forall dim. (a : ap_uint dim) (b : ap_uint dim) : bool = $"!a < !b"
inl (~#) forall dim. (x : u32) : ap_uint dim = $"!x"

inl sa_try_straight forall dim el {suit; rank}. (config : try_straight_config el) (inp : sa dim el) =
    real
        open real_core
        if type_lit_to_lit `dim < 5 then error_type "The array passed into the sa_try_straight should be at least 5 in length."
    open sam
    inl out = create
    inl i,target =
        fold (fun (i,target as s) x =>
            inl check () = match config with 
                | StraightFlush a => a = suit x // Skips the cards with a different suit.
                | Straight => target <> rank x -. #1 // Skips the pairs.
            if i < length out && check () then
                inl i = if target = rank x then i else 0
                set out i x
                i+1, rank x -. #1
            else s
            ) (0, #12) inp

    inl check_if_exists_and_assign () = match config with // Takes care of the 5,4,3,2,A pattern.
        | StraightFlush a => listm.exists (index inp >> fun x => a = suit x && rank x = #12 && (set out 4 x . true)) [0;1;2;3]
        | Straight => inl x = index inp 0 in rank x = #12 && (set out 4 x . true)
    // For an unsigned 4 bit value, its overflow below zero would put it at 15, but who knows whether the types will change, so it is best to do it like 0-1.
    if i = 4 && target = (#0 -. #1) && check_if_exists_and_assign() then Some out // 5,4,3,2,A case.
    elif i = 5 then Some out 
    else None


instance try_straight_flush_for_suit sa = sa_try_straight << StraightFlush
instance try_straight sa = sa_try_straight Straight

instance max_hand sa = fun a b =>
    open sam
    inl c =
        fold2 (fun s a b =>
            match s with
            | Eq => comp (rank a) (rank b)
            | _ => s
            ) Eq a b
    if gt_is c then a else b

instance partition_topk_pair sa = fun inp =>
    open sam
    inl l,r = create, create
    inl pos, i, target =
        foldi (fun i' (_,i,target as s) x =>
            if i < length l then
                inl i = if target = rank x then i else 0
                set l i x
                i', i+1, rank x
            else s
            ) (0, 0, #12) inp
    if i = length l then
        // Copies the input into r while avoiding the elements in l.
        inl f gap_size range = loop.for' range (fun i => set r i (index inp (gap_size + i)))
        f 0 {from=0; nearTo=pos+1-length l} . f (length l) {from=pos+1-length l; nearTo=length r}
        Some (l,r)
    else
        None

instance take sa = fun inp =>
    real
        open real_core
        if type_lit_to_lit `dim' > type_lit_to_lit `dim then error_type "The output array should be less than or equal to the original array."
    open loop
    open sam
    inl out = create
    for' {from=0; nearTo=length out} (fun i => set out i (index inp i))
    out

instance merge_hands2 sa = fun ar ar' ar'' => 
    open sam
    inl out = create
    inl f ar offset = (if 0 < length ar then iteri (fun i x => set out (offset + i) x) ar) . offset + length ar
    0 |> f ar |> f ar' |> f ar'' |> ignore
    out

instance merge_hands sa = fun ar ar' => merge_hands2 ar ar' (sam.create : _ 0 _) |> nominal_recreate

inl list_max_hand l =
    listm.fold (fun s x =>
        match s, x with
        | Some s, Some x => Some (max_hand s x)
        | None, x | x, None => x
        | None, None => s
        ) None l

nominal hand_score (ar : * -> * -> *) dim = { score : ap_uint 4; hand : ar dim card }
instance comparable hand_score ar dim = fun a b =>
    match comp a.score b.score with
    | Eq => comp a.hand b.hand
    | x => x

// inl hand_comp (a,b : card * card) : bool = rank a >. rank b || (rank a = rank b && suit a <. suit b)

prototype sort ar dim el {suit; rank} : ar dim el -> ar dim el
instance sort sa = fun ar =>
    sortm.merge_sort (fun a b =>
        match comp (rank b) (rank a) with
        | Eq => comp (suit a) (suit b)
        | x => x
        ) ar

let score forall (ar : * -> * -> *) {sort; filter_take; try_straight_flush_for_suit; try_straight; max_hand; partition_topk_pair; take; merge_hands; merge_hands2} dim. 
        (hand : ar dim card) : hand_score ar 5 =
    inl hand = sort hand

    inl high_card = take hand

    inl pair = 
        match partition_topk_pair hand with
        | Some ((pair : _ 2 _), rest) => Some (merge_hands pair (take rest : _ 3 _) |> nominal_recreate)
        | None => None

    inl two_pair =
        match partition_topk_pair hand with
        | Some ((pair1 : _ 2 _), rest) => 
            match partition_topk_pair rest with
            | Some ((pair2 : _ 2 _), rest) => Some (merge_hands2 pair1 pair2 (take rest : _ 1 _) |> nominal_recreate)
            | None => None
        | None => None

    inl triple = 
        match partition_topk_pair hand with
        | Some ((trip : _ 3 _), rest) => Some (merge_hands trip (take rest : _ 2 _) |> nominal_recreate)
        | None => None

    inl straight = try_straight hand

    inl flush = listm.map (fun i => filter_take (fun a => suit a = #i) hand) [0;1;2;3] |> list_max_hand

    inl full_house =
        match partition_topk_pair hand with
        | Some ((trip : _ 3 _), rest) => 
            match partition_topk_pair rest with
            | Some ((pair : _ 2 _), rest) => Some (merge_hands trip pair |> nominal_recreate)
            | None => None
        | None => None

    inl quad =
        match partition_topk_pair hand with
        | Some ((quad : _ 4 _), rest) => Some (merge_hands quad (take rest : _ 1 _) |> nominal_recreate)
        | None => None

    inl straight_flush = listm.map (fun i => try_straight_flush_for_suit #i hand) [0;1;2;3] |> list_max_hand 
    
    inl rankings = [straight_flush; quad; full_house; flush; straight; triple; two_pair; pair]

    inl to_score score = function
        | Some hand => Some {score hand}
        | None => None
    inl max_hand a b = 
        match a,b with
        | Some x, Some _ => Some x
        | x, None | None, x => x
        | None, None => a
    listm.mapiBack (fun i => to_score #(i+1)) rankings
    |> listm.fold max_hand None
    |> function
        | Some s => s
        | None => {score= #0; hand=high_card}
    |> hand_score

open corehls

type n = 7

inl main () : i32 =
    global "#include <random>"
    global "#include \"ap_int.h\""
    global "#include <iostream>"

    inl n = real real_core.type_lit_to_lit `n

    inl rng = random.make_dist (0,51)

    loop.for {from=0u64; nearTo=100_000} (fun i num_errors =>
        inl make_hand () = 
            open real_utils
            open hand_scorer_orig
            inl get h i = h &&& (1 <<< i) <> 0
            inl set h i = h ||| (1 <<< i)

            let ar = sam.create : sa n _
            inl ~h = 0u64

            loop.while (fun i => i > 0) (fun i =>
                inl r : i8 = random.get_int rng |> conv_int
                if get h (i32 r) then i
                else 
                    sam.set ar (i-1) {rank = rank r; suit = suit r}
                    loop._set h (set h (i32 r))
                    i-1
                ) n
            |> ignore

            listm.init n (sam.index ar)

        inl hand : list {rank : i8; suit : i8} = make_hand()

        inl q = 
            open hand_scorer_orig
            inl f x = 1 <<< conv_int (full x)
            inl {hand=c1,c2,c3,c4,c5 score} = score' (hand |> listm.map f |> listm.fold (|||) 0)
            inl f x = {suit=suit x; rank=rank x}
            {hand=f c1, f c2, f c3, f c4, f c5; score}

        inl q' = 
            open real_utils
            open sam
            inl ar : sa n _ = create
            inl f {rank suit} = card {rank = #(conv_int rank); suit = #(conv_int suit)}
            inl i = hand |> listm.fold (fun i x => set ar i (f x) . i + 1) 0
            if i <> length ar then error_type "Invalid size in the array."

            inl (hand_score {hand score}) = score ar

            inl i8 (x : ap_uint _) : i8 = $"!x"
            inl f i = index hand i |> fun (card {suit rank}) => {suit=i8 suit; rank=i8 rank}
            {hand=f 0, f 1, f 2, f 3, f 4; score=i8 score}

        inl print_score_hand {score hand=c0,c1,c2,c3,c4} =
            inl f {rank suit} : () = $'std::cout << "(" << (int) !rank << "," << (int) !suit << ") " '
            $'std::cout << "Score: " << (int) !score << " " '
            $'std::cout << "Card: "' . f c0 . f c1 . f c2 . f c3 . f c4
            $'std::cout << std::endl'

        if q <> q' then 
            hand |> listm.iter (fun {rank suit} => $'std::cout << "{rank = " << (int) !rank << "; suit = " << (int) !suit << "}; " ')
            $'std::cout << std::endl'

            print_score_hand q
            print_score_hand q'
            num_errors + 1 
        else num_errors
    ) 0
    