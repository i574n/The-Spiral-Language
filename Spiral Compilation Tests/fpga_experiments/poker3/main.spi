open corehls
open real_utils

nominal pid = ap_uint 1
inl pid0 () : pid = $"0"
inl pid1 () : pid = $"1"

prototype draw env : env -> card * env

type pot = i16
nominal player = {hand : option (card * card); pot : pot}

nominal config = {
    stack_size : pot
    sb : pot
    bb : pot
    }

union action = Fold | Call | RaiseTo : pot

prototype ante env : pot -> player -> env -> player * env
prototype betting env : player * player -> list card -> config -> env -> (player * player) * env
prototype showdown env : player * player -> list card -> env -> pot * env
prototype action env : player * player * pid -> list card -> config -> env -> action * env

nominal random_player_env = {
    deck : ap_uint 52
    rng : random.lfsr 128
    }

instance action random_player_env = fun (pl0,pl1,pid) cards config (random_player_env env) =>
    inl pot = max pl0.pot pl1.pot + pl1.pot
    inl raise x = 
        inl v = pot + x
        RaiseTo v, if pl1.pot + config.bb <= v && v <= config.stack_size then 0.25 else 0
    inl actions : _ 8 (_ * f32) = sam.fromList [
        Fold, if pl0.pot < pl1.pot then 1 else 0
        Call, 2
        raise (pot / 4)
        raise (pot / 3)
        raise (pot / 2)
        raise pot
        raise (pot * 3 / 2)
        RaiseTo config.stack_size, if pl0.pot < config.stack_size then 0.3 else 0
        ]
    inl a,rng = random.sample_discrete actions env.rng
    a,random_player_env {env with rng}

union betting = TurnOf : {pid : pid; call_skip : ap_uint 2} | Done

instance betting random_player_env = fun (pl0,pl1) community_cards config env =>
    inl call (player pl0, player pl1) = player {pl0 with pot #= max pl1.pot}
    // Clamps the raise between [pl1.pot + config.bb, config.stack_size]
    inl raise pot (player pl0, player pl1) = player {pl0 with pot #= max pot >> max (pl1.pot + config.bb) >> min config.stack_size}
    inl fold (player pl) = player {pl with hand = None}
    inl {pl0 pl1 env} =
        loop.while (fun {pl0 pl1 num_moves_left state env} => num_moves_left > 0 && state <> Done) (fun {pl0 pl1 num_moves_left state env} =>
            inl pl pid f = 
                inl b = pid = pid0()
                inl pl0,pl1,pid = if b then pl0, pl1, pid1() else pl1, pl0, pid0()
                inl pl0,rest = f (pl0,pl1,pid)
                inl pl0,pl1 = if b then pl0,pl1 else pl1,pl0 // Swaps the players back into their original positions.
                pl0,pl1,rest

            inl pl0,pl1,state,env =
                match state with
                | Done => pl0,pl1,Done,env
                | TurnOf {pid call_skip} =>
                    pl pid fun pl0,pl1,pid =>
                    inl a,env = action (pl0,pl1,pid) community_cards config env
                    inl x,state =
                        match a with
                        | Fold => fold pl0, Done
                        | Call => open ap_uintm in call (pl0, pl1), if @0 <. call_skip then TurnOf {pid call_skip=dec call_skip} else Done
                        | RaiseTo pot => open ap_uintm in raise pot (pl0,pl1), TurnOf {pid call_skip= @0}
                    x,state,env
            {pl0 pl1 state env num_moves_left=num_moves_left-1}
            ) {pl0 pl1 env num_moves_left = 11u8; state = TurnOf {pid=pid0(); call_skip=open ap_uintm in if [pl0.pot; pl1.pot] = [config.bb; config.sb] then @2 else @1}}
    (pl0,pl1),env

instance showdown random_player_env = fun (pl0,pl1) community_cards env =>
    match pl0.hand, pl1.hand with
    | Some h0, Some h1 => 
        let score h0 = 
            inl ar : sa 7 card = sam.create
            inl f i x = sam.set ar i x . i+1
            inl i = listm.fold f 0 [fst h0; snd h0]
            inl i = listm.fold f i community_cards
            if i <> sam.length ar then error_type "The length of the array needs to be the same as the length community cards"
            hand_scorer.score ar
        inl h0, h1 = score h0, score h1
        inl r =
            match comp h0 h1 with
            | Gt => pl1.pot
            | Eq => 0
            | Lt => -pl0.pot
        r, env
    | Some _, None => pl1.pot, env
    | None, Some _ => -pl0.pot, env
    | None, None => 0, env

instance ante random_player_env = fun pot (player pl0) env => player {pl0 with pot}, env
instance draw random_player_env = fun (random_player_env {rng deck}) => 
    inl card,deck,rng = random.draw_card deck rng
    card, random_player_env {deck rng}

inl game (config : config) ~env = join
    pragma.pipeline {ii=1}
    inl draw_hidden pid =
        inl c1,env = draw env
        inl c2,env = draw env
        player {hand = Some (c1,c2); pot = 0}, env

    // Preflop
    inl pl0,env = draw_hidden pid0()
    inl pl1,env = draw_hidden pid1()
    
    inl pl0,env = ante config.bb pl0 env
    inl pl1,env = ante config.sb pl1 env

    inl (pl0,pl1), env = betting (pl0,pl1) [] config env

    // Flop
    inl c0,env = draw env
    inl c1,env = draw env
    inl c2,env = draw env
    inl (pl0,pl1), env = betting (pl0,pl1) [c0;c1;c2] config env

    // Turn
    inl c3,env = draw env
    inl (pl0,pl1), env = betting (pl0,pl1) [c0;c1;c2;c3] config env

    // River
    inl c4,env = draw env
    inl (pl0,pl1), env = betting (pl0,pl1) [c0;c1;c2;c3;c4] config env

    // Showdown
    showdown (pl0,pl1) [c0;c1;c2;c3;c4] env

inl game_loop config ~env = join
    loop.for {from=0; nearTo=1_000_1000} (fun (i : i32) (r,env) =>
        pragma.pipeline {ii=1}
        inl r',env = game config env
        r+r',env
        ) (0,env)

inl main() =
    inl config = config { stack_size=100; bb=2; sb=1 }
    inl env = random_player_env {rng = random.default(); deck= ap_uintm.(~@) 0}
    inl r, env = game_loop config env
    $'std::cout << !r << std::endl'
    0i32