open corehls
open real_utils

nominal pid = ap_uint 1
inl pid0 () : pid = $"0"
inl pid1 () : pid = $"1"

prototype draw env : env -> card * env

type pot = i16
nominal player = {hand : option (card * card); pot : pot}

nominal config = {
    stack_size : pot
    sb : pot
    bb : pot
    }

union action = Fold | Call | RaiseTo : pot

prototype ante env : pot -> player -> env -> player * env
prototype betting env : player * player -> list card -> config -> env -> (player * player) * env
prototype showdown env : player * player -> list card -> env -> pot * env
prototype action env : player * player * pid -> list card -> config -> env -> action

nominal some_env = ()

instance action some_env = fun (pl0,pl1,pid) cards config env =>
    
    Fold

union betting = Init | TurnOf : pid | Done

instance betting some_env = fun (pl0,pl1) community_cards config env =>
    inl call (player pl0, player pl1) = player {pl0 with pot #= max pl1.pot}
    // Clamps the raise between [pl1.pot + config.bb, config.stack_size]
    inl raise pot (player pl0, player pl1) = player {pl0 with pot #= max pot >> max (pl1.pot + config.bb) >> min config.stack_size}
    inl fold (player pl) = player {pl with hand = None}
    inl {pl0 pl1 state} =
        loop.while (fun {pl0 pl1 num_moves_left state} => num_moves_left > 0 && state <> Done) (fun {pl0 pl1 num_moves_left state} =>
            inl pl pid f = 
                inl b = pid = pid0()
                inl pl0,pl1,pid = if b then pl0, pl1, pid1() else pl1, pl0, pid0()
                inl pl0,rest = f (pl0,pl1,pid)
                inl pl0,pl1 = if b then pl0,pl1 else pl1,pl0 // Swaps the players back into their original positions.
                pl0,pl1,rest

            inl pl0,pl1,state =
                match state with
                | Init =>
                    pl pid0() fun pl0,pl1,next_pid =>
                    match action (pl0,pl1,next_pid) community_cards config env with
                    | Fold => fold pl0, Done
                    | Call => call (pl0, pl1), TurnOf next_pid
                    | RaiseTo pot => raise pot (pl0,pl1), TurnOf next_pid
                | TurnOf pid =>
                    pl pid fun pl0,pl1,next_pid =>
                    match action (pl0,pl1,next_pid) community_cards config env with
                    | Fold => fold pl0, Done
                    | Call => call (pl0, pl1), Done
                    | RaiseTo pot => raise pot (pl0,pl1), TurnOf next_pid

            {pl0 pl1 state num_moves_left=num_moves_left-1}
            ) {pl0 pl1 num_moves_left = 11u8; state = Init}
    (pl0,pl1),env

instance showdown some_env = fun (pl0,pl1) community_cards env =>
    match pl0.hand, pl1.hand with
    | Some h0, Some h1 => 
        let score h0 = 
            inl ar : sa 7 card = sam.create
            inl f i x = sam.set ar i x . i+1
            inl i = listm.fold f 0 [fst h0; snd h0]
            inl i = listm.fold f i community_cards
            if i <> sam.length ar then error_type "The length of the array needs to be the same as the length community cards"
            hand_scorer.score ar
        inl h0, h1 = score h0, score h1
        inl r =
            match comp h0 h1 with
            | Gt => pl1.pot
            | Eq => 0
            | Lt => -pl0.pot
        r, env
    | Some _, None => pl1.pot, env
    | None, Some _ => -pl0.pot, env
    | None, None => 0, env

inl game (config : config) ~env = join
    inl draw_hidden pid =
        inl c1,env = draw env
        inl c2,env = draw env
        player {hand = Some (c1,c2); pot = 0}, env

    // Preflop
    inl pl0,env = draw_hidden pid0()
    inl pl1,env = draw_hidden pid1()
    
    inl pl0,env = ante config.bb pl0 env
    inl pl1,env = ante config.sb pl1 env

    inl (pl0,pl1), env = betting (pl0,pl1) [] config env

    // Flop
    inl c0,env = draw env
    inl c1,env = draw env
    inl c2,env = draw env

    inl (pl0,pl1), env = betting (pl0,pl1) [c0;c1;c2] config env

    // Turn
    inl c3,env = draw env

    inl (pl0,pl1), env = betting (pl0,pl1) [c0;c1;c2;c3] config env

    // River
    inl c4,env = draw env

    inl (pl0,pl1), env = betting (pl0,pl1) [c0;c1;c2;c3;c4] config env

    // Showdown
    showdown (pl0,pl1) [c0;c1;c2;c3;c4] env