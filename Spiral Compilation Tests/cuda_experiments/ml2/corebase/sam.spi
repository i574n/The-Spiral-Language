// The array template module. Generic functions for array like structures.
open loop

// Creates an empty array.
inl create' forall dim el. : sa dim el = 
    inl dim = real open real_core in type_lit_to_lit `dim : int
    sa (create dim)
    
instance create sa dim = fun dim =>
    assert ((real real_core.type_lit_to_lit `dim) = dim) "The type level dimension has to equal the value passed at runtime into create."
    create'

// Indexes into an array.
instance index sa dim = fun ar i => $"!ar[!i]"
// Sets the value of an array at the specified index.
instance set sa dim = fun ar i v => $"!ar[!i] = !v"
// Returns the length of an array.
instance length sa dim = fun ar => real real_core.type_lit_to_lit `dim : int

open arraym

instance equable sa dim el = generic_equable
instance comparable sa dim el = generic_comparable

// Initializes array using the given function.
inl init forall dim el. f : sa dim el = init (real real_core.type_lit_to_lit `dim) f

open console
inl sa_print forall dim el. array_limit (x : sa dim el) : () =
    write "["
    loop.for' {from=0; nearTo=min array_limit (length x)} (fun i =>
        write (index x i)
        if i + 1 < length x then write "; "
        )
    if length x > array_limit then write "; ..."
    write "]"

instance printable sa dim el = sa_print 100