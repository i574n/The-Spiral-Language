open corebase

nominal json t = obj

let deserialize forall t. (json x : json t) : t = real
    open real_core
    inl rec f forall t'. (x : obj) : t' = 
        typecase t' with
        | () => $"assert !x == [], f'Expected an unit type. Got: {!x}'" : ()
        | ~a * ~b => f_tuple `t' 0 x
        | {} => 
            record_type_map (fun k => forall v. =>
                f `v ($'!x[!(symbol_to_string k)]' : obj)
                ) `t'
        | sa_listm.sa_list ~dim ~el =>
            $"assert isinstance(!x,list), f'The object needs to be a Python list. Got: {!x}'" : ()
            inl len : int = $"len(!x)"
            inl ar = create `(sa_listm.sa_list dim) `el len
            loop.for' `int {from=0; nearTo=len} fun i =>
                set `(sa_listm.sa_list dim) `el ar i (f `el ($"!x[!i]" : obj))
            ar
        | _ =>
            if union_type_is `t' then 
                inl body() =
                    inl k,v = ($"!x[0]" : string), ($"!x[1]" : obj)
                    union_to_record `t' forall r. =>
                    record_type_fold_back (fun key => forall value. next _ =>
                        if symbol_to_string key = k then nominal_create `t' (key, f `value v)
                        else next ()
                        ) `r 
                        (fun _ => 
                            $'raise TypeError(f"Cannot convert the Python object into a Spiral union type. Invalid string tag. Got: {!k}")' : ()
                            failwith `t' "Error"
                            ) ()
                (join body()) : t'
            else
                inl case_float () =
                    $"assert isinstance(!x,(int,float)), f'The object needs to be an int or a float. Got: {!x}'" : ()
                    $"`t'(!x)" : t'
                typecase t' with
                | f32 => case_float()
                | f64 => case_float()
                | _ =>
                    $"assert isinstance(!x,`t'), f'The object needs to be the right primitive type. Got: {!x}'" : ()
                    $"!x" : t'
    and inl f_tuple forall t'. (i : int) x : t' =
        typecase t' with
        | ~a * ~b => f `a ($"!x[!i]" : obj), f_tuple `b (i+1) x
        | _ => f `t' ($"!x[!i]" : obj)
    f `t x

let serialize forall t. (x : t) : json t = json real
    open real_core
    inl rec f forall t'. (x : t') : obj = 
        typecase t' with
        | () => $"[]" : obj
        | ~a * ~b => f_tuple `t' (python_listm.create' `obj) x
        | {} => record_type_map (fun k => forall v. => f `v (x k)) `t' |> fun x => !!!!ToPythonRecord(x)
        | sa_listm.sa_list ~dim ~el =>
            inl ar : obj = $"[]"
            loop.for' `int {from=0; nearTo=length `(sa_listm.sa_list dim) `el x} fun i =>
                inl x = f `el (index `(sa_listm.sa_list dim) `el x i)
                $"!ar.append(!x)" : ()
            ar
        | _ =>
            if union_type_is `t' then 
                inl body() =
                    unbox x (fun (k,v) =>
                        inl k = symbol_to_string k
                        inl v = f `(`(v)) v
                        $"[!k,!v]" : obj
                        )
                (join body()) : obj
            else
                $"!x" : obj
    and inl f_tuple forall t'. (l : python_listm.python_list obj) (x : t') : obj =
        typecase t' with
        | ~a * ~b => 
            python_listm.push `obj l (f `a (fst x))
            f_tuple `b l (snd x)
        | _ => 
            python_listm.push `obj l (f `t' x)
            $"!l" : obj
    f `t x

type t = (int * int) * {a : option int; b : option int; c : int} * ((float * float) *  bool * bool) * list string * sa_listm.sa_list 16 (int * float)
inl data() : t = (1, 2), {a=Some 1; b=None; c=3},((55.34,66.23), true, false), ["qwe"; "asd"], arraym.fromList [1,2;3,4;5,6]

inl test1() =
    serialize data()
    |> deserialize |> console.write_ln

inl main() = test1()