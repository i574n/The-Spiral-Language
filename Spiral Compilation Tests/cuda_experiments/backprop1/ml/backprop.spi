open corebase
open corecuda
open tensorm

union rec backpropagation_op = BckOp : list backpropagation_op * (() -> ())
type dual_tensor dim t = tensor dim {primal : t; adjoint : t}
nominal dual dim t = dual_tensor dim t * backpropagation_op

inl primal forall dim t. : dual_tensor dim t -> tensor dim t = rezip (fun from => from.primal)
inl adjoint forall dim t. : dual_tensor dim t -> tensor dim t = rezip (fun from => from.adjoint)

open primitives
// inl relu_fwd forall dim a{number}.
//         (block : ref cooperative_groups.thread_block)
//         (from : tensor (dim * int) a) (to : tensor (dim * int) a) : () =
//     template_map_2d block (fun config inp _ _ =>
//         local_map (max 0) inp
//         ) from to

// inl relu_bck forall dim a{number}.
//         (block : ref cooperative_groups.thread_block)
//         (from : dual_tensor (dim * int) a) (to : dual_tensor (dim * int) a) : () =
//     (zip from to, adjoint from) ||> template_map_2d block (fun config inp _ _ =>
//         inl from, to = unzip inp
//         inl out = local_map (max 0) (primal from)
//         inl grad = local_map (fun adj, out => if out > 0 then adj else 0) (zip (adjoint to) out) 
//         local_map (fun a,b => a+b) (zip (adjoint from) grad)
//         )

// inl map_op fwd bck block from to =
//     template_map_2d block (fun config inp _ _ =>
//         local_map fwd inp
//         ) (primal from) (primal to)
//     fun () =>
//         (zip from to, adjoint from) ||> template_map_2d block (fun config inp _ _ =>
//             inl from, to = unzip inp
//             inl out = local_map fwd (primal from)
//             inl grad = local_map (fun adj, out => adj * bck out) (zip (adjoint to) out) 
//             local_map (fun a,b => a+b) (zip (adjoint from) grad)
//             )
// inl map_op fwd bck block from to =
//     template_map_2d block (fun config inp _ _ =>
//         local_map fwd inp
//         ) (primal from) (primal to)
//     fun () =>
//         (to, adjoint from) ||> template_map_2d block (fun config to _ _ =>
//             inl grad = local_map (fun adj, out => adj * bck out) (zip (adjoint to) (primal to)) 
//             local_map (fun a,b => a+b) (zip (adjoint from) grad)
//             )

// inl relu bl = map_op (max 0) (fun out => if out > 0 then 1 else 0) bl
// inl sigmoid bl = map_op (fun x => 1 / (1 + exp -x)) (fun out => out * (1 - out)) bl
// inl tanh bl = map_op tanh (fun out => 1 - out * out) bl


// inl template_map_2d forall dim a b.
//         (block : ref cooperative_groups.thread_block)
//         (f : template_2d_config -> dual (int * int) a -> dim -> dual (int * int) int -> dual (int * int) b)
//         (from : dual_tensor (dim * int) a) (to : dual_tensor (dim * int) b) : () -> () =
    
//     template_map_2d block (fun config inp =>
//         ()
//         ) 
//     ()

// Adds the input to the output.
inl local_inplace_add forall a. (from : tensor _ a) (to : tensor _ a) : () =
    local_inplace_map (real open real_core in fun a,b => struct.map2 (+) a b) (zip from to) to
inl to_dual_tensor forall a. (primal : tensor _ a) : dual_tensor _ a = 
    inl adjoint = local_map (real open real_core in struct.map (const 0)) primal
    zip primal adjoint |> rezip (fun primal, adjoint => {primal adjoint})
inl to_dual forall dim a. (x : dual_tensor dim a) = dual (x, BckOp([], id))

inl run_bck_op (BckOp (l, op)) =
    // TODO: run all the ops in a lexicographic traversal.
    ()

inl map op block from to =
    template_map_2d block (fun config from _ _ =>
        // In the forward pass the adjoints don't matter so we add fake ones.
        inl (dual (out, bck)) = op (to_dual (to_dual_tensor from))
        primal out
        ) (primal from) (primal to)
    fun () =>
        (zip from to, adjoint from) ||> template_map_2d block (fun config inp _ _ =>
            inl from, to = unzip inp
            inl (dual (out, bck)) = op (to_dual from)
            local_inplace_add (adjoint to) (adjoint out)
            run_bck_op bck
            adjoint from
            )

// Multiplies all the elements in the second argument by the first.
inl multiply_by_scalar forall a{number} b. (x : a) : b -> b = real open real_core in struct.map ((*) x)
inl local_map_op forall a b{number}. (fwd : a -> b) (bck : a * b -> a) (dual (inp, op)) : dual _ b = 
    inl out = local_map fwd (primal inp) |> to_dual_tensor
    dual (out, BckOp([op],fun () =>
        inl grad = zip (primal inp) out |> local_map (fun a,b => multiply_by_scalar b.adjoint (bck (a,b.primal)))
        local_inplace_add grad (adjoint inp)
        ))

inl local_unzip (dual (x,x_op)) = 
    inl a = x |> rezip fun x => {primal=fst x.primal; adjoint=fst x.adjoint}
    inl b = x |> rezip fun x => {primal=snd x.primal; adjoint=snd x.adjoint}
    dual (a, x_op), dual (b, x_op)
inl local_zip (dual (a,a_op)) (dual (b,b_op)) = 
    inl x = zip a b |> rezip fun a,b => {primal=a.primal,b.primal; adjoint=a.adjoint,b.adjoint}
    dual (x, BckOp([a_op; b_op], id))
inl local_add a b = local_map_op (fun a,b => a+b) (fun _,_ => 1, 1) (local_zip a b)
inl local_mult a b = local_map_op (fun a,b => a*b) (fun (a,b),out => b, a) (local_zip a b)
inl local_relu x = local_map_op (max 0) (fun _,out => if out > 0 then 1 else 0) x
inl local_sigmoid x = local_map_op (fun x => 1 / (1 + exp -x)) (fun _,out => out * (1 - out)) x
inl local_tanh x = local_map_op tanh (fun _,out => 1 - out * out) x

inl lstm_cell bl =
    inl pell (a,b) = inl b,c = local_unzip b in (a,b),c
    inl (+),(*),sig,tanh = local_add, local_mult, local_sigmoid, local_tanh

    map (fun inp =>
        inl (((cell_prev,f),i),o),c_gate = local_unzip inp |> pell |> pell |> pell
        inl cell = sig f * cell_prev + sig i * sig c_gate 
        sig o * tanh cell
        ) bl

inl relu bl = map (local_map_op (max 0) (fun _,out => if out > 0 then 1 else 0)) bl
inl sigmoid bl = map (local_map_op (fun x => 1 / (1 + exp -x)) (fun _,out => out * (1 - out))) bl
inl tanh bl = map (local_map_op tanh (fun _,out => 1 - out * out)) bl

