prototype equable a : a -> a -> bool

union order = Eq | Lt | Gt
prototype comparable a : a -> a -> order
inl eq() = Eq
inl eq_is = function Eq => true | _ => false
inl lt() = Lt
inl lt_is = function Lt => true | _ => false
inl gt() = Gt
inl gt_is = function Gt => true | _ => false

prototype hashable a : a -> i32

union option a = Some : a | None
union choice2 a b = C1of2 : a | C2of2 : b
union result a b = Ok : a | Error : b
union rec list a = Nil | Cons : a * list a
// Concatenates an element to the head of a list.
inl (::) a b = Cons (a,b)

// Puts a statement in the global scope.
inl global (x : string) : () = !!!!Global(x)