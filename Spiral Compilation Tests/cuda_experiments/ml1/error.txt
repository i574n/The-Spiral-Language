Error trace on line: 52, column: 5 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corecuda\base.spi.
    global "options.append('--generate-line-info')"
    ^
Error trace on line: 53, column: 5 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corecuda\base.spi.
    global "options.append('-D__CUDA_NO_HALF_CONVERSIONS__')" // To avoid `instance of overloaded function "__half::__half" matches the specified type` with NVCC
    ^
Error trace on line: 57, column: 5 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corecuda\base.spi.
    match threads_per_block with
    ^
Error trace on line: 63, column: 5 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corecuda\base.spi.
    global "raw_module = cp.RawModule(code=kernel, backend='nvcc', enable_cooperative_groups=True, options=tuple(options))"
    ^
Error trace on line: 64, column: 5 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corecuda\base.spi.
    inl kernel_i, vars = join_backend Cuda
    ^
Error trace on line: 65, column: 9 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corecuda\base.spi.
        global "#include <assert.h>"
        ^
Error trace on line: 66, column: 9 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corecuda\base.spi.
        f () : ()
        ^
Error trace on line: 87, column: 9 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\ml\primitives.spi.
        inclusive_scan_2d 0 (+) input output
        ^
Error trace on line: 45, column: 5 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\ml\primitives.spi.
    assert (from.dim = to.dim) "The dimensions of the two inputs to the inclusive scan kernel need to be the same."
    ^
Error trace on line: 47, column: 5 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\ml\primitives.spi.
    global "#include <cooperative_groups.h>"
    ^
Error trace on line: 48, column: 5 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\ml\primitives.spi.
    global "#include <cooperative_groups/reduce.h>"
    ^
Error trace on line: 51, column: 5 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\ml\primitives.spi.
    loop.projective warps_in_block(fst from.dim) fun i =>
    ^
Error trace on line: 122, column: 5 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
    forBy' {from by nearTo=prod nearTo} (proj nearTo >> body)
    ^
Error trace on line: 28, column: 25 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
inl forBy' range body = forBy range (fun i () => body i) ()
                        ^
Error trace on line: 24, column: 5 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
    inl i, state = _dup (from, state)
    ^
Error trace on line: 24, column: 9 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
    inl i, state = _dup (from, state)
        ^
Error trace on line: 25, column: 5 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
    while' (fun () => i < nearTo) fun () => _set state (body i state) . _add i by
    ^
Error trace on line: 2, column: 82 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
inl while' (cond : () -> bool) (body : () -> ()) : () = !!!!While((join cond()),(body()))
                                                                                 ^
Error trace on line: 25, column: 39 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
    while' (fun () => i < nearTo) fun () => _set state (body i state) . _add i by
                                      ^
Error trace on line: 25, column: 45 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
    while' (fun () => i < nearTo) fun () => _set state (body i state) . _add i by
                                            ^
Error trace on line: 25, column: 57 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
    while' (fun () => i < nearTo) fun () => _set state (body i state) . _add i by
                                                        ^
Error trace on line: 28, column: 44 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
inl forBy' range body = forBy range (fun i () => body i) ()
                                           ^
Error trace on line: 28, column: 50 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
inl forBy' range body = forBy range (fun i () => body i) ()
                                                 ^
Error trace on line: 59, column: 18 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\core.spi.
inl (>>) a b x = b (a x)
                 ^
Error trace on line: 52, column: 9 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\ml\primitives.spi.
        inl from,to = apply i from |> factorize_sizeof_16, apply i to |> factorize_sizeof_16
        ^
Error trace on line: 52, column: 13 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\ml\primitives.spi.
        inl from,to = apply i from |> factorize_sizeof_16, apply i to |> factorize_sizeof_16
            ^
Error trace on line: 53, column: 9 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\ml\primitives.spi.
        inl result = loop._dup neutral_element
        ^
Error trace on line: 54, column: 9 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\ml\primitives.spi.
        loop.projective threads_in_warp(fst from.dim) fun i =>
        ^
Error trace on line: 122, column: 5 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
    forBy' {from by nearTo=prod nearTo} (proj nearTo >> body)
    ^
Error trace on line: 28, column: 25 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
inl forBy' range body = forBy range (fun i () => body i) ()
                        ^
Error trace on line: 24, column: 5 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
    inl i, state = _dup (from, state)
    ^
Error trace on line: 24, column: 9 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
    inl i, state = _dup (from, state)
        ^
Error trace on line: 25, column: 5 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
    while' (fun () => i < nearTo) fun () => _set state (body i state) . _add i by
    ^
Error trace on line: 2, column: 82 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
inl while' (cond : () -> bool) (body : () -> ()) : () = !!!!While((join cond()),(body()))
                                                                                 ^
Error trace on line: 25, column: 39 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
    while' (fun () => i < nearTo) fun () => _set state (body i state) . _add i by
                                      ^
Error trace on line: 25, column: 45 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
    while' (fun () => i < nearTo) fun () => _set state (body i state) . _add i by
                                            ^
Error trace on line: 25, column: 57 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
    while' (fun () => i < nearTo) fun () => _set state (body i state) . _add i by
                                                        ^
Error trace on line: 28, column: 44 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
inl forBy' range body = forBy range (fun i () => body i) ()
                                           ^
Error trace on line: 28, column: 50 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\loop.spi.
inl forBy' range body = forBy range (fun i () => body i) ()
                                                 ^
Error trace on line: 59, column: 18 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\core.spi.
inl (>>) a b x = b (a x)
                 ^
Error trace on line: 55, column: 13 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\ml\primitives.spi.
            inl group = create_coalesced_threads()
            ^
Error trace on line: 56, column: 13 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\ml\primitives.spi.
            inl from,to = apply i from, apply i to
            ^
Error trace on line: 56, column: 17 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\ml\primitives.spi.
            inl from,to = apply i from, apply i to
                ^
Error trace on line: 57, column: 13 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\ml\primitives.spi.
            inl l_from = tensor_create from.dim
            ^
Error trace on line: 59, column: 13 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\ml\primitives.spi.
            memcpy_sync (l_from, from)
            ^
Error trace on line: 60, column: 13 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\ml\primitives.spi.
            inl prefix,sum = 
            ^
Error trace on line: 61, column: 17 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\ml\primitives.spi.
                loop.for {from=0; nearTo=l_from.dim} (fun i => f (tensor_index i l_from)) neutral_element
                ^
Error trace on line: 57, column: 16 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corebase\core.spi.
inl (|>) a b = b a
               ^
Error trace on line: 48, column: 5 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corecuda\cooperative_groups.spi.
    inl inclusive : el = $"cooperative_groups::inclusive_scan(!tile, !x, !f)"
    ^
Error trace on line: 48, column: 26 in module: d:\Users\Marko\Source\Repos\The Spiral Language\Spiral Compilation Tests\cuda_experiments\ml1\corecuda\cooperative_groups.spi.
    inl inclusive : el = $"cooperative_groups::inclusive_scan(!tile, !x, !f)"
                         ^
The Cuda C++ backend doesn't support closures due to them needing to be heap allocated, only function pointers. For them to be converted to pointers, the closures must not have any free variables in them.