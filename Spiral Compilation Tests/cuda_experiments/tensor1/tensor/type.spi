open corebase
open utils

nominal tensor_body dim el = {
    array : array el
    stride : dim
    offset : int
    }

nominal tensor dim el = {
    bodies : `(infer `(tensor_body dim) `el)
    dim : dim
    }

inl fromArray forall t. (x : array t) : tensor int t = tensor {dim = length x; bodies = real tensor_body `int `t {array = x; stride = 1; offset = 0}}

inl create forall dim el. (dim : dim) : tensor dim el = 
    inl len, stride = real
        open real_core
        inl rec loop = function
            | a,b => inl b,s = loop b in a*b, b, s
            | x => x, 1
        loop dim
    inl create_body forall t. : tensor_body dim t = tensor_body {
        array = create len
        offset = 0
        stride 
        }
    tensor {dim bodies=real infer_templ `el create_body}

inl index forall dim el. (tensor {bodies dim} : tensor dim el) (i : dim) : el = real 
    assert_indices (dim, i)
    iter (fun (tensor_body {array stride offset}) =>
        typecase `array with
        | ~ar ~el => index `ar `el (offset + calculate_offset (stride, i))
        ) bodies

inl set forall dim el. (tensor {bodies dim} : tensor dim el) (i : dim) (v : el) : () = real 
    assert_indices (dim, i)
    iter2 (fun (tensor_body {array stride offset}) v =>
        typecase `array with
        | ~ar ~el => set `ar `el (offset + calculate_offset (stride, i)) v
        ) bodies v

inl length forall dim el. (tensor {dim} : tensor dim el) : int = real
    let rec loop = function
        | (a,b) => a * loop b
        | x => x
    loop dim

// Zips two tensors. Apart from dimension checking, all the work is done at compile time.
inl zip forall dim a b. (a : tensor dim a) (b : tensor dim b) : tensor dim (a * b) =
    assert (a.dim = b.dim) "The two tensors have to have the same dimensions for zipping to work."
    tensor {dim = a.dim; bodies = real a.bodies, b.bodies}
    
// Should only be used to rearrange internal fields.
inl rezip forall dim a b. (f : a -> b) (a : tensor dim a) : tensor dim b =
    tensor {dim = a.dim; bodies=real f a.bodies}

// Overloads the ;[] array constructor.
inl array forall t. (x : array_base t) : tensor int t = 
    inl array = array x
    tensor {dim = corebase.length array; bodies=real tensor_body `int `t {array stride=1; offset=0} }

// Assert the array length. If they are the same, substitutes it with the given length in the resulting array.
// Useful when then given length is known at compile time and the array length is known at runtime.
// In that case, the resulting array will have the length given at compile time.
inl assert_len forall dim el. (dim : dim) (tensor {dim=dim' bodies} : tensor dim el) : tensor dim el =
    assert (dim = dim') "Expected the length of the array to be the specified amount."
    tensor {dim bodies}
    
