open corebase

nominal row_major = $"nvcuda::wmma::mem_row_major"
nominal col_major = $"nvcuda::wmma::mem_col_major"

nominal matrix_a = $"nvcuda::wmma::matrix_a"
nominal matrix_b = $"nvcuda::wmma::matrix_b"
nominal accumulator = $"nvcuda::wmma::accumulator"

nominal tf32 = $"nvcuda::wmma::precision::tf32"
nominal fragment use m n k layout t = $"nvcuda::wmma::fragment<`use, @m, @n, @k, `t, `layout>"

instance index fragment use m n k layout = fun f i => $"!f.x[!i]"
instance set fragment use m n k layout = fun f i v => $"!f.x[!i] = !v"
instance length fragment use m n k layout = fun f => $"!f.num_elements"

open tensorm
open tensorm.cuda

inl create_fragment forall use m n k layout t. : fragment use m n k layout t =
    $"nvcuda::wmma::fragment<`use, @m, @n, @k, `t, `layout> v$"


inl get_fragment_dimension forall use m n k layout t. (f : fragment use m n k layout t) : int * int = real
    open real_core
    inl a,b =
        typecase use with
        | matrix_a => type_lit_to_lit `m, type_lit_to_lit `k
        | matrix_b => type_lit_to_lit `k, type_lit_to_lit `n
        | accumulator => type_lit_to_lit `m, type_lit_to_lit `n
    typecase layout with
    | row_major => a,b
    | col_major => b,a

inl assert_fragment_dimension forall use m n k layout t el. (f : fragment use m n k layout t) (t : tensor (int * int) el) : () =
    assert (get_fragment_dimension f = t.dim) "The fragment's dimensions must match that of the tensor."

inl load_matrix_sync_tf32_array forall use m n k layout. (f : fragment use m n k layout tf32) (ar : array f32) (ldm : int) : () = 
    $"load_matrix_sync(!f, !ar, !ldm, @layout)"
    $"#pragma unroll"
    $"for (int t = 0; t < !f.num_elements; t++) { !f.x[t] =  nvcuda::wmma::__float_to_tf32(!f.x[t]); }"

inl load_matrix_sync_tf32 forall use m n k layout. (f : fragment use m n k layout tf32) (t : tensor (int * int) f32) : () =
    assert_fragment_dimension f t
    load_matrix_sync_tf32_array f (ptr_at (0,0) t) (stride_fst t)

inl load_matrix_sync_array forall use m n k layout t. (f : fragment use m n k layout t) (ar : array t) (ldm : int) : () = 
    $"load_matrix_sync(!f, !ar, !ldm, @layout)"

inl load_matrix_sync forall use m n k layout t. (f : fragment use m n k layout t) (t : tensor (int * int) t) : () =
    assert_fragment_dimension f t
    load_matrix_sync_array f (ptr_at (0,0) t) (stride_fst t)

inl store_matrix_sync_array forall use m n k layout t. (ar : array t) (f : fragment use m n k layout t) (ldm : int) : () = 
    $"store_matrix_sync(!ar, !f, !ldm, @layout)"

inl store_matrix_sync forall use m n k layout t. (t : tensor (int * int) t) (f : fragment use m n k layout t) : () = 
    assert_fragment_dimension f t
    store_matrix_sync_array (ptr_at (0,0) t) f (stride_fst t)

inl fill_fragment forall use m n k layout t. (f : fragment use m n k layout t) (v : t) : () =  $"fill_fragment(!f, !v)"
inl mma_sync forall m n k a_layout b_layout out_layout t_in t_out. 
        (d : fragment accumulator m n k out_layout t_out) 
        (a : fragment matrix_a m n k a_layout t_in) 
        (b : fragment matrix_b m n k b_layout t_in) 
        (c : fragment accumulator m n k out_layout t_out) 
        : () =
    $"mma_sync(!d, !a, !b, !c)"