open corebase
open corepython

union action = Raise | Call | Fold
union card = King | Queen | Jack
union player_type = Computer | Human
union event = 
    | StartGame
    | PlayerChanged : sam.sa 2 player_type
    | ActionSelected : action

type table =
    {
        pot : sam.sa 2 int
        community_card : option card
        pl_card : sam.sa 2 card
        raises_left : int
        is_button_s_first_move : bool
        player_turn : int
    }

union message =
    | PlayerGotCard : int * card
    | CommunityCardIs : card
    | PlayerAction : int * action
    | Showdown : {winner_id : int; chips_won : int; cards_shown : sam.sa 2 card}

type deck = sa_listm.sa_list 6 card
type player_types = sam.sa 2 player_type
type messages = sa_listm.sa_list 32 message

union ui_game_state =
    | GameNotStarted
    | WaitingForActionFromPlayerId : table
    | GameOver : table 

union game =
    | TerminalFold : table
    | TerminalCall : table
    | RoundWithAction : table * action
    | Round : table
    | ChanceCommunityCard : table
    | ChanceInit

type game_state =
    option {
        deck : deck
        game : game
    }

type state =
    {
        ui_state : {
            ui_game_state : ui_game_state
            pl_type : player_types
            messages : messages
            }
        game_state : game_state
    }

inl init() : state = 
    {
        ui_state = {
            ui_game_state = GameNotStarted
            pl_type = arraym.fromList [Computer; Human]
            messages = sa_listm.create'
            }
        game_state = None
    }

let compare_hands (table : table) =
    let tag = function King => 2 | Queen => 1 | Jack => 0 : int
    match table.community_card with
    | None => failwith "Expected the community card to be present in the table."
    | Some community_card =>
        let community_card = tag community_card
        let a = tag (index table.pl_card 0), community_card
        let b = tag (index table.pl_card 1), community_card
        let order (a,b) = if a > b then a,b else b,a
        let is_pair (a,b) = a = b
        match is_pair a, is_pair b with
        | true, true => comp (fst a) (fst b)
        | true, false => gt()
        | false, true => lt()
        | _ => comp (order a) (order b)

inl toggle (player_turn : int) : int = if player_turn = 0 then 1 else 0
inl raiseBy (id : int) (amount : int) : sam.sa 2 int -> sam.sa 2 int = arraym.mapi (fun i pot => if i = id then pot + amount else pot)

// Returns the max value of both pots in an static array.
inl pot_call (pot : sam.sa 2 int) : sam.sa 2 int = sam.init (const (arraym.fold max 0 pot))

inl game_round (table : table) action = 
    match table.community_card with
    | Some community_card => // round two
        match action with
        | Fold => TerminalFold table
        | Call when table.is_button_s_first_move => Round {table with is_button_s_first_move=false; player_turn#=toggle}
        | Call => TerminalCall {table with pot#=pot_call}
        | Raise when table.raises_left > 0 => Round {table with is_button_s_first_move=false; player_turn#=toggle; raises_left#=(+) -1; pot#=pot_call >> raiseBy table.player_turn 4}
        | Raise => failwith "Invalid action. The number of raises left is not positive."
    | None => // round one
        match action with
        | Fold => TerminalFold table
        | Call when table.is_button_s_first_move => Round {table with is_button_s_first_move=false; player_turn#=toggle}
        | Call => ChanceCommunityCard table 
        | Raise when table.raises_left > 0 => Round {table with is_button_s_first_move=false; player_turn#=toggle; raises_left#=(+) -1; pot#=pot_call >> raiseBy table.player_turn 2}
        | Raise => failwith "Invalid action. The number of raises left is not positive."
inl game_chance_community_card (table : table) card = Round {table with is_button_s_first_move=true; player_turn=0; raises_left=dyn 2; community_card=Some card; pot#=pot_call}
inl game_chance_init (c0,c1) = Round {is_button_s_first_move=true; player_turn=0; raises_left=dyn 2; community_card=None; pot=arraym.fromList [1;1]; pl_card=arraym.fromList [c0;c1]}
inl game_init() = ChanceInit

// Shuffles the array.
inl shuffle forall dim el. (ar : sa_listm.sa_list dim el) : () =
    backend_switch {
        Cuda = fun _ => corecuda.random.shuffle ar
        Python = fun _ => 
            global "import random"
            // Knuth shuffle
            loop.for' {from=0; nearTo=length ar - 1} fun i =>
                inl j = $"random.randrange(!i, !(length ar))"
                inl tmp = index ar i
                set ar i (index ar j)
                set ar j tmp
    }

inl random_action (table : table) =
    open sa_listm
    inl actions : sa_list 3 _ =  arraym.fromList [Call]
    if index table.pot 0 <> index table.pot 1 then push actions Fold
    if table.raises_left > 0 then push actions Raise
    shuffle actions
    pop actions

inl create_deck() =
    open sa_listm
    inl deck : sa_list 6 _ = arraym.fromList [King; King; Queen; Queen; Jack; Jack]
    shuffle deck
    deck

inl pop_deck (deck : sa_listm.sa_list 6 card) : card =
    open sa_listm
    inl x = pop deck
    x

type game_loop_state = 
    {
        messages : messages
        pl_type : player_types
        deck : deck
    }

let rec play_loop_inner (state : game_loop_state) node =
    inl f = play_loop_inner state
    match node with
    | TerminalFold table => 
        inl msg = 
            inl chips_won = index table.pot table.player_turn
            Showdown{cards_shown=table.pl_card; chips_won winner_id=toggle table.player_turn}
        sa_listm.push state.messages msg
        node
    | TerminalCall table => 
        inl msg =
            inl chips_won, winner_id =
                inl chips_won = index table.pot table.player_turn
                match compare_hands table with
                | Gt => chips_won, 0
                | Eq => 0, -1
                | Lt => chips_won, 1 
            Showdown{cards_shown=table.pl_card; chips_won winner_id}
        sa_listm.push state.messages msg
        node
    | Round table => 
        match index state.pl_type table.player_turn with
        | Human => node
        | Computer =>
            inl action = random_action table
            inl msg = PlayerAction(table.player_turn, action)
            sa_listm.push state.messages msg
            f (game_round table action)
    | RoundWithAction(table,action) => 
        inl msg = PlayerAction(table.player_turn, action)
        sa_listm.push state.messages msg
        f (game_round table action)
    | ChanceCommunityCard table => 
        inl card = pop_deck state.deck
        inl msg = CommunityCardIs card
        sa_listm.push state.messages msg
        f (game_chance_community_card table card)
    | ChanceInit () => 
        inl c0,c1 = pop_deck state.deck, pop_deck state.deck
        sa_listm.push state.messages PlayerGotCard(0, c0)
        sa_listm.push state.messages PlayerGotCard(1, c1)
        f (game_chance_init (c0,c1))

let rec play_loop (state : state) deck node : state =
    inl messages = state.ui_state.messages
    match play_loop_inner {pl_type = state.ui_state.pl_type; messages deck} node with
    | Round table as game =>
        {state with
            ui_state #= fun ui_state => 
                {ui_state with
                    ui_game_state = WaitingForActionFromPlayerId(table)
                }
            game_state = Some { game; deck = deck }
            }
    | TerminalCall table | TerminalFold table =>
        {state with
            ui_state #= fun ui_state => 
                {ui_state with
                    ui_game_state = GameOver(table)
                }
            game_state = None
            }
    | game =>
        failwith "Unexpected node received in play_loop."

inl event_loop (msg, state : event * state) : state =
    match msg with
    | StartGame => play_loop init() create_deck() game_init()
    | PlayerChanged pl_type =>
        {state with
            ui_state #= fun ui_state => {ui_state with pl_type}
            }
    | ActionSelected action =>
        match state.game_state with
        | Some {deck game} => 
            match game with
            | Round table => play_loop state (deck) RoundWithAction(table, action)
            | _ => failwith "Unexpected game node in ActionSelected."
        | None => state

open corecuda
open corepython
inl main() =
    named_tuple "Leduc_Game" {
        init = fun () => jsonm.serialize init()
        event_loop_cpu = fun (msg, state) => event_loop (jsonm.deserialize msg, jsonm.deserialize state) |> jsonm.serialize
        event_loop_gpu = fun (msg, state) =>
            open serializer
            inl offsets_msg, offsets_state = calculate_offsets, calculate_offsets
            inl ptr_msg, ptr_state = create conv(offsets_size offsets_msg), create conv(offsets_size offsets_state)
            inl msg, state = jsonm.deserialize msg, jsonm.deserialize state
            serialize offsets_msg ptr_msg msg
            serialize offsets_state ptr_state state

            run fun () =>
                inl from = rangem.threads_in_grid().from
                if from = 0 then
                    event_loop (deserialize offsets_msg ptr_msg, deserialize offsets_state ptr_state)
                    |> serialize offsets_state ptr_state

            jsonm.serialize (deserialize offsets_state ptr_state)
    }