open corebase

nominal grid_group = $"grid_group"
nominal thread_block = $"thread_block"
nominal thread = $"thread_block_tile<1>"
nominal thread_block_tile size parent = $"thread_block_tile<@size, `parent>"

prototype tileable t : t -> ()
instance tileable thread_block = fun _ => ()
instance tileable thread_block_tile size parent = fun _ => ()

inl create_grid() : ref grid_group = $"this_grid()" 
inl create_block() : ref thread_block = $"this_thread_block()"
inl create_tread() : ref thread = $"this_thread()"
inl create_thread_block_tile forall size parent {tileable}. (x : ref parent) : ref (thread_block_tile size parent) = $"tiled_partition<@size>(!x)"

// Projects the given index to a high dimensional value.
inl project_index forall dim. (dim : dim) (i : int) : dim = real
    open real_core
    open tensorm.utils
    inl dim,i = 
        mapFoldBack (fun d i =>
            i % d, i / d
            ) dim i
    assert (i = 0) "The index has to be in the range of the dimension."
    dim

// Project the given index to a scalar value.
inl project_index_reverse forall dim. (dim : dim) (i : dim) : int = real
    open real_core
    open tensorm.utils
    fst (foldBack2 (fun dim i (offset,stride) => offset+i*stride, stride*dim) dim i (0,1))
 
// Projects the given index to a high dimensional value.
inl project_index' forall dim. ({from nearTo} : {from : dim; nearTo : dim}) (i : int) : dim = real
    open real_core
    open tensorm.utils
    inl dim = map2 (-) nearTo from
    map2 (+) (project_index `dim dim i) from

// Project the given index to a scalar value.
inl project_index_reverse' forall dim. ({from nearTo} : {from : dim; nearTo : dim}) (i : dim) : int = real
    open real_core
    open tensorm.utils
    inl dim = map2 (-) nearTo from
    inl i = map2 (-) i from
    project_index_reverse `dim dim i

// Projects the arguments of a range to their scalar equivalents.
inl project_index_reverse_range_by forall dim. 
        ({from nearTo by} : {from : dim; nearTo : dim; by : dim}) 
        : {from : int; nearTo : int; by : int} = real
    open real_core
    open tensorm.utils
    inl dim = map2 (-) nearTo from
    {
        from = 0
        nearTo = prod dim 
        by = project_index_reverse `dim dim by
    }

// Projects the arguments of a range to their scalar equivalents.
inl project_index_reverse_range forall dim. 
        ({from nearTo} : {from : dim; nearTo : dim}) 
        : {from : int; nearTo : int} = real
    open real_core
    open tensorm.utils
    inl dim = map2 (-) nearTo from
    {
        from = 0
        nearTo = prod dim 
    }

inl loop_for_by' forall dim. ({from nearTo by} : {from : dim; nearTo : dim; by : dim}) body = 
    loop.forBy' (project_index_reverse_range_by {from nearTo by}) (project_index' {from nearTo} >> body)

inl loop_for' forall dim. ({from nearTo} : {from : dim; nearTo : dim}) body = 
    loop.for' (project_index_reverse_range {from nearTo}) (project_index' {from nearTo} >> body)

inl loop_linear' forall dim. (dim : dim) body = 
    loop.for' {from=0; nearTo=real tensorm.utils.prod dim} (project_index dim >> body)

inl loop_tile' forall size parent dim. (cg : ref (thread_block_tile size parent)) (dim : dim) (body : dim -> ()) =
    inl by : int = $"!cg.meta_group_size()" 
    inl from : int = $"!cg.meta_group_rank()"
    inl nearTo : int = real tensorm.utils.prod dim
    loop.forBy' {from nearTo by} (project_index dim >> body)

inl loop_warps_in_grid' forall dim. (dim : dim) (body : dim -> ()) =
    inl by : int = $"grid_group::num_threads() / warpSize"
    inl from : int = $"grid_group::thread_rank() / warpSize"
    inl nearTo : int = real tensorm.utils.prod dim
    loop.forBy' {from nearTo by} (project_index dim >> body)

inl loop_blocks_in_grid' forall dim. (dim : dim) (body : dim -> ()) =
    inl by : int = $"grid_group::num_blocks()"
    inl from : int = $"grid_group::block_rank()"
    inl nearTo : int = real tensorm.utils.prod dim
    loop.forBy' {from nearTo by} (project_index dim >> body)

inl loop_thread_in_block' forall dim. (dim : dim) (body : dim -> ()) =
    inl by : int = $"thread_block::num_threads()"
    inl from : int = $"thread_block::thread_rank()"
    inl nearTo : int = real tensorm.utils.prod dim
    loop.forBy' {from nearTo by} (project_index dim >> body)

inl loop_warps_in_block' forall dim. (dim : dim) (body : dim -> ()) =
    inl by : int = $"thread_block::num_threads() / warpSize"
    inl from : int = $"thread_block::thread_rank() / warpSize"
    inl nearTo : int = real tensorm.utils.prod dim
    loop.forBy' {from nearTo by} (project_index dim >> body)

open tensorm
inl async_memcpy_tensor forall float. ({from to} : {from : tensor (int * int) float; to : tensor (int * int) float}) : () =
    assert (from.dim = to.dim) "The tensor dimensions have to be equal in both of the tensors."
    loop_thread_in_block' from.dim (fun a,b =>
        inl from = apply a from
        inl to = apply a to
        inl dim = from.dim
        real
            open tensorm.utils
            map2 (fun (tensor_body {array=from offset=from_offset}) (tensor_body {array=to offset=to_offset}) =>
                typecase `from with _ ~el =>
                $"cooperative_groups::memcpy_async(this_thread(), !to + !to_offset, !from + !from_offset, sizeof(`el) * !dim)" : ()
                ) from.bodies to.bodies
        )
