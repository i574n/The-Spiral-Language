open corebase
open corecuda
open tensorm

nominal gemm_config m_frag n_frag k_frag frag_in = {m_frag : int; n_frag : int; k_frag : int}
inl gemm_config forall m_frag n_frag k_frag frag_in. : gemm_config m_frag n_frag k_frag frag_in = gemm_config {
    m_frag = real real_core.type_lit_to_lit `m_frag
    n_frag = real real_core.type_lit_to_lit `n_frag
    k_frag = real real_core.type_lit_to_lit `k_frag
    }

inl wmma_gemm_shared forall m_frag n_frag k_frag frag_in float{number}. (gemm_config {m_frag n_frag k_frag} : gemm_config m_frag n_frag k_frag frag_in) 
        alpha (a,ta : tensor (int * int) float * bool) (b,tb : tensor (int * int) float * bool) 
        beta (c : tensor (int * int) float) =
    inl _ =
        inl swap (a,b) x = if x then b,a else a,b
        inl a_dim = swap a.dim ta
        inl b_dim = swap b.dim tb
        inl c_dim = c.dim
        assert (snd a_dim = fst b_dim) "The K dimension of the A and B tensors must match."
        assert (fst a_dim = fst c_dim) "The M dimension of the A and C tensors must match."
        assert (snd b_dim = snd c_dim) "The N dimension of the B and C tensors must match."

    inl skew = 8
    inl tile = 64
    inl a = 
        if ta then // col_major
            reshape (fun k,m => {k=k / tile}, {k_tile=tile}, {m=m / tile}, {m_tile=tile}) a
            |> reorder (fun k,{k_tile},m,{m_tile} => m,k,(k_tile,m_tile))
        else // row_major
            reshape (fun m,k => {m=m / tile}, {m_tile=tile}, {k=k / tile}, {k_tile=tile}) a
            |> reorder (fun m,{m_tile},k,{k_tile} => m,k,(m_tile,k_tile))
    inl b =
        if tb then // col_major
            reshape (fun n,k => {n=n / tile}, {n_tile=tile}, {k=k / tile}, {k_tile=tile}) b
            |> reorder (fun n,{n_tile},k,{k_tile} => n,k,(n_tile,k_tile))
        else // row_major
            reshape (fun k,n => {k=k / tile}, {k_tile=tile}, {n=n / tile}, {n_tile=tile}) b
            |> reorder (fun k,{k_tile},n,{n_tile} => n,k,(k_tile,n_tile))
    inl c = // row_major
        reshape (fun m,n => {m=m / tile}, {m_tile=tile}, {n=n / tile}, {n_tile=tile}) c
        |> reorder (fun m,{m_tile},n,{n_tile} => (m,n),(m_tile,n_tile))
    
    // threads per block
    inl blocks = 256
    // blocks per grid (number of SMs in a RTX 4060)
    inl grids = 24
    run grids blocks (fun () =>
        global "#include <mma.h>"
        global "using namespace nvcuda;"
        global "#include <cooperative_groups.h>"
        global "using namespace cooperative_groups;"

        open cooperative_groups
        open tensorm.cuda
        
        loop_blocks_in_grid' (fst a.dim, fst b.dim) (fun m,n =>
            inl a = apply m a
            inl b = apply n b
            inl c = apply (m,n) c

            inl create_shared() : tensor _ float = tensor_create_shared (tile, tile + skew) |> view {from=0,0; nearTo=tile, tile}
            inl c_shared' = create_shared()
            async_memcpy_tensor {from=c; to=c_shared'}
            inl c_shared = // row_major
                reshape (fun m,n => {m=m / m_frag}, {m_frag}, {n=n / n_frag}, {n_frag}) c_shared'
                |> reorder (fun m,{m_frag},n,{n_frag} => (m,n),(m_frag,n_frag))

            loop_linear' (fst a.dim) (fun k =>
                inl a = apply k a
                inl a_shared = create_shared()
                async_memcpy_tensor {from=a; to=a_shared} 
                inl a_shared = 
                    if ta then // col_major
                        reshape (fun k,m => {k=k / k_frag}, {k_frag}, {m=m / m_frag}, {m_frag}) a_shared
                        |> reorder (fun k,{k_frag},m,{m_frag} => m,k,(k_frag,m_frag))
                    else // row_major
                        reshape (fun m,k => {m=m / m_frag}, {m_frag}, {k=k / k_frag}, {k_frag}) a_shared
                        |> reorder (fun m,{m_frag},k,{k_frag} => m,k,(m_frag,k_frag))
                
                inl b = apply k b
                inl b_shared = create_shared()
                async_memcpy_tensor {from=b; to=b_shared} 
                inl b_shared =
                    if tb then // col_major
                        reshape (fun n,k => {n=n / n_frag}, {n_frag}, {k=k / k_frag}, {k_frag}) b_shared
                        |> reorder (fun n,{n_frag},k,{k_frag} => n,k,(n_frag,k_frag))
                    else // row_major
                        reshape (fun k,n => {k=k / k_frag}, {k_frag}, {n=n / n_frag}, {n_frag}) b_shared
                        |> reorder (fun k,{k_frag},n,{n_frag} => n,k,(k_frag,n_frag))

                loop_warps_in_block' (fst a_shared.dim, fst b_shared.dim) (fun m,n =>
                    inl a = apply m a_shared
                    inl b = apply n b_shared
                    inl c = apply (m,n) c_shared

                    open wmma
                    inl acc : fragment' accumulator m_frag n_frag k_frag float = create_fragment' false 
                    fill_fragment' acc 0
                    loop_linear' (fst a.dim) (fun k =>
                        inl a = apply k a
                        inl b = apply k b

                        inl a_frag : fragment' matrix_a m_frag n_frag k_frag frag_in = create_fragment' ta
                        inl b_frag : fragment' matrix_b m_frag n_frag k_frag frag_in = create_fragment' tb

                        load_matrix_sync' a_frag a
                        load_matrix_sync' b_frag b

                        mma_sync' acc a_frag b_frag acc
                        )

                    inl c_frag : fragment' accumulator m_frag n_frag k_frag float = create_fragment' false
                    load_matrix_sync' c_frag c
                    loop.linear' (length c_frag) (fun i =>
                        set c_frag i (alpha * index acc i + beta * index c_frag i)
                        )
                    store_matrix_sync' c c_frag
                    )
                )
            async_memcpy_tensor {from=c_shared'; to=c}
            )
        )


inl main() =
    inl grid_range () : int = $"gridDim.x * blockDim.x"
    inl linear_id () : int = $"threadIdx.x + blockIdx.x * blockDim.x"

    inl get_body forall dim el. (x : tensor dim el) : array el = 
        real tensorm.utils.map (fun (tensor_body {array}) => array) x.bodies : array el

    inl random_normal dim =
        inl len : int = real open real_core in tensorm.utils.foldBack (*) dim 1
        inl t : array f32 = $"cp.random.normal(0,1,!len,cp.float32)" 
        fromArray t |> reshape (const dim)

    inl swap (a,b) x = if x then b,a else a,b
    inl cp_matmul (a : tensor (int * int) float * bool) (b : tensor (int * int) float * bool) (c : tensor (int * int) float) : tensor (int * int) float =
        inl transpose ta (x : array float) : array float = if ta then $"cp.transpose(!x)" else x
        inl f (ta : bool) (a_body : array float) (a_dim : int * int) : array float = 
            inl x : array float = $"!a_body.reshape(!a_dim)"
            transpose ta x
        inl g (a,ta : tensor (int * int) float * bool) = f ta (get_body a) a.dim
        inl a_body,b_body,c_body : array float * array float * array float = g a, g b, f false (get_body c) c.dim
        
        $"(cp.matmul(!a_body,!b_body)+!c_body).flatten()"
        |> fromArray |> reshape (const c.dim)

    inl m,n,k : int * int * int = 256, 256, 128
    inl ta,tb = true,false
    inl [a; b; c] = listm.map random_normal ([swap (m, k) ta; swap (k, n) tb; m, n])
    inl d = cp_matmul (a,ta) (b,tb) c
    simple_wmma_gemm (gemm_config : gemm_config 16 16 8 wmma.tf32) 1 (a, ta) (b, tb) 1 c
    inl d,c = get_body d, get_body c
    $"cp.max(cp.abs(!c-!d))" : f32