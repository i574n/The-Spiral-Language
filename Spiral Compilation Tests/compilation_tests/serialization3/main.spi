open pickle
nominal serialized a = array f32

inl serialize forall t. (pu p : pu t) (x : t) : serialized t =
    inl ar = a32.create p.size
    p.pickle x (0,ar)
    $"printfn \"%A\" !ar"
    serialized ar

inl deserialize forall t. (pu p : pu t) (serialized x : serialized t) : t =
    match p.unpickle (0,x) with
    | Some: x => x
    | _ => failwith "Invalid format."

inl test scheme x = assert (x = deserialize scheme (serialize scheme x)) "Serialization and deserialization should result in the same result."
inl test_int () =
    inl scheme = I32 5
    inl ~x = 4
    test scheme x

inl (**) a b = pair a b
inl test_pairs () =
    inl scheme = I32 5 ** I32 3 ** I32 3
    inl ~x = 4,2,2
    test scheme x
inl test_option () =
    inl scheme = I32 5 ** I32 3 ** I32 3 ** option (I32 1)
    inl ~x = 4,2,2,(Some: 0)
    test scheme x

union action =
    | Raise: i32 // `Raise: 0` would be a raise of 1 in the actual game.
    | Call
    | NoAction
type rank = i32
type suit = i32
type card = rank * suit
type player_view = {
    stack_self : i32
    stack_opp : i32
    pot : i32
    hand : card * card
    prev_action : action
    }

inl Action : pu action = alt {raise_=I32 4; call=Unit; noAction=Unit}
inl Card = I32 13 ** I32 4
inl playerView max_stack : pu player_view = 
    inl a (stack_self,stack_opp,pot,hand,prev_action) = {stack_self stack_opp pot hand prev_action}
    inl b {stack_self stack_opp pot hand prev_action} = (stack_self,stack_opp,pot,hand,prev_action)
    wrap (a,b) (I32 max_stack ** I32 max_stack ** I32 max_stack ** (Card ** Card) ** Action)

inl test_view max_stack = 
    inl scheme = playerView (max_stack+1)
    inl ~x = {stack_self=max_stack/2; stack_opp=max_stack/2; pot=max_stack; hand=(0,1),(12,3); prev_action=NoAction}
    test scheme x

inl main () : () = join test_view 10