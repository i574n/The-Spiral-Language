// Save The Princess HackerRank problem.
union cell = Princess | Empty

let save_the_princess (field : a u64 (a u64 _)) mario_pos : list string =
    inl cells_visited : a u64 (a u64 _) = 
        am.init (length field) (fun b =>
            am.init (length (index field b)) (fun _ => false)
            )
    inl index' ar (b,a) = index (index ar b) a
    inl set' ar (b,a) v = set (index ar b) a v
    inl is_in_range (b,a),_ = 0 <= b && b < length field && (inl x = index field b in 0 <= a && a < length x)
    inl is_princess_in_state x,_ = match index' field x with Princess => true | _ => false

    inl up (row,col), prev_moves = (row-1,col), ("UP" :: prev_moves)
    inl down (row,col), prev_moves = (row+1,col), ("DOWN" :: prev_moves)
    inl left (row,col), prev_moves = (row,col-1), ("LEFT" :: prev_moves)
    inl right (row,col), prev_moves = (row,col+1), ("RIGHT" :: prev_moves)

    inl solution = mut None
    let rec loop (queue : a u64 _) = 
        inl queue = 
            am.map (fun (mario_pos, prev_moves as state) =>
                inl f move = 
                    inl ((pos_row, pos_col),_ as new_state) = move state
                    inl is_valid =
                        if is_in_range new_state && not (index' cells_visited (pos_row, pos_col)) then 
                            if is_princess_in_state new_state then solution <- Some (snd new_state)
                            set' cells_visited (pos_row, pos_col) true
                            true
                        else false
                    new_state, is_valid
                inl (up, down, left, right as potential_new_states) = f up, f down, f left, f right
                inl number_of_valid_states =
                    inl f _,b = if b then 1 else 0
                    f up + f down + f left + f right
                inl new_states : a u64 _ = create number_of_valid_states
                inl f (state, is_valid) (i : u64) = if is_valid then set new_states i state . i+1 else i
                inl _ = f up 0 |> f down |> f left |> f right 
                new_states
                ) queue
            |> am.concat
        match *solution with
        | None => loop queue
        | Some path => listm.rev path

    loop (am.singleton (mario_pos, Nil))

inl main () =
    inl ~field_size = 4
    inl ~princess_pos = 2,3
    // $"print(\"Initing\")"
    $"printf(\"%s\\n\",\"Initing\")"
    inl field : a u64 (a _ _) = 
        am.init field_size fun b => 
            am.init field_size fun a => 
                if (b,a) = princess_pos then Princess else Empty
    
    // $"print(\"Starting\")"
    $"printf(\"%s\\n\",\"Starting\")"
    inl x = save_the_princess field (0,0)
    // $"print(\"Printing\")"
    $"printf(\"%s\\n\",\"Printing\")"
    // |> listm.iter (fun x => $"printfn \"%s\" !x")
    // listm.iter (fun x => $"print(!x)") x
    listm.iter (fun x => $"printf(\"%s\\n\",!x->ptr)") x
    0i32