// Complex interpreter example on both fully static and partially static data. An advanced use of join points.
union rec arith x =
    | V: x
    | Add: arith x * arith x
    | Mult: arith x * arith x
inl main() =
    inl a = Add: v_ 1, v_ 2
    inl b = Add: v_ 3, v_ 4
    inl c = Mult: a, b
    inl rec f x = 
        match x with
        | V: x => x
        | Add: a, b => g a + g b
        | Mult: a, b => g a * g b
    and inl g x = if unboxed_is x then f x else join f x
    $"// static"
    inl ~x = g c : f32
    $"// dynamic"
    g (Mult: dyn c, v_ 2)