// Euler problems - Largest Palindrome & Largest Prime Factor
open loop
inl Largest_palindrome_product : i32 =
    inl reverse_number x =
        let rec loop (x:x':) = if 0 < x then loop (x: x/10 x': x'*10+x%10) else x'
        loop (x:x':0)
    inl is_palindrome x = x = reverse_number x
    for (from: 100 nearTo: 1000) (fun b =>
        for (from: b nearTo: 1000) (fun a s =>
            inl x = b*a
            if is_palindrome x && s < x then x else s
            )
        ) 0

inl Largest_prime_factor =
    inl target = 60085147514i64
    inl sieve_length : i32 = $"!target |> float |> sqrt |> int"
    inl sieve = arraym.init (sieve_length+1) (const true)
    for' (from: 2 nearTo: sieve_length+1) (fun i =>
        if arraym.index sieve i then 
            foru' (from: i+i nearTo: sieve_length+1 up: i) (fun i => arraym.set sieve i false)
        )
    foru (from: 3 nearTo: sieve_length+1 up: 2) (fun i s =>
        if arraym.index sieve i && target % $"int64 !i" = 0 then i else s
        ) -1

inl main () : () = 
    inl x = Largest_prime_factor in $"printfn \"%i\" !x"
    inl x = Largest_palindrome_product in $"printfn \"%i\" !x"
    ()
    