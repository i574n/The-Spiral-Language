open real_core

inl size_prim forall t. =
    typecase t with
    | i32 => 4
    | char => 2
inl rec size x : i32 =
    match x with
    | () => 0
    | a,b => size a + size b
    | {} => record_foldl (fun (state:key:value:) => state + size value) 0 x
    | _ when symbol_is x => 0
    | _ => 
        typecase `x with
        | array ~t => 
            if prim_type_is `t then size_prim `i32 + size_prim `t * a32.length `t x
            else a32.fold `i32 `t (fun s x => s + size x) (size_prim `i32) x
        | string => size_prim `i32 + size_prim `char * s32.length x
        | ~t => 
            if prim_is x then size_prim `t
            // Assume it is an union type.
            else inl ~x = x in (join size_prim `i32 + unbox x (fun (k,v) => size v)) : i32

inl rec pickle x (i',s as state) : () =
    match x with
    | () => ()
    | a,b => pickle a state . pickle b state
    | {} => record_iter (fun (key:value:) => pickle value state) x
    | _ =>
        typecase `x with
        | array ~t => 
            pickle (a32.length `t x) state
            a32.iter `t (fun x => pickle x state) x
        | string => pickle ($"!x.ToCharArray()" : array char) state
        | ~t => 
            if prim_is x then
                inl i = *i'
                inl length = size_prim `t
                inl s = span.create' `u8 s (i:length:)
                assert ($"System.BitConverter.TryWriteBytes(!s,!x)" : bool) "Conversion failed."
                i' <- i+length
            elif symbol_is x then ()
            else inl ~x = x in (join unbox x (fun (k,v) => pickle (union_tag x) state . pickle v state)) : ()

inl rec unpickle forall t. (i', s as state) : t =
    inl prim read =
        inl i = *i'
        i' <- i + size_prim `t
        read i
    typecase t with
    | () => ()
    | ~a * ~b => unpickle `a state, unpickle `b state
    | {} => record_type_map (fun k => forall v. => unpickle `v state) `t
    | i32 => prim (fun i => $"System.BitConverter.ToInt32(!s,!i)" : t)
    | char => prim (fun i => $"System.BitConverter.ToChar(!s,!i)" : t)
    | array ~y => a32.init `y (unpickle `i32 state) (fun i => unpickle `y state)
    | string => inl ar = unpickle `(array char) state in $"System.String(!ar)" : string
    | _ =>
        if symbol_type_is `t then type_to_symbol `t
        else 
            (join
                inl tag = unpickle `i32 state
                union_untag `t tag 
                    (fun k => forall v. => nominal_create `t (k,unpickle `v state)) 
                    (fun _ => failwith `t "Invalid tag.")
                ) : t
