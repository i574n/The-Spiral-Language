import numpy
cimport numpy
import time
cimport libc.math
cdef class Mut0:
    cdef public unsigned long long v0
    cdef public object v1
    cdef public unsigned long long v2
    def __init__(self, unsigned long long v0, v1, unsigned long long v2): self.v0 = v0; self.v1 = v1; self.v2 = v2
ctypedef signed long US0
cdef class Heap0:
    cdef readonly object v0
    cdef readonly object v1
    cdef readonly object v2
    cdef readonly object v3
    def __init__(self, v0, v1, v2, v3): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3
ctypedef signed long US1
cdef class Mut1:
    cdef public signed long v0
    def __init__(self, signed long v0): self.v0 = v0
cdef class US2:
    cdef readonly signed long tag
cdef class US2_0(US2): # action_
    cdef readonly US0 v0
    def __init__(self, US0 v0): self.tag = 0; self.v0 = v0
cdef class US2_1(US2): # observation_
    cdef readonly US1 v0
    def __init__(self, US1 v0): self.tag = 1; self.v0 = v0
cdef class UH0:
    cdef readonly signed long tag
cdef class UH0_0(UH0): # cons_
    cdef readonly US2 v0
    cdef readonly UH0 v1
    def __init__(self, US2 v0, UH0 v1): self.tag = 0; self.v0 = v0; self.v1 = v1
cdef class UH0_1(UH0): # nil
    def __init__(self): self.tag = 1
cdef class US3:
    cdef readonly signed long tag
cdef class US3_0(US3): # none
    def __init__(self): self.tag = 0
cdef class US3_1(US3): # some_
    cdef readonly US1 v0
    def __init__(self, US1 v0): self.tag = 1; self.v0 = v0
cdef class Tuple0:
    cdef readonly double v0
    cdef readonly double v1
    cdef readonly US0 v2
    def __init__(self, double v0, double v1, US0 v2): self.v0 = v0; self.v1 = v1; self.v2 = v2
cdef class UH1:
    cdef readonly signed long tag
cdef class UH1_0(UH1): # action_
    cdef readonly double v0
    cdef readonly double v1
    cdef readonly UH0 v2
    cdef readonly double v3
    cdef readonly double v4
    cdef readonly UH0 v5
    cdef readonly double v6
    cdef readonly double v7
    cdef readonly US1 v8
    cdef readonly unsigned char v9
    cdef readonly signed long v10
    cdef readonly US1 v11
    cdef readonly unsigned char v12
    cdef readonly signed long v13
    cdef readonly US3 v14
    cdef readonly unsigned char v15
    cdef readonly object v16
    cdef readonly object v17
    def __init__(self, double v0, double v1, UH0 v2, double v3, double v4, UH0 v5, double v6, double v7, US1 v8, unsigned char v9, signed long v10, US1 v11, unsigned char v12, signed long v13, US3 v14, unsigned char v15, v16, v17): self.tag = 0; self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15; self.v16 = v16; self.v17 = v17
cdef class UH1_1(UH1): # terminal_
    cdef readonly double v0
    cdef readonly double v1
    cdef readonly UH0 v2
    cdef readonly double v3
    cdef readonly double v4
    cdef readonly UH0 v5
    cdef readonly double v6
    cdef readonly double v7
    cdef readonly US1 v8
    cdef readonly unsigned char v9
    cdef readonly signed long v10
    cdef readonly US1 v11
    cdef readonly unsigned char v12
    cdef readonly signed long v13
    cdef readonly US3 v14
    cdef readonly double v15
    def __init__(self, double v0, double v1, UH0 v2, double v3, double v4, UH0 v5, double v6, double v7, US1 v8, unsigned char v9, signed long v10, US1 v11, unsigned char v12, signed long v13, US3 v14, double v15): self.tag = 1; self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15
cdef class Closure3():
    cdef unsigned char v0
    cdef Heap0 v1
    cdef signed long v2
    cdef US1 v3
    cdef US1 v4
    cdef unsigned char v5
    cdef signed long v6
    cdef US1 v7
    cdef signed long v8
    cdef UH0 v9
    cdef double v10
    cdef double v11
    cdef UH0 v12
    cdef double v13
    cdef double v14
    cdef double v15
    def __init__(self, unsigned char v0, Heap0 v1, signed long v2, US1 v3, US1 v4, unsigned char v5, signed long v6, US1 v7, signed long v8, UH0 v9, double v10, double v11, UH0 v12, double v13, double v14, double v15): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15
    def __call__(self, Tuple0 args):
        cdef unsigned char v0 = self.v0
        cdef Heap0 v1 = self.v1
        cdef signed long v2 = self.v2
        cdef US1 v3 = self.v3
        cdef US1 v4 = self.v4
        cdef unsigned char v5 = self.v5
        cdef signed long v6 = self.v6
        cdef US1 v7 = self.v7
        cdef signed long v8 = self.v8
        cdef UH0 v9 = self.v9
        cdef double v10 = self.v10
        cdef double v11 = self.v11
        cdef UH0 v12 = self.v12
        cdef double v13 = self.v13
        cdef double v14 = self.v14
        cdef double v15 = self.v15
        cdef double v16 = args.v0
        cdef double v17 = args.v1
        cdef US0 v18 = args.v2
        cdef bint v19
        cdef double v20
        cdef double v21
        cdef US2 v22
        cdef UH0 v23
        cdef US2 v24
        cdef UH0 v25
        cdef double v27
        cdef double v28
        cdef US2 v29
        cdef UH0 v30
        cdef US2 v31
        cdef UH0 v32
        v19 = v0 == (<unsigned char>0)
        if v19:
            v20 = v17 + v14
            v21 = v16 + v13
            v22 = US2_0(v18)
            v23 = UH0_0(v22, v12)
            del v22
            v24 = US2_0(v18)
            v25 = UH0_0(v24, v9)
            del v24
            return method10(v1, v2, v3, v4, v5, v6, v7, v0, v8, v18, v15, v23, v21, v20, v25, v10, v11)
        else:
            v27 = v17 + v11
            v28 = v16 + v10
            v29 = US2_0(v18)
            v30 = UH0_0(v29, v12)
            del v29
            v31 = US2_0(v18)
            v32 = UH0_0(v31, v9)
            del v31
            return method10(v1, v2, v3, v4, v5, v6, v7, v0, v8, v18, v15, v30, v13, v14, v32, v28, v27)
cdef class Closure2():
    cdef unsigned char v0
    cdef Heap0 v1
    cdef US1 v2
    cdef unsigned char v3
    cdef signed long v4
    cdef US1 v5
    cdef signed long v6
    cdef US1 v7
    cdef UH0 v8
    cdef double v9
    cdef double v10
    cdef UH0 v11
    cdef double v12
    cdef double v13
    cdef double v14
    def __init__(self, unsigned char v0, Heap0 v1, US1 v2, unsigned char v3, signed long v4, US1 v5, signed long v6, US1 v7, UH0 v8, double v9, double v10, UH0 v11, double v12, double v13, double v14): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14
    def __call__(self, Tuple0 args):
        cdef unsigned char v0 = self.v0
        cdef Heap0 v1 = self.v1
        cdef US1 v2 = self.v2
        cdef unsigned char v3 = self.v3
        cdef signed long v4 = self.v4
        cdef US1 v5 = self.v5
        cdef signed long v6 = self.v6
        cdef US1 v7 = self.v7
        cdef UH0 v8 = self.v8
        cdef double v9 = self.v9
        cdef double v10 = self.v10
        cdef UH0 v11 = self.v11
        cdef double v12 = self.v12
        cdef double v13 = self.v13
        cdef double v14 = self.v14
        cdef double v15 = args.v0
        cdef double v16 = args.v1
        cdef US0 v17 = args.v2
        cdef bint v18
        cdef double v19
        cdef double v20
        cdef US2 v21
        cdef US2 v22
        cdef UH0 v23
        cdef UH0 v24
        cdef US2 v25
        cdef US2 v26
        cdef UH0 v27
        cdef UH0 v28
        cdef double v30
        cdef double v31
        cdef US2 v32
        cdef US2 v33
        cdef UH0 v34
        cdef UH0 v35
        cdef US2 v36
        cdef US2 v37
        cdef UH0 v38
        cdef UH0 v39
        v18 = v0 == (<unsigned char>0)
        if v18:
            v19 = v16 + v13
            v20 = v15 + v12
            v21 = US2_0(v17)
            v22 = US2_1(v7)
            v23 = UH0_0(v22, v11)
            del v22
            v24 = UH0_0(v21, v23)
            del v21; del v23
            v25 = US2_0(v17)
            v26 = US2_1(v7)
            v27 = UH0_0(v26, v8)
            del v26
            v28 = UH0_0(v25, v27)
            del v25; del v27
            return method8(v1, v2, v3, v4, v5, v0, v6, v7, v17, v14, v24, v20, v19, v28, v9, v10)
        else:
            v30 = v16 + v10
            v31 = v15 + v9
            v32 = US2_0(v17)
            v33 = US2_1(v7)
            v34 = UH0_0(v33, v11)
            del v33
            v35 = UH0_0(v32, v34)
            del v32; del v34
            v36 = US2_0(v17)
            v37 = US2_1(v7)
            v38 = UH0_0(v37, v8)
            del v37
            v39 = UH0_0(v36, v38)
            del v36; del v38
            return method8(v1, v2, v3, v4, v5, v0, v6, v7, v17, v14, v35, v12, v13, v39, v31, v30)
cdef class Closure4():
    cdef unsigned char v0
    cdef Heap0 v1
    cdef object v2
    cdef signed long v3
    cdef US1 v4
    cdef unsigned char v5
    cdef signed long v6
    cdef US1 v7
    cdef signed long v8
    cdef UH0 v9
    cdef double v10
    cdef double v11
    cdef UH0 v12
    cdef double v13
    cdef double v14
    cdef double v15
    def __init__(self, unsigned char v0, Heap0 v1, numpy.ndarray[signed long,ndim=1] v2, signed long v3, US1 v4, unsigned char v5, signed long v6, US1 v7, signed long v8, UH0 v9, double v10, double v11, UH0 v12, double v13, double v14, double v15): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15
    def __call__(self, Tuple0 args):
        cdef unsigned char v0 = self.v0
        cdef Heap0 v1 = self.v1
        cdef numpy.ndarray[signed long,ndim=1] v2 = self.v2
        cdef signed long v3 = self.v3
        cdef US1 v4 = self.v4
        cdef unsigned char v5 = self.v5
        cdef signed long v6 = self.v6
        cdef US1 v7 = self.v7
        cdef signed long v8 = self.v8
        cdef UH0 v9 = self.v9
        cdef double v10 = self.v10
        cdef double v11 = self.v11
        cdef UH0 v12 = self.v12
        cdef double v13 = self.v13
        cdef double v14 = self.v14
        cdef double v15 = self.v15
        cdef double v16 = args.v0
        cdef double v17 = args.v1
        cdef US0 v18 = args.v2
        cdef bint v19
        cdef double v20
        cdef double v21
        cdef US2 v22
        cdef UH0 v23
        cdef US2 v24
        cdef UH0 v25
        cdef double v27
        cdef double v28
        cdef US2 v29
        cdef UH0 v30
        cdef US2 v31
        cdef UH0 v32
        v19 = v0 == (<unsigned char>0)
        if v19:
            v20 = v17 + v14
            v21 = v16 + v13
            v22 = US2_0(v18)
            v23 = UH0_0(v22, v12)
            del v22
            v24 = US2_0(v18)
            v25 = UH0_0(v24, v9)
            del v24
            return method12(v1, v2, v3, v4, v5, v6, v7, v0, v8, v18, v15, v23, v21, v20, v25, v10, v11)
        else:
            v27 = v17 + v11
            v28 = v16 + v10
            v29 = US2_0(v18)
            v30 = UH0_0(v29, v12)
            del v29
            v31 = US2_0(v18)
            v32 = UH0_0(v31, v9)
            del v31
            return method12(v1, v2, v3, v4, v5, v6, v7, v0, v8, v18, v15, v30, v13, v14, v32, v28, v27)
cdef class Closure1():
    cdef unsigned char v0
    cdef Heap0 v1
    cdef object v2
    cdef signed long v3
    cdef US1 v4
    cdef unsigned char v5
    cdef signed long v6
    cdef US1 v7
    cdef UH0 v8
    cdef double v9
    cdef double v10
    cdef UH0 v11
    cdef double v12
    cdef double v13
    cdef double v14
    def __init__(self, unsigned char v0, Heap0 v1, numpy.ndarray[signed long,ndim=1] v2, signed long v3, US1 v4, unsigned char v5, signed long v6, US1 v7, UH0 v8, double v9, double v10, UH0 v11, double v12, double v13, double v14): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14
    def __call__(self, Tuple0 args):
        cdef unsigned char v0 = self.v0
        cdef Heap0 v1 = self.v1
        cdef numpy.ndarray[signed long,ndim=1] v2 = self.v2
        cdef signed long v3 = self.v3
        cdef US1 v4 = self.v4
        cdef unsigned char v5 = self.v5
        cdef signed long v6 = self.v6
        cdef US1 v7 = self.v7
        cdef UH0 v8 = self.v8
        cdef double v9 = self.v9
        cdef double v10 = self.v10
        cdef UH0 v11 = self.v11
        cdef double v12 = self.v12
        cdef double v13 = self.v13
        cdef double v14 = self.v14
        cdef double v15 = args.v0
        cdef double v16 = args.v1
        cdef US0 v17 = args.v2
        cdef bint v18
        cdef double v19
        cdef double v20
        cdef US2 v21
        cdef UH0 v22
        cdef US2 v23
        cdef UH0 v24
        cdef double v26
        cdef double v27
        cdef US2 v28
        cdef UH0 v29
        cdef US2 v30
        cdef UH0 v31
        v18 = v0 == (<unsigned char>0)
        if v18:
            v19 = v16 + v13
            v20 = v15 + v12
            v21 = US2_0(v17)
            v22 = UH0_0(v21, v11)
            del v21
            v23 = US2_0(v17)
            v24 = UH0_0(v23, v8)
            del v23
            return method7(v1, v2, v3, v4, v5, v6, v7, v0, v17, v14, v22, v20, v19, v24, v9, v10)
        else:
            v26 = v16 + v10
            v27 = v15 + v9
            v28 = US2_0(v17)
            v29 = UH0_0(v28, v11)
            del v28
            v30 = US2_0(v17)
            v31 = UH0_0(v30, v8)
            del v30
            return method7(v1, v2, v3, v4, v5, v6, v7, v0, v17, v14, v29, v12, v13, v31, v27, v26)
cdef class Closure0():
    cdef US1 v0
    cdef US1 v1
    cdef Heap0 v2
    cdef object v3
    cdef UH0 v4
    cdef double v5
    cdef double v6
    cdef UH0 v7
    cdef double v8
    cdef double v9
    cdef double v10
    def __init__(self, US1 v0, US1 v1, Heap0 v2, numpy.ndarray[signed long,ndim=1] v3, UH0 v4, double v5, double v6, UH0 v7, double v8, double v9, double v10): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10
    def __call__(self, Tuple0 args):
        cdef US1 v0 = self.v0
        cdef US1 v1 = self.v1
        cdef Heap0 v2 = self.v2
        cdef numpy.ndarray[signed long,ndim=1] v3 = self.v3
        cdef UH0 v4 = self.v4
        cdef double v5 = self.v5
        cdef double v6 = self.v6
        cdef UH0 v7 = self.v7
        cdef double v8 = self.v8
        cdef double v9 = self.v9
        cdef double v10 = self.v10
        cdef double v11 = args.v0
        cdef double v12 = args.v1
        cdef US0 v13 = args.v2
        cdef double v14
        cdef double v15
        cdef US2 v16
        cdef US2 v17
        cdef UH0 v18
        cdef UH0 v19
        cdef US2 v20
        cdef US2 v21
        cdef UH0 v22
        cdef UH0 v23
        v14 = v12 + v9
        v15 = v11 + v8
        v16 = US2_0(v13)
        v17 = US2_1(v0)
        v18 = UH0_0(v17, v7)
        del v17
        v19 = UH0_0(v16, v18)
        del v16; del v18
        v20 = US2_0(v13)
        v21 = US2_1(v1)
        v22 = UH0_0(v21, v4)
        del v21
        v23 = UH0_0(v20, v22)
        del v20; del v22
        return method5(v0, v1, v2, v3, v13, v10, v19, v15, v14, v23, v5, v6)
cdef class Tuple1:
    cdef readonly object v0
    cdef readonly object v1
    cdef readonly object v2
    cdef readonly object v3
    def __init__(self, v0, v1, v2, v3): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3
cdef class Tuple2:
    cdef readonly unsigned long long v0
    cdef readonly UH0 v1
    cdef readonly object v2
    cdef readonly object v3
    cdef readonly object v4
    cdef readonly object v5
    def __init__(self, unsigned long long v0, UH0 v1, v2, v3, v4, v5): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5
cdef class Tuple3:
    cdef readonly double v0
    cdef readonly double v1
    def __init__(self, double v0, double v1): self.v0 = v0; self.v1 = v1
cdef class Mut2:
    cdef public signed long v0
    cdef public double v1
    def __init__(self, signed long v0, double v1): self.v0 = v0; self.v1 = v1
cdef void method1(unsigned long long v0, numpy.ndarray[object,ndim=1] v1, unsigned long long v2) except *:
    cdef bint v3
    cdef unsigned long long v4
    cdef list v5
    v3 = v2 < v0
    if v3:
        v4 = v2 + (<unsigned long long>1)
        v5 = [None]*(<unsigned long long>0)
        v1[v2] = v5
        del v5
        method1(v0, v1, v4)
    else:
        pass
cdef Mut0 method0(unsigned long long v0, unsigned long long v1):
    cdef numpy.ndarray[object,ndim=1] v3
    cdef unsigned long long v4
    cdef Mut0 v5
    v3 = numpy.empty(v1,dtype=object)
    v4 = (<unsigned long long>0)
    method1(v1, v3, v4)
    v5 = Mut0(v0, v3, (<unsigned long long>0))
    del v3
    return v5
cdef bint method2(Mut1 v0) except *:
    cdef signed long v1
    v1 = v0.v0
    return v1 < (<signed long>20)
cdef bint method3(Mut1 v0) except *:
    cdef signed long v1
    v1 = v0.v0
    return v1 < (<signed long>200000)
cdef void method4(unsigned long long v0, unsigned long long v1, numpy.ndarray[signed long,ndim=1] v2, numpy.ndarray[signed long,ndim=1] v3, unsigned long long v4) except *:
    cdef bint v5
    cdef unsigned long long v6
    cdef bint v7
    cdef unsigned long long v8
    cdef US1 v9
    v5 = v4 < v0
    if v5:
        v6 = v4 + (<unsigned long long>1)
        v7 = v1 <= v4
        if v7:
            v8 = v6
        else:
            v8 = v4
        v9 = v2[v8]
        v3[v4] = v9
        method4(v0, v1, v2, v3, v6)
    else:
        pass
cdef numpy.ndarray[signed long,ndim=1] method6(Heap0 v0, US1 v1, unsigned char v2, signed long v3, US1 v4, unsigned char v5, signed long v6):
    cdef bint v7
    cdef bint v9
    v7 = (<signed long>0) < v6
    if v7:
        return v0.v2
    else:
        v9 = (<signed long>0) == v6
        if v9:
            return v0.v0
        else:
            raise Exception("invalid action state")
cdef numpy.ndarray[signed long,ndim=1] method9(Heap0 v0, US1 v1, unsigned char v2, signed long v3, US1 v4, unsigned char v5, signed long v6, signed long v7):
    cdef bint v8
    cdef bint v10
    cdef bint v13
    cdef bint v15
    v8 = (<signed long>0) < v7
    if v8:
        v10 = v6 == v3
    else:
        v10 = 0
    if v10:
        return v0.v2
    else:
        if v8:
            return v0.v1
        else:
            v13 = (<signed long>0) == v7
            if v13:
                v15 = v6 == v3
            else:
                v15 = 0
            if v15:
                return v0.v0
            else:
                if v13:
                    return v0.v3
                else:
                    raise Exception("invalid action state")
cdef signed long method11(US1 v0) except *:
    if v0 == 0: # jack
        return (<signed long>0)
    elif v0 == 1: # king
        return (<signed long>2)
    elif v0 == 2: # queen
        return (<signed long>1)
cdef UH1 method10(Heap0 v0, signed long v1, US1 v2, US1 v3, unsigned char v4, signed long v5, US1 v6, unsigned char v7, signed long v8, US0 v9, double v10, UH0 v11, double v12, double v13, UH0 v14, double v15, double v16):
    cdef signed long v17
    cdef signed long v18
    cdef signed long v19
    cdef bint v20
    cdef bint v22
    cdef signed long v46
    cdef bint v23
    cdef bint v24
    cdef bint v27
    cdef bint v28
    cdef signed long v29
    cdef signed long v30
    cdef bint v31
    cdef signed long v32
    cdef signed long v33
    cdef bint v34
    cdef signed long v37
    cdef bint v35
    cdef bint v38
    cdef bint v39
    cdef bint v40
    cdef bint v47
    cdef unsigned char v51
    cdef signed long v52
    cdef bint v48
    cdef bint v53
    cdef signed long v55
    cdef bint v56
    cdef signed long v58
    cdef signed long v59
    cdef bint v60
    cdef signed long v62
    cdef signed long v63
    cdef US1 v64
    cdef unsigned char v65
    cdef signed long v66
    cdef US1 v67
    cdef unsigned char v68
    cdef signed long v69
    cdef double v70
    cdef US3 v71
    cdef bint v73
    cdef signed long v75
    cdef bint v76
    cdef signed long v78
    cdef signed long v79
    cdef signed long v81
    cdef signed long v82
    cdef US1 v83
    cdef unsigned char v84
    cdef signed long v85
    cdef US1 v86
    cdef unsigned char v87
    cdef signed long v88
    cdef double v89
    cdef US3 v90
    cdef signed long v92
    cdef signed long v93
    cdef numpy.ndarray[signed long,ndim=1] v94
    cdef US3 v95
    cdef object v96
    if v9 == 0: # call
        v17 = method11(v2)
        v18 = method11(v6)
        v19 = method11(v3)
        v20 = v18 == v17
        if v20:
            v22 = v19 == v17
        else:
            v22 = 0
        if v22:
            v23 = v18 < v19
            if v23:
                v46 = (<signed long>-1)
            else:
                v24 = v18 > v19
                if v24:
                    v46 = (<signed long>1)
                else:
                    v46 = (<signed long>0)
        else:
            if v20:
                v46 = (<signed long>1)
            else:
                v27 = v19 == v17
                if v27:
                    v46 = (<signed long>-1)
                else:
                    v28 = v18 > v17
                    if v28:
                        v29, v30 = v18, v17
                    else:
                        v29, v30 = v17, v18
                    v31 = v19 > v17
                    if v31:
                        v32, v33 = v19, v17
                    else:
                        v32, v33 = v17, v19
                    v34 = v29 < v32
                    if v34:
                        v37 = (<signed long>-1)
                    else:
                        v35 = v29 > v32
                        if v35:
                            v37 = (<signed long>1)
                        else:
                            v37 = (<signed long>0)
                    v38 = v37 == (<signed long>0)
                    if v38:
                        v39 = v30 < v33
                        if v39:
                            v46 = (<signed long>-1)
                        else:
                            v40 = v30 > v33
                            if v40:
                                v46 = (<signed long>1)
                            else:
                                v46 = (<signed long>0)
                    else:
                        v46 = v37
        v47 = v46 == (<signed long>1)
        if v47:
            v51, v52 = v7, v5
        else:
            v48 = v46 == (<signed long>-1)
            if v48:
                v51, v52 = v4, v5
            else:
                v51, v52 = v7, (<signed long>0)
        v53 = v51 == (<unsigned char>0)
        if v53:
            v55 = v52
        else:
            v55 = -v52
        v56 = v7 == (<unsigned char>0)
        if v56:
            v58 = v55
        else:
            v58 = -v55
        v59 = v58 + v5
        v60 = v4 == (<unsigned char>0)
        if v60:
            v62 = v55
        else:
            v62 = -v55
        v63 = v62 + v5
        if v56:
            v64, v65, v66, v67, v68, v69 = v6, v7, v59, v3, v4, v63
        else:
            v64, v65, v66, v67, v68, v69 = v3, v4, v63, v6, v7, v59
        v70 = <double>v55
        v71 = US3_1(v2)
        return UH1_1(v10, v10, v11, v12, v13, v14, v15, v16, v64, v65, v66, v67, v68, v69, v71, v70)
    elif v9 == 1: # fold
        v73 = v4 == (<unsigned char>0)
        if v73:
            v75 = v8
        else:
            v75 = -v8
        v76 = v7 == (<unsigned char>0)
        if v76:
            v78 = v75
        else:
            v78 = -v75
        v79 = v78 + v8
        if v73:
            v81 = v75
        else:
            v81 = -v75
        v82 = v81 + v5
        if v76:
            v83, v84, v85, v86, v87, v88 = v6, v7, v79, v3, v4, v82
        else:
            v83, v84, v85, v86, v87, v88 = v3, v4, v82, v6, v7, v79
        v89 = <double>v75
        v90 = US3_1(v2)
        return UH1_1(v10, v10, v11, v12, v13, v14, v15, v16, v83, v84, v85, v86, v87, v88, v90, v89)
    elif v9 == 2: # raise
        v92 = v1 - (<signed long>1)
        v93 = v5 + (<signed long>4)
        v94 = method9(v0, v6, v7, v93, v3, v4, v5, v92)
        v95 = US3_1(v2)
        v96 = Closure3(v4, v0, v92, v2, v6, v7, v93, v3, v5, v14, v15, v16, v11, v12, v13, v10)
        return UH1_0(v10, v10, v11, v12, v13, v14, v15, v16, v3, v4, v5, v6, v7, v93, v95, v4, v94, v96)
cdef UH1 method8(Heap0 v0, US1 v1, unsigned char v2, signed long v3, US1 v4, unsigned char v5, signed long v6, US1 v7, US0 v8, double v9, UH0 v10, double v11, double v12, UH0 v13, double v14, double v15):
    cdef signed long v16
    cdef numpy.ndarray[signed long,ndim=1] v17
    cdef US3 v18
    cdef object v19
    cdef object v21
    cdef signed long v23
    cdef signed long v24
    cdef numpy.ndarray[signed long,ndim=1] v25
    cdef US3 v26
    cdef object v27
    if v8 == 0: # call
        v16 = (<signed long>2)
        v17 = method9(v0, v4, v5, v6, v1, v2, v3, v16)
        v18 = US3_1(v7)
        v19 = Closure3(v2, v0, v16, v7, v4, v5, v6, v1, v3, v13, v14, v15, v10, v11, v12, v9)
        return UH1_0(v9, v9, v10, v11, v12, v13, v14, v15, v1, v2, v3, v4, v5, v6, v18, v2, v17, v19)
    elif v8 == 1: # fold
        raise Exception("impossible")
    elif v8 == 2: # raise
        v23 = (<signed long>1)
        v24 = v3 + (<signed long>4)
        v25 = method9(v0, v4, v5, v24, v1, v2, v3, v23)
        v26 = US3_1(v7)
        v27 = Closure3(v2, v0, v23, v7, v4, v5, v24, v1, v3, v13, v14, v15, v10, v11, v12, v9)
        return UH1_0(v9, v9, v10, v11, v12, v13, v14, v15, v1, v2, v3, v4, v5, v24, v26, v2, v25, v27)
cdef UH1 method12(Heap0 v0, numpy.ndarray[signed long,ndim=1] v1, signed long v2, US1 v3, unsigned char v4, signed long v5, US1 v6, unsigned char v7, signed long v8, US0 v9, double v10, UH0 v11, double v12, double v13, UH0 v14, double v15, double v16):
    cdef bint v17
    cdef US1 v18
    cdef unsigned char v19
    cdef signed long v20
    cdef US1 v21
    cdef unsigned char v22
    cdef signed long v23
    cdef unsigned long long v24
    cdef unsigned long long v25
    cdef US1 v26
    cdef double v27
    cdef double v28
    cdef double v29
    cdef double v30
    cdef numpy.ndarray[signed long,ndim=1] v31
    cdef US2 v32
    cdef UH0 v33
    cdef US2 v34
    cdef UH0 v35
    cdef US3 v36
    cdef object v37
    cdef bint v39
    cdef signed long v41
    cdef bint v42
    cdef signed long v44
    cdef signed long v45
    cdef signed long v47
    cdef signed long v48
    cdef US1 v49
    cdef unsigned char v50
    cdef signed long v51
    cdef US1 v52
    cdef unsigned char v53
    cdef signed long v54
    cdef double v55
    cdef US3 v56
    cdef signed long v58
    cdef signed long v59
    cdef numpy.ndarray[signed long,ndim=1] v60
    cdef US3 v61
    cdef object v62
    if v9 == 0: # call
        v17 = v7 == (<unsigned char>0)
        if v17:
            v18, v19, v20, v21, v22, v23 = v6, v7, v5, v3, v4, v5
        else:
            v18, v19, v20, v21, v22, v23 = v3, v4, v5, v6, v7, v5
        v24 = len(v1)
        v25 = numpy.random.randint(0,v24)
        v26 = v1[v25]
        v27 = <double>v24
        v28 = (<double>1.000000) / v27
        v29 = libc.math.log(v28)
        v30 = v29 + v10
        v31 = v0.v2
        v32 = US2_1(v26)
        v33 = UH0_0(v32, v11)
        del v32
        v34 = US2_1(v26)
        v35 = UH0_0(v34, v14)
        del v34
        v36 = US3_1(v26)
        v37 = Closure2(v19, v0, v21, v22, v23, v18, v20, v26, v14, v15, v16, v11, v12, v13, v30)
        return UH1_0(v30, v30, v33, v12, v13, v35, v15, v16, v18, v19, v20, v21, v22, v23, v36, v19, v31, v37)
    elif v9 == 1: # fold
        v39 = v4 == (<unsigned char>0)
        if v39:
            v41 = v8
        else:
            v41 = -v8
        v42 = v7 == (<unsigned char>0)
        if v42:
            v44 = v41
        else:
            v44 = -v41
        v45 = v44 + v8
        if v39:
            v47 = v41
        else:
            v47 = -v41
        v48 = v47 + v5
        if v42:
            v49, v50, v51, v52, v53, v54 = v6, v7, v45, v3, v4, v48
        else:
            v49, v50, v51, v52, v53, v54 = v3, v4, v48, v6, v7, v45
        v55 = <double>v41
        v56 = US3_0()
        return UH1_1(v10, v10, v11, v12, v13, v14, v15, v16, v49, v50, v51, v52, v53, v54, v56, v55)
    elif v9 == 2: # raise
        v58 = v2 - (<signed long>1)
        v59 = v5 + (<signed long>2)
        v60 = method9(v0, v6, v7, v59, v3, v4, v5, v58)
        v61 = US3_0()
        v62 = Closure4(v4, v0, v1, v58, v6, v7, v59, v3, v5, v14, v15, v16, v11, v12, v13, v10)
        return UH1_0(v10, v10, v11, v12, v13, v14, v15, v16, v3, v4, v5, v6, v7, v59, v61, v4, v60, v62)
cdef UH1 method7(Heap0 v0, numpy.ndarray[signed long,ndim=1] v1, signed long v2, US1 v3, unsigned char v4, signed long v5, US1 v6, unsigned char v7, US0 v8, double v9, UH0 v10, double v11, double v12, UH0 v13, double v14, double v15):
    cdef bint v16
    cdef US1 v17
    cdef unsigned char v18
    cdef signed long v19
    cdef US1 v20
    cdef unsigned char v21
    cdef signed long v22
    cdef unsigned long long v23
    cdef unsigned long long v24
    cdef US1 v25
    cdef double v26
    cdef double v27
    cdef double v28
    cdef double v29
    cdef numpy.ndarray[signed long,ndim=1] v30
    cdef US2 v31
    cdef UH0 v32
    cdef US2 v33
    cdef UH0 v34
    cdef US3 v35
    cdef object v36
    cdef bint v38
    cdef signed long v40
    cdef bint v41
    cdef signed long v43
    cdef signed long v44
    cdef signed long v46
    cdef signed long v47
    cdef US1 v48
    cdef unsigned char v49
    cdef signed long v50
    cdef US1 v51
    cdef unsigned char v52
    cdef signed long v53
    cdef double v54
    cdef US3 v55
    cdef signed long v57
    cdef signed long v58
    cdef numpy.ndarray[signed long,ndim=1] v59
    cdef US3 v60
    cdef object v61
    if v8 == 0: # call
        v16 = v7 == (<unsigned char>0)
        if v16:
            v17, v18, v19, v20, v21, v22 = v6, v7, v5, v3, v4, v5
        else:
            v17, v18, v19, v20, v21, v22 = v3, v4, v5, v6, v7, v5
        v23 = len(v1)
        v24 = numpy.random.randint(0,v23)
        v25 = v1[v24]
        v26 = <double>v23
        v27 = (<double>1.000000) / v26
        v28 = libc.math.log(v27)
        v29 = v28 + v9
        v30 = v0.v2
        v31 = US2_1(v25)
        v32 = UH0_0(v31, v10)
        del v31
        v33 = US2_1(v25)
        v34 = UH0_0(v33, v13)
        del v33
        v35 = US3_1(v25)
        v36 = Closure2(v18, v0, v20, v21, v22, v17, v19, v25, v13, v14, v15, v10, v11, v12, v29)
        return UH1_0(v29, v29, v32, v11, v12, v34, v14, v15, v17, v18, v19, v20, v21, v22, v35, v18, v30, v36)
    elif v8 == 1: # fold
        v38 = v4 == (<unsigned char>0)
        if v38:
            v40 = v5
        else:
            v40 = -v5
        v41 = v7 == (<unsigned char>0)
        if v41:
            v43 = v40
        else:
            v43 = -v40
        v44 = v43 + v5
        if v38:
            v46 = v40
        else:
            v46 = -v40
        v47 = v46 + v5
        if v41:
            v48, v49, v50, v51, v52, v53 = v6, v7, v44, v3, v4, v47
        else:
            v48, v49, v50, v51, v52, v53 = v3, v4, v47, v6, v7, v44
        v54 = <double>v40
        v55 = US3_0()
        return UH1_1(v9, v9, v10, v11, v12, v13, v14, v15, v48, v49, v50, v51, v52, v53, v55, v54)
    elif v8 == 2: # raise
        v57 = v2 - (<signed long>1)
        v58 = v5 + (<signed long>2)
        v59 = method9(v0, v6, v7, v58, v3, v4, v5, v57)
        v60 = US3_0()
        v61 = Closure4(v4, v0, v1, v57, v6, v7, v58, v3, v5, v13, v14, v15, v10, v11, v12, v9)
        return UH1_0(v9, v9, v10, v11, v12, v13, v14, v15, v3, v4, v5, v6, v7, v58, v60, v4, v59, v61)
cdef UH1 method5(US1 v0, US1 v1, Heap0 v2, numpy.ndarray[signed long,ndim=1] v3, US0 v4, double v5, UH0 v6, double v7, double v8, UH0 v9, double v10, double v11):
    cdef signed long v12
    cdef unsigned char v13
    cdef signed long v14
    cdef unsigned char v15
    cdef numpy.ndarray[signed long,ndim=1] v16
    cdef US3 v17
    cdef object v18
    cdef object v20
    cdef signed long v22
    cdef unsigned char v23
    cdef signed long v24
    cdef unsigned char v25
    cdef signed long v26
    cdef numpy.ndarray[signed long,ndim=1] v27
    cdef US3 v28
    cdef object v29
    if v4 == 0: # call
        v12 = (<signed long>2)
        v13 = (<unsigned char>1)
        v14 = (<signed long>1)
        v15 = (<unsigned char>0)
        v16 = method6(v2, v0, v15, v14, v1, v13, v12)
        v17 = US3_0()
        v18 = Closure1(v13, v2, v3, v12, v0, v15, v14, v1, v9, v10, v11, v6, v7, v8, v5)
        return UH1_0(v5, v5, v6, v7, v8, v9, v10, v11, v1, v13, v14, v0, v15, v14, v17, v13, v16, v18)
    elif v4 == 1: # fold
        raise Exception("impossible")
    elif v4 == 2: # raise
        v22 = (<signed long>1)
        v23 = (<unsigned char>1)
        v24 = (<signed long>1)
        v25 = (<unsigned char>0)
        v26 = (<signed long>3)
        v27 = method9(v2, v0, v25, v26, v1, v23, v24, v22)
        v28 = US3_0()
        v29 = Closure4(v23, v2, v3, v22, v0, v25, v26, v1, v24, v9, v10, v11, v6, v7, v8, v5)
        return UH1_0(v5, v5, v6, v7, v8, v9, v10, v11, v1, v23, v24, v0, v25, v26, v28, v23, v27, v29)
cdef unsigned long long method15(UH0 v0) except *:
    cdef US2 v1
    cdef UH0 v2
    cdef unsigned long long v35
    cdef US0 v3
    cdef unsigned long long v13
    cdef unsigned long long v4
    cdef unsigned long long v5
    cdef unsigned long long v7
    cdef unsigned long long v8
    cdef unsigned long long v10
    cdef unsigned long long v11
    cdef unsigned long long v14
    cdef unsigned long long v15
    cdef unsigned long long v16
    cdef unsigned long long v17
    cdef US1 v19
    cdef unsigned long long v29
    cdef unsigned long long v20
    cdef unsigned long long v21
    cdef unsigned long long v23
    cdef unsigned long long v24
    cdef unsigned long long v26
    cdef unsigned long long v27
    cdef unsigned long long v30
    cdef unsigned long long v31
    cdef unsigned long long v32
    cdef unsigned long long v33
    cdef unsigned long long v36
    cdef unsigned long long v37
    cdef unsigned long long v38
    cdef unsigned long long v39
    cdef unsigned long long v40
    cdef unsigned long long v41
    cdef unsigned long long v42
    cdef unsigned long long v44
    cdef unsigned long long v45
    if v0.tag == 0: # cons_
        v1 = (<UH0_0>v0).v0; v2 = (<UH0_0>v0).v1
        if v1.tag == 0: # action_
            v3 = (<US2_0>v1).v0
            if v3 == 0: # call
                v4 = (<signed long>0)
                v5 = (<unsigned long long>1) + v4
                v13 = (<unsigned long long>9223372036854765835) * v5
            elif v3 == 1: # fold
                v7 = (<signed long>1)
                v8 = (<unsigned long long>1) + v7
                v13 = (<unsigned long long>9223372036854765835) * v8
            elif v3 == 2: # raise
                v10 = (<signed long>2)
                v11 = (<unsigned long long>1) + v10
                v13 = (<unsigned long long>9223372036854765835) * v11
            v14 = (<unsigned long long>9223372036854775807) + v13
            v15 = v14 * (<unsigned long long>9973)
            v16 = (<signed long>0)
            v17 = (<unsigned long long>1) + v16
            v35 = v15 * v17
        elif v1.tag == 1: # observation_
            v19 = (<US2_1>v1).v0
            if v19 == 0: # jack
                v20 = (<signed long>0)
                v21 = (<unsigned long long>1) + v20
                v29 = (<unsigned long long>9223372036854765835) * v21
            elif v19 == 1: # king
                v23 = (<signed long>1)
                v24 = (<unsigned long long>1) + v23
                v29 = (<unsigned long long>9223372036854765835) * v24
            elif v19 == 2: # queen
                v26 = (<signed long>2)
                v27 = (<unsigned long long>1) + v26
                v29 = (<unsigned long long>9223372036854765835) * v27
            v30 = (<unsigned long long>9223372036854775807) + v29
            v31 = v30 * (<unsigned long long>9973)
            v32 = (<signed long>1)
            v33 = (<unsigned long long>1) + v32
            v35 = v31 * v33
        del v1
        v36 = v35 * (<unsigned long long>9973)
        v37 = method15(v2)
        del v2
        v38 = v36 + v37
        v39 = (<unsigned long long>9223372036854775807) + v38
        v40 = v39 * (<unsigned long long>9973)
        v41 = (<signed long>0)
        v42 = (<unsigned long long>1) + v41
        return v40 * v42
    elif v0.tag == 1: # nil
        v44 = (<signed long>1)
        v45 = (<unsigned long long>1) + v44
        return (<unsigned long long>9223372036854765835) * v45
cdef bint method17(UH0 v0, UH0 v1) except *:
    cdef US2 v2
    cdef UH0 v3
    cdef US2 v4
    cdef UH0 v5
    cdef bint v12
    cdef US0 v6
    cdef US0 v7
    cdef US1 v9
    cdef US1 v10
    if v1.tag == 0 and v0.tag == 0: # cons_
        v2 = (<UH0_0>v1).v0; v3 = (<UH0_0>v1).v1; v4 = (<UH0_0>v0).v0; v5 = (<UH0_0>v0).v1
        if v2.tag == 0 and v4.tag == 0: # action_
            v6 = (<US2_0>v2).v0; v7 = (<US2_0>v4).v0
            if v6 == 0 and v7 == 0: # call
                v12 = 1
            elif v6 == 1 and v7 == 1: # fold
                v12 = 1
            elif v6 == 2 and v7 == 2: # raise
                v12 = 1
            else:
                v12 = 0
        elif v2.tag == 1 and v4.tag == 1: # observation_
            v9 = (<US2_1>v2).v0; v10 = (<US2_1>v4).v0
            if v9 == 0 and v10 == 0: # jack
                v12 = 1
            elif v9 == 1 and v10 == 1: # king
                v12 = 1
            elif v9 == 2 and v10 == 2: # queen
                v12 = 1
            else:
                v12 = 0
        else:
            v12 = 0
        del v2; del v4
        if v12:
            return method17(v5, v3)
        else:
            del v3; del v5
            return 0
    elif v1.tag == 1 and v0.tag == 1: # nil
        return 1
    else:
        return 0
cdef void method18(unsigned long long v0, numpy.ndarray[double,ndim=1] v1, unsigned long long v2) except *:
    cdef bint v3
    cdef unsigned long long v4
    v3 = v2 < v0
    if v3:
        v4 = v2 + (<unsigned long long>1)
        v1[v2] = (<double>0.000000)
        method18(v0, v1, v4)
    else:
        pass
cdef void method19(unsigned long long v0, numpy.ndarray[object,ndim=1] v1, unsigned long long v2) except *:
    cdef bint v3
    cdef unsigned long long v4
    v3 = v2 < v0
    if v3:
        v4 = v2 + (<unsigned long long>1)
        v1[v2] = Tuple3((<double>0.000000), (<double>0.000000))
        method19(v0, v1, v4)
    else:
        pass
cdef void method21(unsigned long long v0, numpy.ndarray[object,ndim=1] v1, unsigned long long v2) except *:
    cdef bint v3
    cdef unsigned long long v4
    cdef list v5
    v3 = v2 < v0
    if v3:
        v4 = v2 + (<unsigned long long>1)
        v5 = [None]*(<unsigned long long>0)
        v1[v2] = v5
        del v5
        method21(v0, v1, v4)
    else:
        pass
cdef void method23(unsigned long long v0, unsigned long long v1, numpy.ndarray[object,ndim=1] v2, list v3, unsigned long long v4) except *:
    cdef bint v5
    cdef unsigned long long v6
    cdef unsigned long long v7
    cdef UH0 v8
    cdef numpy.ndarray[signed long,ndim=1] v9
    cdef numpy.ndarray[double,ndim=1] v10
    cdef numpy.ndarray[object,ndim=1] v11
    cdef numpy.ndarray[double,ndim=1] v12
    cdef Tuple2 tmp1
    cdef unsigned long long v13
    cdef list v14
    v5 = v4 < v0
    if v5:
        v6 = v4 + (<unsigned long long>1)
        tmp1 = v3[v4]
        v7, v8, v9, v10, v11, v12 = tmp1.v0, tmp1.v1, tmp1.v2, tmp1.v3, tmp1.v4, tmp1.v5
        del tmp1
        v13 = v7 % v1
        v14 = v2[v13]
        v14.append(Tuple2(v7, v8, v9, v10, v11, v12))
        del v8; del v9; del v10; del v11; del v12; del v14
        method23(v0, v1, v2, v3, v6)
    else:
        pass
cdef void method22(unsigned long long v0, numpy.ndarray[object,ndim=1] v1, unsigned long long v2, numpy.ndarray[object,ndim=1] v3, unsigned long long v4) except *:
    cdef bint v5
    cdef unsigned long long v6
    cdef list v7
    cdef unsigned long long v8
    cdef unsigned long long v9
    v5 = v4 < v0
    if v5:
        v6 = v4 + (<unsigned long long>1)
        v7 = v1[v4]
        v8 = len(v7)
        v9 = (<unsigned long long>0)
        method23(v8, v2, v3, v7, v9)
        del v7
        method22(v0, v1, v2, v3, v6)
    else:
        pass
cdef void method20(Mut0 v0) except *:
    cdef numpy.ndarray[object,ndim=1] v1
    cdef unsigned long long v2
    cdef unsigned long long v3
    cdef unsigned long long v4
    cdef unsigned long long v5
    cdef bint v6
    cdef numpy.ndarray[object,ndim=1] v7
    cdef unsigned long long v8
    cdef unsigned long long v9
    cdef unsigned long long v10
    cdef unsigned long long v11
    v1 = v0.v1
    v2 = len(v1)
    v3 = v2 * (<unsigned long long>3)
    v4 = v3 // (<unsigned long long>2)
    v5 = v4 + (<unsigned long long>3)
    v6 = v5 <= v2
    if v6:
        raise Exception("The table length cannot be increased.")
    else:
        pass
    v7 = numpy.empty(v5,dtype=object)
    v8 = (<unsigned long long>0)
    method21(v5, v7, v8)
    v9 = (<unsigned long long>0)
    method22(v2, v1, v5, v7, v9)
    del v1
    v0.v1 = v7
    del v7
    v10 = v0.v0
    v11 = v10 + (<unsigned long long>2)
    v0.v0 = v11
cdef Tuple1 method16(Mut0 v0, UH0 v1, numpy.ndarray[signed long,ndim=1] v2, unsigned long long v3, list v4, unsigned long long v5):
    cdef unsigned long long v6
    cdef bint v7
    cdef unsigned long long v8
    cdef UH0 v9
    cdef numpy.ndarray[signed long,ndim=1] v10
    cdef numpy.ndarray[double,ndim=1] v11
    cdef numpy.ndarray[object,ndim=1] v12
    cdef numpy.ndarray[double,ndim=1] v13
    cdef Tuple2 tmp0
    cdef bint v14
    cdef bint v16
    cdef unsigned long long v17
    cdef unsigned long long v26
    cdef numpy.ndarray[double,ndim=1] v27
    cdef unsigned long long v28
    cdef numpy.ndarray[double,ndim=1] v29
    cdef unsigned long long v30
    cdef numpy.ndarray[object,ndim=1] v31
    cdef unsigned long long v32
    cdef unsigned long long v33
    cdef unsigned long long v34
    cdef unsigned long long v35
    cdef unsigned long long v36
    cdef numpy.ndarray[object,ndim=1] v37
    cdef unsigned long long v38
    cdef unsigned long long v39
    cdef bint v40
    v6 = len(v4)
    v7 = v5 < v6
    if v7:
        tmp0 = v4[v5]
        v8, v9, v10, v11, v12, v13 = tmp0.v0, tmp0.v1, tmp0.v2, tmp0.v3, tmp0.v4, tmp0.v5
        del tmp0
        v14 = v3 == v8
        if v14:
            v16 = method17(v9, v1)
        else:
            v16 = 0
        del v9
        if v16:
            return Tuple1(v10, v11, v12, v13)
        else:
            del v10; del v11; del v12; del v13
            v17 = v5 + (<unsigned long long>1)
            return method16(v0, v1, v2, v3, v4, v17)
    else:
        v26 = len(v2)
        v27 = numpy.empty(v26,dtype=numpy.float64)
        v28 = (<unsigned long long>0)
        method18(v26, v27, v28)
        v29 = numpy.empty(v26,dtype=numpy.float64)
        v30 = (<unsigned long long>0)
        method18(v26, v29, v30)
        v31 = numpy.empty(v26,dtype=object)
        v32 = (<unsigned long long>0)
        method19(v26, v31, v32)
        v4.append(Tuple2(v3, v1, v2, v29, v31, v27))
        v33 = v0.v2
        v34 = v33 + (<unsigned long long>1)
        v0.v2 = v34
        v35 = v0.v2
        v36 = v0.v0
        v37 = v0.v1
        v38 = len(v37)
        del v37
        v39 = v36 * v38
        v40 = v35 >= v39
        if v40:
            method20(v0)
        else:
            pass
        return Tuple1(v2, v29, v31, v27)
cdef Tuple1 method14(Mut0 v0, numpy.ndarray[signed long,ndim=1] v1, UH0 v2):
    cdef unsigned long long v4
    cdef numpy.ndarray[object,ndim=1] v5
    cdef unsigned long long v6
    cdef unsigned long long v7
    cdef list v8
    cdef unsigned long long v9
    v4 = method15(v2)
    v5 = v0.v1
    v6 = len(v5)
    v7 = v4 % v6
    v8 = v5[v7]
    del v5
    v9 = (<unsigned long long>0)
    return method16(v0, v2, v1, v4, v8, v9)
cdef double method25(unsigned long long v0, numpy.ndarray[double,ndim=1] v1, numpy.ndarray[double,ndim=1] v2, unsigned long long v3, double v4) except *:
    cdef bint v5
    cdef unsigned long long v6
    cdef double v7
    cdef bint v8
    cdef double v9
    cdef double v10
    v5 = v3 < v0
    if v5:
        v6 = v3 + (<unsigned long long>1)
        v7 = v1[v3]
        v8 = (<double>0.000000) >= v7
        if v8:
            v9 = (<double>0.000000)
        else:
            v9 = v7
        v10 = v9 + v4
        v2[v3] = v9
        return method25(v0, v1, v2, v6, v10)
    else:
        return v4
cdef void method26(unsigned long long v0, double v1, numpy.ndarray[double,ndim=1] v2, unsigned long long v3) except *:
    cdef bint v4
    cdef unsigned long long v5
    cdef double v6
    v4 = v3 < v0
    if v4:
        v5 = v3 + (<unsigned long long>1)
        v6 = v2[v3]
        v2[v3] = v1
        method26(v0, v1, v2, v5)
    else:
        pass
cdef void method27(unsigned long long v0, double v1, numpy.ndarray[double,ndim=1] v2, unsigned long long v3) except *:
    cdef bint v4
    cdef unsigned long long v5
    cdef double v6
    cdef double v7
    v4 = v3 < v0
    if v4:
        v5 = v3 + (<unsigned long long>1)
        v6 = v2[v3]
        v7 = v6 / v1
        v2[v3] = v7
        method27(v0, v1, v2, v5)
    else:
        pass
cdef numpy.ndarray[double,ndim=1] method24(numpy.ndarray[double,ndim=1] v0):
    cdef unsigned long long v1
    cdef numpy.ndarray[double,ndim=1] v2
    cdef unsigned long long v3
    cdef double v4
    cdef double v5
    cdef bint v6
    cdef unsigned long long v7
    cdef double v8
    cdef double v9
    cdef unsigned long long v10
    cdef unsigned long long v11
    cdef unsigned long long v12
    v1 = len(v0)
    v2 = numpy.empty(v1,dtype=numpy.float64)
    v3 = (<unsigned long long>0)
    v4 = (<double>0.000000)
    v5 = method25(v1, v0, v2, v3, v4)
    v6 = v5 == (<double>0.000000)
    if v6:
        v7 = len(v2)
        v8 = <double>v7
        v9 = (<double>1.000000) / v8
        v10 = (<unsigned long long>0)
        method26(v7, v9, v2, v10)
    else:
        v11 = len(v2)
        v12 = (<unsigned long long>0)
        method27(v11, v5, v2, v12)
    return v2
cdef void method28(unsigned long long v0, unsigned long long v1, numpy.ndarray[double,ndim=1] v2, numpy.ndarray[double,ndim=1] v3, unsigned long long v4) except *:
    cdef bint v5
    cdef unsigned long long v6
    cdef double v7
    cdef double v8
    cdef double v9
    cdef double v10
    cdef double v11
    cdef double v12
    v5 = v4 < v0
    if v5:
        v6 = v4 + (<unsigned long long>1)
        v7 = v2[v4]
        v8 = <double>v1
        v9 = (<double>1.000000) / v8
        v10 = (<double>0.250000) * v9
        v11 = (<double>0.750000) * v7
        v12 = v10 + v11
        v3[v4] = v12
        method28(v0, v1, v2, v3, v6)
    else:
        pass
cdef double method29(unsigned long long v0, numpy.ndarray[double,ndim=1] v1, unsigned long long v2, double v3, double v4, numpy.ndarray[object,ndim=1] v5, numpy.ndarray[double,ndim=1] v6, unsigned long long v7, double v8) except *:
    cdef bint v9
    cdef unsigned long long v10
    cdef double v11
    cdef double v12
    cdef Tuple3 tmp3
    cdef bint v13
    cdef double v15
    cdef double v14
    cdef bint v16
    cdef double v20
    cdef double v17
    cdef double v18
    cdef double v19
    cdef double v21
    cdef double v22
    cdef double v23
    v9 = v7 < v0
    if v9:
        v10 = v7 + (<unsigned long long>1)
        tmp3 = v5[v7]
        v11, v12 = tmp3.v0, tmp3.v1
        del tmp3
        v13 = v12 == (<double>0.000000)
        if v13:
            v15 = (<double>0.000000)
        else:
            v14 = v11 / v12
            v15 = v14
        v16 = v7 == v2
        if v16:
            v17 = v4 - v15
            v18 = v17 / v3
            v19 = v18 + v15
            v20 = v19
        else:
            v20 = v15
        v21 = v1[v7]
        v22 = v20 * v21
        v23 = v8 + v22
        v6[v7] = v20
        return method29(v0, v1, v2, v3, v4, v5, v6, v10, v23)
    else:
        return v8
cdef void method30(unsigned long long v0, unsigned char v1, double v2, numpy.ndarray[double,ndim=1] v3, double v4, numpy.ndarray[double,ndim=1] v5, unsigned long long v6) except *:
    cdef bint v7
    cdef unsigned long long v8
    cdef double v9
    cdef double v10
    cdef double v11
    cdef bint v12
    cdef double v14
    cdef double v15
    cdef double v16
    cdef bint v17
    cdef double v18
    v7 = v6 < v0
    if v7:
        v8 = v6 + (<unsigned long long>1)
        v9 = v5[v6]
        v10 = v3[v6]
        v11 = v10 - v2
        v12 = v1 == (<unsigned char>0)
        if v12:
            v14 = v11
        else:
            v14 = -v11
        v15 = v4 * v14
        v16 = v9 + v15
        v17 = (<double>0.000000) >= v16
        if v17:
            v18 = (<double>0.000000)
        else:
            v18 = v16
        v5[v6] = v18
        method30(v0, v1, v2, v3, v4, v5, v8)
    else:
        pass
cdef void method31(unsigned long long v0, numpy.ndarray[double,ndim=1] v1, double v2, numpy.ndarray[double,ndim=1] v3, unsigned long long v4) except *:
    cdef bint v5
    cdef unsigned long long v6
    cdef double v7
    cdef double v8
    cdef double v9
    cdef double v10
    v5 = v4 < v0
    if v5:
        v6 = v4 + (<unsigned long long>1)
        v7 = v3[v4]
        v8 = v1[v4]
        v9 = v2 * v8
        v10 = v7 + v9
        v3[v4] = v10
        method31(v0, v1, v2, v3, v6)
    else:
        pass
cdef double method32(unsigned long long v0, numpy.ndarray[double,ndim=1] v1, unsigned long long v2, double v3, double v4, numpy.ndarray[object,ndim=1] v5, unsigned long long v6, double v7) except *:
    cdef bint v8
    cdef unsigned long long v9
    cdef double v10
    cdef double v11
    cdef Tuple3 tmp6
    cdef bint v12
    cdef double v14
    cdef double v13
    cdef bint v15
    cdef double v19
    cdef double v16
    cdef double v17
    cdef double v18
    cdef double v20
    cdef double v21
    cdef double v22
    v8 = v6 < v0
    if v8:
        v9 = v6 + (<unsigned long long>1)
        tmp6 = v5[v6]
        v10, v11 = tmp6.v0, tmp6.v1
        del tmp6
        v12 = v11 == (<double>0.000000)
        if v12:
            v14 = (<double>0.000000)
        else:
            v13 = v10 / v11
            v14 = v13
        v15 = v6 == v2
        if v15:
            v16 = v4 - v14
            v17 = v16 / v3
            v18 = v17 + v14
            v19 = v18
        else:
            v19 = v14
        v20 = v1[v6]
        v21 = v19 * v20
        v22 = v7 + v21
        return method32(v0, v1, v2, v3, v4, v5, v9, v22)
    else:
        return v7
cdef double method13(Mut0 v0, UH1 v1) except *:
    cdef double v2
    cdef double v3
    cdef UH0 v4
    cdef double v5
    cdef double v6
    cdef UH0 v7
    cdef double v8
    cdef double v9
    cdef US1 v10
    cdef unsigned char v11
    cdef signed long v12
    cdef US1 v13
    cdef unsigned char v14
    cdef signed long v15
    cdef unsigned char v17
    cdef numpy.ndarray[signed long,ndim=1] v18
    cdef object v19
    cdef bint v20
    cdef unsigned long long v21
    cdef numpy.ndarray[signed long,ndim=1] v22
    cdef numpy.ndarray[double,ndim=1] v23
    cdef numpy.ndarray[object,ndim=1] v24
    cdef numpy.ndarray[double,ndim=1] v25
    cdef Tuple1 tmp2
    cdef numpy.ndarray[double,ndim=1] v26
    cdef unsigned long long v27
    cdef numpy.ndarray[double,ndim=1] v28
    cdef unsigned long long v29
    cdef unsigned long long v30
    cdef double v31
    cdef double v32
    cdef US0 v33
    cdef double v34
    cdef double v35
    cdef UH1 v36
    cdef double v37
    cdef numpy.ndarray[double,ndim=1] v38
    cdef unsigned long long v39
    cdef double v40
    cdef double v41
    cdef double v42
    cdef double v43
    cdef double v44
    cdef double v45
    cdef double v46
    cdef double v47
    cdef double v48
    cdef double v49
    cdef Tuple3 tmp4
    cdef double v50
    cdef double v51
    cdef double v52
    cdef double v53
    cdef double v54
    cdef double v55
    cdef double v56
    cdef unsigned long long v57
    cdef unsigned long long v58
    cdef numpy.ndarray[double,ndim=1] v59
    cdef double v60
    cdef double v61
    cdef double v62
    cdef double v63
    cdef unsigned long long v64
    cdef unsigned long long v65
    cdef unsigned long long v66
    cdef numpy.ndarray[signed long,ndim=1] v67
    cdef numpy.ndarray[double,ndim=1] v68
    cdef numpy.ndarray[object,ndim=1] v69
    cdef numpy.ndarray[double,ndim=1] v70
    cdef Tuple1 tmp5
    cdef numpy.ndarray[double,ndim=1] v71
    cdef unsigned long long v72
    cdef double v73
    cdef double v74
    cdef US0 v75
    cdef double v76
    cdef double v77
    cdef UH1 v78
    cdef double v79
    cdef unsigned long long v80
    cdef double v81
    cdef double v84
    cdef double v85
    cdef double v87
    cdef double v88
    cdef double v90
    cdef double v91
    cdef US1 v92
    cdef unsigned char v93
    cdef signed long v94
    cdef US1 v95
    cdef unsigned char v96
    cdef signed long v97
    cdef double v99
    if v1.tag == 0: # action_
        v2 = (<UH1_0>v1).v0; v3 = (<UH1_0>v1).v1; v4 = (<UH1_0>v1).v2; v5 = (<UH1_0>v1).v3; v6 = (<UH1_0>v1).v4; v7 = (<UH1_0>v1).v5; v8 = (<UH1_0>v1).v6; v9 = (<UH1_0>v1).v7; v10 = (<UH1_0>v1).v8; v11 = (<UH1_0>v1).v9; v12 = (<UH1_0>v1).v10; v13 = (<UH1_0>v1).v11; v14 = (<UH1_0>v1).v12; v15 = (<UH1_0>v1).v13; v17 = (<UH1_0>v1).v15; v18 = (<UH1_0>v1).v16; v19 = (<UH1_0>v1).v17
        v20 = v17 == (<unsigned char>0)
        if v20:
            del v7
            v21 = len(v18)
            tmp2 = method14(v0, v18, v4)
            v22, v23, v24, v25 = tmp2.v0, tmp2.v1, tmp2.v2, tmp2.v3
            del tmp2
            del v4; del v22
            v26 = method24(v25)
            v27 = len(v26)
            v28 = numpy.empty(v27,dtype=numpy.float64)
            v29 = (<unsigned long long>0)
            method28(v27, v21, v26, v28, v29)
            v30 = numpy.random.choice(v21,p=v28)
            v31 = v28[v30]
            del v28
            v32 = v26[v30]
            v33 = v18[v30]
            del v18
            v34 = libc.math.log(v31)
            v35 = libc.math.log(v32)
            v36 = v19(Tuple0(v35, v34, v33))
            del v19
            v37 = method13(v0, v36)
            del v36
            v38 = numpy.empty(v21,dtype=numpy.float64)
            v39 = (<unsigned long long>0)
            v40 = (<double>0.000000)
            v41 = method29(v21, v26, v30, v31, v37, v24, v38, v39, v40)
            del v26
            v42 = v3 + v9
            v43 = v2 + v8
            v44 = -v6
            v45 = v43 - v42
            v46 = v44 + v45
            v47 = libc.math.exp(v46)
            tmp4 = v24[v30]
            v48, v49 = tmp4.v0, tmp4.v1
            del tmp4
            v50 = v48 * (<double>0.968750)
            v51 = v49 * (<double>0.968750)
            v52 = v37 * v47
            v53 = v52 * (<double>0.031250)
            v54 = v47 * (<double>0.031250)
            v55 = v50 + v53
            v56 = v51 + v54
            v24[v30] = Tuple3(v55, v56)
            del v24
            v57 = len(v25)
            v58 = (<unsigned long long>0)
            method30(v57, v17, v41, v38, v47, v25, v58)
            del v38
            v59 = method24(v25)
            del v25
            v60 = v5 - v6
            v61 = v60 - v3
            v62 = v61 - v3
            v63 = libc.math.exp(v62)
            v64 = len(v23)
            v65 = (<unsigned long long>0)
            method31(v64, v59, v63, v23, v65)
            del v23; del v59
            return v41
        else:
            del v4
            v66 = len(v18)
            tmp5 = method14(v0, v18, v7)
            v67, v68, v69, v70 = tmp5.v0, tmp5.v1, tmp5.v2, tmp5.v3
            del tmp5
            del v7; del v67; del v68
            v71 = method24(v70)
            del v70
            v72 = numpy.random.choice(v66,p=v71)
            v73 = v71[v72]
            v74 = v71[v72]
            v75 = v18[v72]
            del v18
            v76 = libc.math.log(v73)
            v77 = libc.math.log(v74)
            v78 = v19(Tuple0(v77, v76, v75))
            del v19
            v79 = method13(v0, v78)
            del v78
            v80 = (<unsigned long long>0)
            v81 = (<double>0.000000)
            return method32(v66, v71, v72, v73, v79, v69, v80, v81)
    elif v1.tag == 1: # terminal_
        v84 = (<UH1_1>v1).v0; v85 = (<UH1_1>v1).v1; v87 = (<UH1_1>v1).v3; v88 = (<UH1_1>v1).v4; v90 = (<UH1_1>v1).v6; v91 = (<UH1_1>v1).v7; v92 = (<UH1_1>v1).v8; v93 = (<UH1_1>v1).v9; v94 = (<UH1_1>v1).v10; v95 = (<UH1_1>v1).v11; v96 = (<UH1_1>v1).v12; v97 = (<UH1_1>v1).v13; v99 = (<UH1_1>v1).v15
        return v99
cdef double method33(Mut0 v0, UH1 v1) except *:
    cdef double v2
    cdef double v3
    cdef UH0 v4
    cdef double v5
    cdef double v6
    cdef UH0 v7
    cdef double v8
    cdef double v9
    cdef US1 v10
    cdef unsigned char v11
    cdef signed long v12
    cdef US1 v13
    cdef unsigned char v14
    cdef signed long v15
    cdef unsigned char v17
    cdef numpy.ndarray[signed long,ndim=1] v18
    cdef object v19
    cdef bint v20
    cdef unsigned long long v21
    cdef numpy.ndarray[signed long,ndim=1] v22
    cdef numpy.ndarray[double,ndim=1] v23
    cdef numpy.ndarray[object,ndim=1] v24
    cdef numpy.ndarray[double,ndim=1] v25
    cdef Tuple1 tmp7
    cdef numpy.ndarray[double,ndim=1] v26
    cdef unsigned long long v27
    cdef double v28
    cdef double v29
    cdef US0 v30
    cdef double v31
    cdef double v32
    cdef UH1 v33
    cdef double v34
    cdef unsigned long long v35
    cdef double v36
    cdef unsigned long long v38
    cdef numpy.ndarray[signed long,ndim=1] v39
    cdef numpy.ndarray[double,ndim=1] v40
    cdef numpy.ndarray[object,ndim=1] v41
    cdef numpy.ndarray[double,ndim=1] v42
    cdef Tuple1 tmp8
    cdef numpy.ndarray[double,ndim=1] v43
    cdef unsigned long long v44
    cdef numpy.ndarray[double,ndim=1] v45
    cdef unsigned long long v46
    cdef unsigned long long v47
    cdef double v48
    cdef double v49
    cdef US0 v50
    cdef double v51
    cdef double v52
    cdef UH1 v53
    cdef double v54
    cdef numpy.ndarray[double,ndim=1] v55
    cdef unsigned long long v56
    cdef double v57
    cdef double v58
    cdef double v59
    cdef double v60
    cdef double v61
    cdef double v62
    cdef double v63
    cdef double v64
    cdef double v65
    cdef double v66
    cdef Tuple3 tmp9
    cdef double v67
    cdef double v68
    cdef double v69
    cdef double v70
    cdef double v71
    cdef double v72
    cdef double v73
    cdef unsigned long long v74
    cdef unsigned long long v75
    cdef numpy.ndarray[double,ndim=1] v76
    cdef double v77
    cdef double v78
    cdef double v79
    cdef double v80
    cdef unsigned long long v81
    cdef unsigned long long v82
    cdef double v84
    cdef double v85
    cdef double v87
    cdef double v88
    cdef double v90
    cdef double v91
    cdef US1 v92
    cdef unsigned char v93
    cdef signed long v94
    cdef US1 v95
    cdef unsigned char v96
    cdef signed long v97
    cdef double v99
    if v1.tag == 0: # action_
        v2 = (<UH1_0>v1).v0; v3 = (<UH1_0>v1).v1; v4 = (<UH1_0>v1).v2; v5 = (<UH1_0>v1).v3; v6 = (<UH1_0>v1).v4; v7 = (<UH1_0>v1).v5; v8 = (<UH1_0>v1).v6; v9 = (<UH1_0>v1).v7; v10 = (<UH1_0>v1).v8; v11 = (<UH1_0>v1).v9; v12 = (<UH1_0>v1).v10; v13 = (<UH1_0>v1).v11; v14 = (<UH1_0>v1).v12; v15 = (<UH1_0>v1).v13; v17 = (<UH1_0>v1).v15; v18 = (<UH1_0>v1).v16; v19 = (<UH1_0>v1).v17
        v20 = v17 == (<unsigned char>0)
        if v20:
            del v7
            v21 = len(v18)
            tmp7 = method14(v0, v18, v4)
            v22, v23, v24, v25 = tmp7.v0, tmp7.v1, tmp7.v2, tmp7.v3
            del tmp7
            del v4; del v22; del v23
            v26 = method24(v25)
            del v25
            v27 = numpy.random.choice(v21,p=v26)
            v28 = v26[v27]
            v29 = v26[v27]
            v30 = v18[v27]
            del v18
            v31 = libc.math.log(v28)
            v32 = libc.math.log(v29)
            v33 = v19(Tuple0(v32, v31, v30))
            del v19
            v34 = method33(v0, v33)
            del v33
            v35 = (<unsigned long long>0)
            v36 = (<double>0.000000)
            return method32(v21, v26, v27, v28, v34, v24, v35, v36)
        else:
            del v4
            v38 = len(v18)
            tmp8 = method14(v0, v18, v7)
            v39, v40, v41, v42 = tmp8.v0, tmp8.v1, tmp8.v2, tmp8.v3
            del tmp8
            del v7; del v39
            v43 = method24(v42)
            v44 = len(v43)
            v45 = numpy.empty(v44,dtype=numpy.float64)
            v46 = (<unsigned long long>0)
            method28(v44, v38, v43, v45, v46)
            v47 = numpy.random.choice(v38,p=v45)
            v48 = v45[v47]
            del v45
            v49 = v43[v47]
            v50 = v18[v47]
            del v18
            v51 = libc.math.log(v48)
            v52 = libc.math.log(v49)
            v53 = v19(Tuple0(v52, v51, v50))
            del v19
            v54 = method33(v0, v53)
            del v53
            v55 = numpy.empty(v38,dtype=numpy.float64)
            v56 = (<unsigned long long>0)
            v57 = (<double>0.000000)
            v58 = method29(v38, v43, v47, v48, v54, v41, v55, v56, v57)
            del v43
            v59 = v3 + v6
            v60 = v2 + v5
            v61 = -v9
            v62 = v60 - v59
            v63 = v61 + v62
            v64 = libc.math.exp(v63)
            tmp9 = v41[v47]
            v65, v66 = tmp9.v0, tmp9.v1
            del tmp9
            v67 = v65 * (<double>0.968750)
            v68 = v66 * (<double>0.968750)
            v69 = v54 * v64
            v70 = v69 * (<double>0.031250)
            v71 = v64 * (<double>0.031250)
            v72 = v67 + v70
            v73 = v68 + v71
            v41[v47] = Tuple3(v72, v73)
            del v41
            v74 = len(v42)
            v75 = (<unsigned long long>0)
            method30(v74, v17, v58, v55, v64, v42, v75)
            del v55
            v76 = method24(v42)
            del v42
            v77 = v8 - v9
            v78 = v77 - v3
            v79 = v78 - v3
            v80 = libc.math.exp(v79)
            v81 = len(v40)
            v82 = (<unsigned long long>0)
            method31(v81, v76, v80, v40, v82)
            del v40; del v76
            return v58
    elif v1.tag == 1: # terminal_
        v84 = (<UH1_1>v1).v0; v85 = (<UH1_1>v1).v1; v87 = (<UH1_1>v1).v3; v88 = (<UH1_1>v1).v4; v90 = (<UH1_1>v1).v6; v91 = (<UH1_1>v1).v7; v92 = (<UH1_1>v1).v8; v93 = (<UH1_1>v1).v9; v94 = (<UH1_1>v1).v10; v95 = (<UH1_1>v1).v11; v96 = (<UH1_1>v1).v12; v97 = (<UH1_1>v1).v13; v99 = (<UH1_1>v1).v15
        return v99
cdef bint method34(Mut1 v0) except *:
    cdef signed long v1
    v1 = v0.v0
    return v1 < (<signed long>1000000)
cdef double method35(Mut0 v0, Mut0 v1, UH1 v2) except *:
    cdef double v3
    cdef double v4
    cdef UH0 v5
    cdef double v6
    cdef double v7
    cdef UH0 v8
    cdef double v9
    cdef double v10
    cdef US1 v11
    cdef unsigned char v12
    cdef signed long v13
    cdef US1 v14
    cdef unsigned char v15
    cdef signed long v16
    cdef unsigned char v18
    cdef numpy.ndarray[signed long,ndim=1] v19
    cdef object v20
    cdef bint v21
    cdef unsigned long long v22
    cdef numpy.ndarray[signed long,ndim=1] v23
    cdef numpy.ndarray[double,ndim=1] v24
    cdef numpy.ndarray[object,ndim=1] v25
    cdef numpy.ndarray[double,ndim=1] v26
    cdef Tuple1 tmp10
    cdef numpy.ndarray[double,ndim=1] v27
    cdef unsigned long long v28
    cdef numpy.ndarray[double,ndim=1] v29
    cdef unsigned long long v30
    cdef unsigned long long v31
    cdef double v32
    cdef double v33
    cdef US0 v34
    cdef double v35
    cdef double v36
    cdef UH1 v37
    cdef double v38
    cdef numpy.ndarray[double,ndim=1] v39
    cdef unsigned long long v40
    cdef double v41
    cdef double v42
    cdef double v43
    cdef double v44
    cdef double v45
    cdef double v46
    cdef double v47
    cdef double v48
    cdef double v49
    cdef double v50
    cdef Tuple3 tmp11
    cdef double v51
    cdef double v52
    cdef double v53
    cdef double v54
    cdef double v55
    cdef double v56
    cdef double v57
    cdef unsigned long long v58
    cdef unsigned long long v59
    cdef numpy.ndarray[double,ndim=1] v60
    cdef double v61
    cdef double v62
    cdef double v63
    cdef double v64
    cdef unsigned long long v65
    cdef unsigned long long v66
    cdef unsigned long long v67
    cdef numpy.ndarray[signed long,ndim=1] v68
    cdef numpy.ndarray[double,ndim=1] v69
    cdef numpy.ndarray[object,ndim=1] v70
    cdef numpy.ndarray[double,ndim=1] v71
    cdef Tuple1 tmp12
    cdef numpy.ndarray[double,ndim=1] v72
    cdef unsigned long long v73
    cdef double v74
    cdef double v75
    cdef US0 v76
    cdef double v77
    cdef double v78
    cdef UH1 v79
    cdef double v80
    cdef unsigned long long v81
    cdef double v82
    cdef double v85
    cdef double v86
    cdef double v88
    cdef double v89
    cdef double v91
    cdef double v92
    cdef US1 v93
    cdef unsigned char v94
    cdef signed long v95
    cdef US1 v96
    cdef unsigned char v97
    cdef signed long v98
    cdef double v100
    if v2.tag == 0: # action_
        v3 = (<UH1_0>v2).v0; v4 = (<UH1_0>v2).v1; v5 = (<UH1_0>v2).v2; v6 = (<UH1_0>v2).v3; v7 = (<UH1_0>v2).v4; v8 = (<UH1_0>v2).v5; v9 = (<UH1_0>v2).v6; v10 = (<UH1_0>v2).v7; v11 = (<UH1_0>v2).v8; v12 = (<UH1_0>v2).v9; v13 = (<UH1_0>v2).v10; v14 = (<UH1_0>v2).v11; v15 = (<UH1_0>v2).v12; v16 = (<UH1_0>v2).v13; v18 = (<UH1_0>v2).v15; v19 = (<UH1_0>v2).v16; v20 = (<UH1_0>v2).v17
        v21 = v18 == (<unsigned char>0)
        if v21:
            del v8
            v22 = len(v19)
            tmp10 = method14(v0, v19, v5)
            v23, v24, v25, v26 = tmp10.v0, tmp10.v1, tmp10.v2, tmp10.v3
            del tmp10
            del v5; del v23
            v27 = method24(v26)
            v28 = len(v27)
            v29 = numpy.empty(v28,dtype=numpy.float64)
            v30 = (<unsigned long long>0)
            method28(v28, v22, v27, v29, v30)
            v31 = numpy.random.choice(v22,p=v29)
            v32 = v29[v31]
            del v29
            v33 = v27[v31]
            v34 = v19[v31]
            del v19
            v35 = libc.math.log(v32)
            v36 = libc.math.log(v33)
            v37 = v20(Tuple0(v36, v35, v34))
            del v20
            v38 = method35(v0, v1, v37)
            del v37
            v39 = numpy.empty(v22,dtype=numpy.float64)
            v40 = (<unsigned long long>0)
            v41 = (<double>0.000000)
            v42 = method29(v22, v27, v31, v32, v38, v25, v39, v40, v41)
            del v27
            v43 = v4 + v10
            v44 = v3 + v9
            v45 = -v7
            v46 = v44 - v43
            v47 = v45 + v46
            v48 = libc.math.exp(v47)
            tmp11 = v25[v31]
            v49, v50 = tmp11.v0, tmp11.v1
            del tmp11
            v51 = v49 * (<double>0.968750)
            v52 = v50 * (<double>0.968750)
            v53 = v38 * v48
            v54 = v53 * (<double>0.031250)
            v55 = v48 * (<double>0.031250)
            v56 = v51 + v54
            v57 = v52 + v55
            v25[v31] = Tuple3(v56, v57)
            del v25
            v58 = len(v26)
            v59 = (<unsigned long long>0)
            method30(v58, v18, v42, v39, v48, v26, v59)
            del v39
            v60 = method24(v26)
            del v26
            v61 = v6 - v7
            v62 = v61 - v4
            v63 = v62 - v4
            v64 = libc.math.exp(v63)
            v65 = len(v24)
            v66 = (<unsigned long long>0)
            method31(v65, v60, v64, v24, v66)
            del v24; del v60
            return v42
        else:
            del v5
            v67 = len(v19)
            tmp12 = method14(v1, v19, v8)
            v68, v69, v70, v71 = tmp12.v0, tmp12.v1, tmp12.v2, tmp12.v3
            del tmp12
            del v8; del v68; del v71
            v72 = method24(v69)
            del v69
            v73 = numpy.random.choice(v67,p=v72)
            v74 = v72[v73]
            v75 = v72[v73]
            v76 = v19[v73]
            del v19
            v77 = libc.math.log(v74)
            v78 = libc.math.log(v75)
            v79 = v20(Tuple0(v78, v77, v76))
            del v20
            v80 = method35(v0, v1, v79)
            del v79
            v81 = (<unsigned long long>0)
            v82 = (<double>0.000000)
            return method32(v67, v72, v73, v74, v80, v70, v81, v82)
    elif v2.tag == 1: # terminal_
        v85 = (<UH1_1>v2).v0; v86 = (<UH1_1>v2).v1; v88 = (<UH1_1>v2).v3; v89 = (<UH1_1>v2).v4; v91 = (<UH1_1>v2).v6; v92 = (<UH1_1>v2).v7; v93 = (<UH1_1>v2).v8; v94 = (<UH1_1>v2).v9; v95 = (<UH1_1>v2).v10; v96 = (<UH1_1>v2).v11; v97 = (<UH1_1>v2).v12; v98 = (<UH1_1>v2).v13; v100 = (<UH1_1>v2).v15
        return v100
cdef bint method36(Mut2 v0) except *:
    cdef signed long v1
    v1 = v0.v0
    return v1 < (<signed long>40000)
cdef double method37(Mut0 v0, Mut0 v1, UH1 v2) except *:
    cdef double v3
    cdef double v4
    cdef UH0 v5
    cdef double v6
    cdef double v7
    cdef UH0 v8
    cdef double v9
    cdef double v10
    cdef US1 v11
    cdef unsigned char v12
    cdef signed long v13
    cdef US1 v14
    cdef unsigned char v15
    cdef signed long v16
    cdef unsigned char v18
    cdef numpy.ndarray[signed long,ndim=1] v19
    cdef object v20
    cdef bint v21
    cdef unsigned long long v22
    cdef numpy.ndarray[signed long,ndim=1] v23
    cdef numpy.ndarray[double,ndim=1] v24
    cdef numpy.ndarray[object,ndim=1] v25
    cdef numpy.ndarray[double,ndim=1] v26
    cdef Tuple1 tmp13
    cdef numpy.ndarray[double,ndim=1] v27
    cdef unsigned long long v28
    cdef double v29
    cdef double v30
    cdef US0 v31
    cdef double v32
    cdef double v33
    cdef UH1 v34
    cdef double v35
    cdef unsigned long long v36
    cdef double v37
    cdef unsigned long long v39
    cdef numpy.ndarray[signed long,ndim=1] v40
    cdef numpy.ndarray[double,ndim=1] v41
    cdef numpy.ndarray[object,ndim=1] v42
    cdef numpy.ndarray[double,ndim=1] v43
    cdef Tuple1 tmp14
    cdef numpy.ndarray[double,ndim=1] v44
    cdef unsigned long long v45
    cdef double v46
    cdef double v47
    cdef US0 v48
    cdef double v49
    cdef double v50
    cdef UH1 v51
    cdef double v52
    cdef unsigned long long v53
    cdef double v54
    cdef double v57
    cdef double v58
    cdef double v60
    cdef double v61
    cdef double v63
    cdef double v64
    cdef US1 v65
    cdef unsigned char v66
    cdef signed long v67
    cdef US1 v68
    cdef unsigned char v69
    cdef signed long v70
    cdef double v72
    if v2.tag == 0: # action_
        v3 = (<UH1_0>v2).v0; v4 = (<UH1_0>v2).v1; v5 = (<UH1_0>v2).v2; v6 = (<UH1_0>v2).v3; v7 = (<UH1_0>v2).v4; v8 = (<UH1_0>v2).v5; v9 = (<UH1_0>v2).v6; v10 = (<UH1_0>v2).v7; v11 = (<UH1_0>v2).v8; v12 = (<UH1_0>v2).v9; v13 = (<UH1_0>v2).v10; v14 = (<UH1_0>v2).v11; v15 = (<UH1_0>v2).v12; v16 = (<UH1_0>v2).v13; v18 = (<UH1_0>v2).v15; v19 = (<UH1_0>v2).v16; v20 = (<UH1_0>v2).v17
        v21 = v18 == (<unsigned char>0)
        if v21:
            del v8
            v22 = len(v19)
            tmp13 = method14(v0, v19, v5)
            v23, v24, v25, v26 = tmp13.v0, tmp13.v1, tmp13.v2, tmp13.v3
            del tmp13
            del v5; del v23; del v24
            v27 = method24(v26)
            del v26
            v28 = numpy.random.choice(v22,p=v27)
            v29 = v27[v28]
            v30 = v27[v28]
            v31 = v19[v28]
            del v19
            v32 = libc.math.log(v29)
            v33 = libc.math.log(v30)
            v34 = v20(Tuple0(v33, v32, v31))
            del v20
            v35 = method37(v0, v1, v34)
            del v34
            v36 = (<unsigned long long>0)
            v37 = (<double>0.000000)
            return method32(v22, v27, v28, v29, v35, v25, v36, v37)
        else:
            del v5
            v39 = len(v19)
            tmp14 = method14(v1, v19, v8)
            v40, v41, v42, v43 = tmp14.v0, tmp14.v1, tmp14.v2, tmp14.v3
            del tmp14
            del v8; del v40; del v43
            v44 = method24(v41)
            del v41
            v45 = numpy.random.choice(v39,p=v44)
            v46 = v44[v45]
            v47 = v44[v45]
            v48 = v19[v45]
            del v19
            v49 = libc.math.log(v46)
            v50 = libc.math.log(v47)
            v51 = v20(Tuple0(v50, v49, v48))
            del v20
            v52 = method37(v0, v1, v51)
            del v51
            v53 = (<unsigned long long>0)
            v54 = (<double>0.000000)
            return method32(v39, v44, v45, v46, v52, v42, v53, v54)
    elif v2.tag == 1: # terminal_
        v57 = (<UH1_1>v2).v0; v58 = (<UH1_1>v2).v1; v60 = (<UH1_1>v2).v3; v61 = (<UH1_1>v2).v4; v63 = (<UH1_1>v2).v6; v64 = (<UH1_1>v2).v7; v65 = (<UH1_1>v2).v8; v66 = (<UH1_1>v2).v9; v67 = (<UH1_1>v2).v10; v68 = (<UH1_1>v2).v11; v69 = (<UH1_1>v2).v12; v70 = (<UH1_1>v2).v13; v72 = (<UH1_1>v2).v15
        return v72
cpdef void main() except *:
    cdef unsigned long long v0
    cdef unsigned long long v1
    cdef Mut0 v2
    cdef US0 v3
    cdef US0 v4
    cdef numpy.ndarray[signed long,ndim=1] v5
    cdef US0 v6
    cdef US0 v7
    cdef US0 v8
    cdef numpy.ndarray[signed long,ndim=1] v9
    cdef US0 v10
    cdef US0 v11
    cdef numpy.ndarray[signed long,ndim=1] v12
    cdef US0 v13
    cdef numpy.ndarray[signed long,ndim=1] v14
    cdef Heap0 v15
    cdef US1 v16
    cdef US1 v17
    cdef US1 v18
    cdef US1 v19
    cdef US1 v20
    cdef US1 v21
    cdef numpy.ndarray[signed long,ndim=1] v22
    cdef Mut1 v23
    cdef signed long v25
    cdef double v26
    cdef Mut1 v27
    cdef signed long v29
    cdef UH0 v30
    cdef double v31
    cdef double v32
    cdef UH0 v33
    cdef double v34
    cdef double v35
    cdef unsigned long long v36
    cdef unsigned long long v37
    cdef US1 v38
    cdef unsigned long long v39
    cdef numpy.ndarray[signed long,ndim=1] v40
    cdef unsigned long long v41
    cdef double v42
    cdef double v43
    cdef double v44
    cdef unsigned long long v45
    cdef unsigned long long v46
    cdef US1 v47
    cdef unsigned long long v48
    cdef numpy.ndarray[signed long,ndim=1] v49
    cdef unsigned long long v50
    cdef double v51
    cdef double v52
    cdef double v53
    cdef double v54
    cdef numpy.ndarray[signed long,ndim=1] v55
    cdef US2 v56
    cdef UH0 v57
    cdef US2 v58
    cdef UH0 v59
    cdef unsigned char v60
    cdef signed long v61
    cdef unsigned char v62
    cdef US3 v63
    cdef object v64
    cdef UH1 v65
    cdef double v66
    cdef UH0 v67
    cdef double v68
    cdef double v69
    cdef UH0 v70
    cdef double v71
    cdef double v72
    cdef unsigned long long v73
    cdef US1 v74
    cdef numpy.ndarray[signed long,ndim=1] v75
    cdef unsigned long long v76
    cdef double v77
    cdef double v78
    cdef double v79
    cdef unsigned long long v80
    cdef unsigned long long v81
    cdef US1 v82
    cdef unsigned long long v83
    cdef numpy.ndarray[signed long,ndim=1] v84
    cdef unsigned long long v85
    cdef double v86
    cdef double v87
    cdef double v88
    cdef double v89
    cdef US2 v90
    cdef UH0 v91
    cdef US2 v92
    cdef UH0 v93
    cdef unsigned char v94
    cdef signed long v95
    cdef unsigned char v96
    cdef US3 v97
    cdef object v98
    cdef UH1 v99
    cdef double v100
    cdef signed long v101
    cdef double v102
    cdef double v103
    cdef unsigned long long v104
    cdef unsigned long long v105
    cdef Mut0 v106
    cdef Mut1 v107
    cdef signed long v109
    cdef UH0 v110
    cdef double v111
    cdef double v112
    cdef UH0 v113
    cdef double v114
    cdef double v115
    cdef unsigned long long v116
    cdef unsigned long long v117
    cdef US1 v118
    cdef unsigned long long v119
    cdef numpy.ndarray[signed long,ndim=1] v120
    cdef unsigned long long v121
    cdef double v122
    cdef double v123
    cdef double v124
    cdef unsigned long long v125
    cdef unsigned long long v126
    cdef US1 v127
    cdef unsigned long long v128
    cdef numpy.ndarray[signed long,ndim=1] v129
    cdef unsigned long long v130
    cdef double v131
    cdef double v132
    cdef double v133
    cdef double v134
    cdef numpy.ndarray[signed long,ndim=1] v135
    cdef US2 v136
    cdef UH0 v137
    cdef US2 v138
    cdef UH0 v139
    cdef unsigned char v140
    cdef signed long v141
    cdef unsigned char v142
    cdef US3 v143
    cdef object v144
    cdef UH1 v145
    cdef double v146
    cdef signed long v147
    cdef Mut2 v148
    cdef signed long v150
    cdef double v151
    cdef UH0 v152
    cdef double v153
    cdef double v154
    cdef UH0 v155
    cdef double v156
    cdef double v157
    cdef unsigned long long v158
    cdef unsigned long long v159
    cdef US1 v160
    cdef unsigned long long v161
    cdef numpy.ndarray[signed long,ndim=1] v162
    cdef unsigned long long v163
    cdef double v164
    cdef double v165
    cdef double v166
    cdef unsigned long long v167
    cdef unsigned long long v168
    cdef US1 v169
    cdef unsigned long long v170
    cdef numpy.ndarray[signed long,ndim=1] v171
    cdef unsigned long long v172
    cdef double v173
    cdef double v174
    cdef double v175
    cdef double v176
    cdef numpy.ndarray[signed long,ndim=1] v177
    cdef US2 v178
    cdef UH0 v179
    cdef US2 v180
    cdef UH0 v181
    cdef unsigned char v182
    cdef signed long v183
    cdef unsigned char v184
    cdef US3 v185
    cdef object v186
    cdef UH1 v187
    cdef double v188
    cdef double v189
    cdef signed long v190
    cdef double v191
    cdef double v192
    cdef double v193
    cdef signed long v194
    v0 = (<unsigned long long>3)
    v1 = (<unsigned long long>7)
    v2 = method0(v0, v1)
    v3 = 0
    v4 = 2
    v5 = numpy.empty(2,dtype=numpy.int32)
    v5[0] = v3; v5[1] = v4
    v6 = 1
    v7 = 0
    v8 = 2
    v9 = numpy.empty(3,dtype=numpy.int32)
    v9[0] = v6; v9[1] = v7; v9[2] = v8
    v10 = 1
    v11 = 0
    v12 = numpy.empty(2,dtype=numpy.int32)
    v12[0] = v10; v12[1] = v11
    v13 = 0
    v14 = numpy.empty(1,dtype=numpy.int32)
    v14[0] = v13
    v15 = Heap0(v14, v9, v5, v12)
    del v5; del v9; del v12; del v14
    v16 = 1
    v17 = 2
    v18 = 0
    v19 = 1
    v20 = 2
    v21 = 0
    v22 = numpy.empty(6,dtype=numpy.int32)
    v22[0] = v16; v22[1] = v17; v22[2] = v18; v22[3] = v19; v22[4] = v20; v22[5] = v21
    v23 = Mut1((<signed long>0))
    while method2(v23):
        v25 = v23.v0
        pass # import time
        v26 = time.perf_counter()
        print('start training')
        v27 = Mut1((<signed long>0))
        while method3(v27):
            v29 = v27.v0
            v30 = UH0_1()
            v31 = (<double>0.000000)
            v32 = (<double>0.000000)
            v33 = UH0_1()
            v34 = (<double>0.000000)
            v35 = (<double>0.000000)
            v36 = len(v22)
            v37 = numpy.random.randint(0,v36)
            v38 = v22[v37]
            v39 = v36 - (<unsigned long long>1)
            v40 = numpy.empty(v39,dtype=numpy.int32)
            v41 = (<unsigned long long>0)
            method4(v39, v37, v22, v40, v41)
            v42 = <double>v36
            v43 = (<double>1.000000) / v42
            v44 = libc.math.log(v43)
            v45 = len(v40)
            v46 = numpy.random.randint(0,v45)
            v47 = v40[v46]
            v48 = v45 - (<unsigned long long>1)
            v49 = numpy.empty(v48,dtype=numpy.int32)
            v50 = (<unsigned long long>0)
            method4(v48, v46, v40, v49, v50)
            del v40
            v51 = <double>v45
            v52 = (<double>1.000000) / v51
            v53 = libc.math.log(v52)
            v54 = v53 + v44
            v55 = v15.v2
            v56 = US2_1(v38)
            v57 = UH0_0(v56, v30)
            del v56
            v58 = US2_1(v47)
            v59 = UH0_0(v58, v33)
            del v58
            v60 = (<unsigned char>0)
            v61 = (<signed long>1)
            v62 = (<unsigned char>1)
            v63 = US3_0()
            v64 = Closure0(v38, v47, v15, v49, v33, v34, v35, v30, v31, v32, v54)
            del v30; del v33; del v49
            v65 = UH1_0(v54, v54, v57, v31, v32, v59, v34, v35, v38, v60, v61, v47, v62, v61, v63, v60, v55, v64)
            del v57; del v59; del v63; del v64
            v66 = method13(v2, v65)
            del v65
            v67 = UH0_1()
            v68 = (<double>0.000000)
            v69 = (<double>0.000000)
            v70 = UH0_1()
            v71 = (<double>0.000000)
            v72 = (<double>0.000000)
            v73 = numpy.random.randint(0,v36)
            v74 = v22[v73]
            v75 = numpy.empty(v39,dtype=numpy.int32)
            v76 = (<unsigned long long>0)
            method4(v39, v73, v22, v75, v76)
            v77 = <double>v36
            v78 = (<double>1.000000) / v77
            v79 = libc.math.log(v78)
            v80 = len(v75)
            v81 = numpy.random.randint(0,v80)
            v82 = v75[v81]
            v83 = v80 - (<unsigned long long>1)
            v84 = numpy.empty(v83,dtype=numpy.int32)
            v85 = (<unsigned long long>0)
            method4(v83, v81, v75, v84, v85)
            del v75
            v86 = <double>v80
            v87 = (<double>1.000000) / v86
            v88 = libc.math.log(v87)
            v89 = v88 + v79
            v90 = US2_1(v74)
            v91 = UH0_0(v90, v67)
            del v90
            v92 = US2_1(v82)
            v93 = UH0_0(v92, v70)
            del v92
            v94 = (<unsigned char>0)
            v95 = (<signed long>1)
            v96 = (<unsigned char>1)
            v97 = US3_0()
            v98 = Closure0(v74, v82, v15, v84, v70, v71, v72, v67, v68, v69, v89)
            del v67; del v70; del v84
            v99 = UH1_0(v89, v89, v91, v68, v69, v93, v71, v72, v74, v94, v95, v82, v96, v95, v97, v94, v55, v98)
            del v55; del v91; del v93; del v97; del v98
            v100 = method33(v2, v99)
            del v99
            v101 = v29 + (<signed long>1)
            v27.v0 = v101
        del v27
        v102 = time.perf_counter()
        v103 = v102 - v26
        print('done training -', v103)
        v104 = (<unsigned long long>3)
        v105 = (<unsigned long long>7)
        v106 = method0(v104, v105)
        v107 = Mut1((<signed long>0))
        while method34(v107):
            v109 = v107.v0
            v110 = UH0_1()
            v111 = (<double>0.000000)
            v112 = (<double>0.000000)
            v113 = UH0_1()
            v114 = (<double>0.000000)
            v115 = (<double>0.000000)
            v116 = len(v22)
            v117 = numpy.random.randint(0,v116)
            v118 = v22[v117]
            v119 = v116 - (<unsigned long long>1)
            v120 = numpy.empty(v119,dtype=numpy.int32)
            v121 = (<unsigned long long>0)
            method4(v119, v117, v22, v120, v121)
            v122 = <double>v116
            v123 = (<double>1.000000) / v122
            v124 = libc.math.log(v123)
            v125 = len(v120)
            v126 = numpy.random.randint(0,v125)
            v127 = v120[v126]
            v128 = v125 - (<unsigned long long>1)
            v129 = numpy.empty(v128,dtype=numpy.int32)
            v130 = (<unsigned long long>0)
            method4(v128, v126, v120, v129, v130)
            del v120
            v131 = <double>v125
            v132 = (<double>1.000000) / v131
            v133 = libc.math.log(v132)
            v134 = v133 + v124
            v135 = v15.v2
            v136 = US2_1(v118)
            v137 = UH0_0(v136, v110)
            del v136
            v138 = US2_1(v127)
            v139 = UH0_0(v138, v113)
            del v138
            v140 = (<unsigned char>0)
            v141 = (<signed long>1)
            v142 = (<unsigned char>1)
            v143 = US3_0()
            v144 = Closure0(v118, v127, v15, v129, v113, v114, v115, v110, v111, v112, v134)
            del v110; del v113; del v129
            v145 = UH1_0(v134, v134, v137, v111, v112, v139, v114, v115, v118, v140, v141, v127, v142, v141, v143, v140, v135, v144)
            del v135; del v137; del v139; del v143; del v144
            v146 = method35(v106, v2, v145)
            del v145
            v147 = v109 + (<signed long>1)
            v107.v0 = v147
        del v107
        v148 = Mut2((<signed long>0), (<double>0.000000))
        while method36(v148):
            v150 = v148.v0
            v151 = v148.v1
            v152 = UH0_1()
            v153 = (<double>0.000000)
            v154 = (<double>0.000000)
            v155 = UH0_1()
            v156 = (<double>0.000000)
            v157 = (<double>0.000000)
            v158 = len(v22)
            v159 = numpy.random.randint(0,v158)
            v160 = v22[v159]
            v161 = v158 - (<unsigned long long>1)
            v162 = numpy.empty(v161,dtype=numpy.int32)
            v163 = (<unsigned long long>0)
            method4(v161, v159, v22, v162, v163)
            v164 = <double>v158
            v165 = (<double>1.000000) / v164
            v166 = libc.math.log(v165)
            v167 = len(v162)
            v168 = numpy.random.randint(0,v167)
            v169 = v162[v168]
            v170 = v167 - (<unsigned long long>1)
            v171 = numpy.empty(v170,dtype=numpy.int32)
            v172 = (<unsigned long long>0)
            method4(v170, v168, v162, v171, v172)
            del v162
            v173 = <double>v167
            v174 = (<double>1.000000) / v173
            v175 = libc.math.log(v174)
            v176 = v175 + v166
            v177 = v15.v2
            v178 = US2_1(v160)
            v179 = UH0_0(v178, v152)
            del v178
            v180 = US2_1(v169)
            v181 = UH0_0(v180, v155)
            del v180
            v182 = (<unsigned char>0)
            v183 = (<signed long>1)
            v184 = (<unsigned char>1)
            v185 = US3_0()
            v186 = Closure0(v160, v169, v15, v171, v155, v156, v157, v152, v153, v154, v176)
            del v152; del v155; del v171
            v187 = UH1_0(v176, v176, v179, v153, v154, v181, v156, v157, v160, v182, v183, v169, v184, v183, v185, v182, v177, v186)
            del v177; del v179; del v181; del v185; del v186
            v188 = method37(v106, v2, v187)
            del v187
            v189 = v151 + v188
            v190 = v150 + (<signed long>1)
            v148.v0 = v190
            v148.v1 = v189
        del v106
        v191 = v148.v1
        del v148
        v192 = <double>(<signed long>40000)
        v193 = v191 / v192
        print('summary -',v25,v193)
        v194 = v25 + (<signed long>1)
        v23.v0 = v194
    del v2; del v15; del v22
