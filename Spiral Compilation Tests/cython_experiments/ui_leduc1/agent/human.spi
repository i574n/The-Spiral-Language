open nodes
open leduc

let show_card = function
    | King => "King"
    | Queen => "Queen"
    | Jack => "Jack"

let rec show_trace l =
    inl ar : rarray string = r64.empty
    listm.fold (fun is_first => function
        | Observation: x => 
            inl o = show_card x
            r64.add ar $"f'Observed {!o}.'"
            true
        | Action: x =>
            inl p = if is_first then "Player One" else "Player Two"
            inl a = match x with Fold => "folds" | Call => "calls" | Raise => "raises"
            r64.add ar $"f'{!p} {!a}.'"
            not is_first
        ) true l |> ignore
    r64.join' "\n" ar

open nodes
inl create dispatch = player_funs {
    action = fun (player p : player replay card action) opp_prob dist next => 
        dispatch (p.observations, dist, fun x => next (x,p.state))
    terminal = fun (player {observations probSelf state=(replay rep)}) (reward: probOpp:) =>
        r64.add rep {observations reward probOpp probSelf=exp_log_prob probSelf}
    } 