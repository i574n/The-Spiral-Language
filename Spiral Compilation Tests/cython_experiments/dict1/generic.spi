nominal dict_funs (table : * -> * -> *) (bucket : * -> * -> *) key value = {
    table_length : table key value -> u64
    table_index : table key value -> u64 -> bucket key value
    table_init : u64 -> table key value
    bucket_index : bucket key value -> u64 -> {key : key; value : value; hkey : u64}
    bucket_add : bucket key value -> {key : key; value : value; hkey : u64} -> ()
    bucket_length : bucket key value -> u64
    bucket_remove : bucket key value -> u64 -> ()
    bucket_set : bucket key value -> u64 -> {key : key; value : value; hkey : u64} -> ()
    }

nominal dictg (table : * -> * -> *) key value = mut {
    table : table key value
    total_size : u64
    limit : u64
    }

// Internal. Increases the dictionary capacity.
let resize (dict_funs funs) (dictg x) =
    inl table = x.table
    inl table_length' = funs.table_length table * 3 / 2 + 3
    if table_length' <= funs.table_length table then failwith "The table cannot be grown anymore."
    inl table' = funs.table_init table_length'
    loop.for' (from: 0 nearTo: funs.table_length table) (fun i =>
        inl bucket = funs.table_index table i
        loop.for' (from: 0 nearTo: funs.table_length table) (fun i =>
            inl a = funs.bucket_index bucket i
            inl bucket' = funs.table_index table' ((a.hkey &&& limit_max.u64()) % table_length')
            funs.bucket_add bucket' a
            )
        )
    x.table <- table'
    x.limit <- x.limit+2

// Internal. Iterates over the dictionary and passes the value to on_succ if it finds a key match otherwise it calls on_fail.
// The callback arguments can be used to set, remove and add relevant value to the dictionary.
inl atKey (dict_funs funs) (dictg x) key {on_succ on_fail} = 
    inl hkey = hash_cython key
    inl table = x.table
    inl bucket = funs.table_index table ((hkey &&& limit_max.u64()) % funs.table_length table)
    let rec loop i =
        if i < funs.bucket_length bucket then 
            inl x = funs.bucket_index bucket i
            if hkey = x.hkey && key = x.key then 
                on_succ x.value {
                    set = fun value => funs.bucket_set bucket i {x with value}
                    remove = fun () => funs.bucket_remove bucket i
                    }
            else loop (i+1)
        else
            on_fail (fun value => 
                funs.bucket_add bucket {key value hkey}
                x.total_size <- x.total_size+1
                if x.total_size >= x.limit * funs.table_length x.table then resize (dict_funs funs) (dictg x)
                )
    loop 0