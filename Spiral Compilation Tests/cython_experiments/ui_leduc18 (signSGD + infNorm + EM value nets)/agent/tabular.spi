inl policy_probs (policy : a u64 f32) = // 0 <= x for all x in policy should hold.
    inl s = am.reduce (+) policy
    inl a,s = if s = 0 then 1 / f32 (length policy), 0 else 0, 1 / s
    am.map (fun x => a + x * s) policy

inl belief_tabulate forall present future. (agent : dictm.dict present {head : dictm.dict future _; policy : a i64 _}) 
        present future (action_indices : a u64 i64) (at_action_value : a u64 f32) (at_action_weight : a u64 f32) = 
    inl slots =
        am.map2 (fun state hindsight =>
            inl {policy head} = dictm.index agent state
            {policy head=dictm.index head hindsight}
            ) present future
    inl update_head () =
        am.iter4 (fun {policy head={weighted_value weight}} i_action at_action_value at_action_weight =>
            inl add_to l v = inl x = index l i_action in set l i_action (x + v)
            add_to weighted_value (at_action_value * at_action_weight) . add_to weight at_action_weight
            ) slots action_indices at_action_value at_action_weight
    inl action_fun (action_probs : a u64 (a i64 f32)) (sample_probs : a u64 (a i64 f32)) =
        inl batch_qs = 
            am.map4 (fun {policy head={weighted_value weight}} i_action sample_prob r =>
                am.mapi2 (fun i_action' weighted_value weight =>
                    inl q = weighted_value / weight
                    if i_action = i_action' then (r - q) / (index sample_prob i_action) + q else q
                    ) weighted_value weight
                ) slots action_indices sample_probs at_action_value
        inl rewards = am.map2 (am.fold2 (fun s a b => s + a * b) 0) batch_qs action_probs
        inl update_policy () =
            am.iter4 (fun {policy head} qs mean regret_prob =>
                am.mapInplace (fun i policy => policy + regret_prob * (index qs i - mean)) policy
                ) slots batch_qs rewards at_action_weight
            am.iter (fun {policy head} => am.mapInplace (fun _ => max 0) policy) slots 
        rewards, update_policy
    update_head, action_fun