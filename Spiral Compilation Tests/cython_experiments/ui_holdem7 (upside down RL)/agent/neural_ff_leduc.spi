open leduc
nominal leduc_policy_input = {pid : u64; pot : u64; seq : a u64 (card * a u64 action)}
nominal leduc_net = {policy : obj; schema : schema leduc_policy_input card action; value : obj}
let obs_to_array (l : list (observation card action)) : a u64 (card * a u64 action) =
    let rec action (c,l) = function
        | Cons: (Observation: x), x' => (c,listm.rev l |> listm.toArray) :: action (x,Nil) x'
        | Cons: (Action: x), x' => action (c,x :: l) x'
        | Nil => (c,listm.rev l |> listm.toArray) :: Nil
    match listm.rev l with
    | Cons: (Observation: x), x' => action (x,Nil) x' |> listm.toArray
    | _ => failwith "Expected a card."

inl schema () =
    inl card =
        open serialization.dense.array
        alt {king=Unit; queen=Unit; jack=Unit} : pu card
    inl present =
        open serialization.dense.array
        inl action = alt {fold=Unit; call=Unit; raise=Unit} : pu action
        array 2 (card ** array 4 action)
    inl future : _ (st * card) =
        open serialization.dense.array
        bin_sint 4 ** card
    inl action =
        open serialization.sparse.int
        alt {fold=Unit; call=Unit; raise=Unit} : pu action
    schema {present future action}

// Extractors.

inl present_ex (player_state,(leduc_state (p1,p2,_)),pid) = obs_to_array (pl2_observations player_state pid)
inl tabular_ex (player_state,(leduc_state (p1,p2,_)),pid) = pl2_observations player_state pid, if p1.id = pid then p2.card else p1.card
inl future_ex (r2 reward,player_state,(leduc_state (p1,p2,_)),pid) : st * card = round reward, if p1.id = pid then p2.card else p1.card

// The actual player is done on the Python side. These are the serialization helpers for it.