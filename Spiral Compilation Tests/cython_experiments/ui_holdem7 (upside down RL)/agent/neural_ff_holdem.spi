open hu_holdem

union oaction = OStreetOver | OFold | OCall | ORaiseTo: st
inl obs_to_array (l : list (observation card action)) : a u64 oaction =
    l |> listm.fold (fun (s,is_round_over) => function
        | Observation: x => s, true
        | Action: x => 
            inl x = match x with Fold => OFold | Call => OCall | RaiseTo: x => ORaiseTo: x
            if is_round_over then x :: OStreetOver :: s, false
            else x :: s, false
        ) ([],false) 
    |> fst |> listm.toArray

inl suit_rank x = hand_scorer.suit x, hand_scorer.rank x
inl full (suit,rank) = hand_scorer.full (suit:rank:)

inl holdem_schema (bb,(stack_size : st)) =
    inl (/.) a b = inl x = a / b in x + if a % b = 0 then 0 else 1
    // potential_raises + 3 OStreetOver + 4 Check + 4 Call.
    inl trace_length = (stack_size /. bb - 1) + 3 + 4 + 4

    inl stack_size = stack_size + 1 // Don't forget the extra 1 at the end to represent the max pot size.
    inl field_size = !!!!Import("math") . $"math.ceil(math.log2(!stack_size))" // The field size needs to be 1 bigger if the stack size is max value for that particular integer power due to the way the serializer works.
    inl card, hand =
        open serialization.dense.array
        inl card = wrap (in:suit_rank out:full) (int 4 ** int 13)
        inl hand = card ** card
        card, hand
    inl present =
        open serialization.dense.array
        inl stack : pu st = bin_int field_size
        inl oaction = alt {oStreetOver=Unit; oFold=Unit; oCall=Unit; oRaiseTo_=stack} : pu oaction
        stack ** stack ** stack ** hand ** array 5 card ** array (u64 trace_length) oaction
    inl future : _ (st * _) =
        open serialization.dense.array
        bin_sint field_size ** hand
    inl action =
        open serialization.sparse.int
        alt {fold=Unit; call=Unit; 
            raiseTo_ = wrap (in:(+) -2 out:(+) 2) (int (stack_size-1)) // RaiseTo (2..stack_size) - RaiseTo (0,1)
            } : pu action
    schema {present future action}

inl present_ex ((player_state : pl2 card action),(p1,p2,community_card,stack,is_showdown : player * player * a _ card * st * bool),(pid : u8)) = 
    stack, p1.pot, p2.pot, p1.hand, community_card, obs_to_array (pl2_observations player_state pid)

inl future_ex (r2 reward,(player_state : pl2 card action),(p1,p2,community_card,stack,is_showdown : player * player * a _ card * st * bool),(pid : u8)) : st * _ = 
    round reward, p2.hand

inl holdem_cython_schema (bb,stack_size) =
    inl schema = holdem_schema (bb,stack_size)
    inl handler = train.neural_handler (present_ex,future_ex) schema
    inl size =
        inl present = serialization.dense.array.size schema.present
        inl future = serialization.dense.array.size schema.future
        inl action = serialization.sparse.int.size schema.action
        namedtuple "Size" {action present future}
    namedtuple "Neural" {handler size}