inl sample i pid dist f p = cps.sample i pid dist (fun x (p,ret) => ret (f x p)) (p,id)
inl draw i pid dist f p = cps.draw i pid dist (fun x (p,ret) => ret (f x p)) (p,id)

// Iterates over the an uniform categorical distribution, summing up the rewards divided by the length.
inl iter one pid dist f (p,ret) =
    let rec loop i s = 
        inl prob = 1 / f64 (a64.length dist)
        if i < a64.length dist then inl r = one i pid dist f p in loop (i+1) (s+r)
        else ret (prob * s)
    loop 0 0

inl nodes_2p forall (p1 : * -> * -> *) (p2 : * -> * -> *) o a. (player_funs fp1, player_funs fp2) : game2p o a (pl2 p1 p2 o a -> f64) = game2p {
    terminal = fun (pid,r) (p1,p2) =>
        inl r = f64 r |> fun r => if pid = 0 then r else -r
        fp1.terminal p1 (reward: r probOpp: exp_log_prob (prob p2)) 
        fp2.terminal p2 (reward: -r probOpp: exp_log_prob (prob p1)) 
        r
    action = fun pid ar f (p1,p2) =>
        if pid = 0 then fp1.action p1 (prob p2) ar (fun ((_,a),_ as cs) => f a (apply_changes p1 cs,apply_action p2 a))
        else fp2.action p2 (prob p1) ar (fun ((_,a),_ as cs) => f a (apply_action p1 a,apply_changes p2 cs))
    draw = choice draw
    sample = choice sample
    }