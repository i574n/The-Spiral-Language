open kivy
open lithe

union msg =
    | Action: string * array leduc.action * (leduc.action -> ())
    | StartGame

// type state (a : * -> * -> *) (b : * -> * -> *) = {
//     p1 : nodes.player_funs a leduc.card leduc.action f64
//     p2 : nodes.player_funs b leduc.card leduc.action f64
//     text : string
//     }

type cords = { x : f64; y : f64; width : f64; height : f64 }
type stack = { cords : cords; texture_size : f64 * f64; chips : i32 }
type card = { cords : cords; texture_size : f64 * f64; text : string }
type table = {
    cords : cords
    myStack : stack; myCard : card; myPot : stack
    opStack : stack; opCard : card; opPot : stack
    }
type state = {
    table : table
    actions : array leduc.action
    cont : leduc.action -> ()
    trace : string
    }

inl init_state () : state =
    inl cords = {x=0; y=0; width=0; height=0}
    inl texture_size = 0,0
    inl stack = {cords texture_size chips=10}
    inl pot = {stack with chips=0}
    inl card = {cords texture_size text=" "}
    inl table = { 
        cords
        myStack = stack; myCard = card; myPot = pot
        opStack = stack; opCard = card; opPot = pot
        }
    {
    table = table
    actions = ;[]
    cont = fun _ => ()
    trace = ""
    }

inl model (s : state) = function
    | StartGame => s

inl view dispatch (state : rx.observable state) =
    inl (~+) x = +state x
    boxlayout [
        -orientation Vertical
        children [
            scrollview [
                -do_scroll_x false
                -do_scroll_y true
                children [
                    label [
                        -size_hint_y None
                        @on_texture_size (fun (l,(_,v)) => $"!l.height = !v")
                        +text fun {text} => text
                        ]
                    ]
                ]
            boxlayout [
                -orientation Horizontal
                -size_hint_y (Some: 0.2)
                children [
                    button [
                        -text "Start Game."
                        @on_press (fun _ => dispatch StartGame)
                        ]
                    ]
                ]
            ]
        ]

inl main () =
    inl app = appm.create()
    inl p1 = agent.neural_random.create()
    inl p2 = agent.uniform_random.create()
    inl text = ""
    inl _ = rx.subscribe (loop {p1 p2 text} model view) (appm.root app)
    appm.run app