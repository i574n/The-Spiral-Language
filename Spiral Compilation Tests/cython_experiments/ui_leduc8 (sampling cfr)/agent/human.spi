open nodes
open leduc

let show_card = function
    | King => "King"
    | Queen => "Queen"
    | Jack => "Jack"

let rec show_trace i (l, r) =
    inl ar : ra u64 string = am.empty
    listm.foldBack (fun x is_first =>
        match x with
        | Observation: x =>
            inl o = show_card x
            rm.add ar $"f'Observed {!o}.'"
            true
        | Action: x =>
            inl p = if is_first then "One" else "Two"
            inl a = match x with Fold => "folds" | Call => "calls" | Raise => "raises"
            rm.add ar $"f'Player {!p} {!a}.'"
            not is_first
        ) l true |> ignore
    match r with
    | Some: r =>
        inl p = if i = 0 then "One" else "Two"
        inl r = r2_index r i
        if 0 < r then $"f\"Player {!p} wins {!r} chips.\\n\""
        elif 0 = r then $"f\"Player {!p} draws.\\n\""
        else inl r = -r in $"f\"Player {!p} loses {!r} chips.\\n\""
        |> rm.add ar
    | None => ()
    rm.join' "\n" ar

open nodes
inl funs dispatch = player_funs {
    action = fun {game_state player actions next} => 
        dispatch ((game_state, observations player, None), actions, fun x => next (log_probm.from' 1,x))
    terminal = fun {game_state player reward} =>
        dispatch ((game_state, observations player, (Some: reward)), a ;[], fun x => ())
    }