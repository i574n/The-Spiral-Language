inl play is_first p1 : () =
    !!!!Import("ui_leduc")
    inl root : obj = $"ui_leduc.Top()"
    inl p2 = agent.human.funs (agent.human.dispatch >> fun r => $"!root.data = !r")
    inl f (): () =
        open nodes
        leduc.game (cps.nodes_2p (if is_first then p1,p2 else p2,p1)) ((log_probm.from' 1,init,init),fun r => ())
    $"ui_leduc.popup_game(!root,!f)"

inl main () =
    inl d_sample : dictm.t _ _ = dictm.empty
    inl d_enum : dictm.t _ _ = dictm.empty
    let run c (a,b) = leduc.start (nodes.nodes_2p c (a, b))
    inl train () =
        inl play_avg, play_cur, train_cur = 
            open agent.cfr_sample
            funsTest d_sample, funsTrain PlayCurrentPolicy d_sample, funsTrain TrainCurrentPolicy d_sample
        loop.for' (from:0u64 nearTo:2000) fun _ =>
            inl alternating () =
                run true (train_cur,play_cur) |> ignore
                run true (play_cur,train_cur) |> ignore
            inl simultaneous () =
                run true (train_cur,train_cur) |> ignore
            simultaneous ()
        inl play_avg', play_cur, train_cur = 
            open agent.cfr_enum
            funsTrain PlayAvgPolicy d_enum, funsTrain PlayCurrentPolicy d_enum, funsTrain TrainCurrentPolicy d_enum
        inl alternating () =
            run false (train_cur,play_cur) |> ignore
            run false (play_cur,train_cur) |> ignore
        inl simultaneous () =
            run false (train_cur,train_cur) |> ignore
        simultaneous()
        run false (play_avg,play_avg')
    inl play () = play true (agent.cfr_sample.funsPlay d_sample)
    
    inl show_buffer () : ra u64 _ = (dictm.toArray d_sample : a _ _) |> am.generic.map fun k,v =>
        open leduc
        open nodes
        inl show_card = function
            | King => "[color=ff0000]K[/color]"
            | Queen => "[color=ff0000]Q[/color]"
            | Jack => "[color=ff0000]J[/color]"
        inl show_action = function
            | Fold => "F"
            | Call => "C"
            | Raise => "R"
        inl pstr x = $"'{:.5f}'.format(!x)" : string
        record {
        trace =
            inl trace : ra u64 _ = am.empty
            listm.iterBack ((function Observation: x => show_card x | Action: x => show_action x) >> rm.add trace) k
            rm.join' "" trace
        avg_policy =
            am.generic.map2 (fun k v => 
                inl k,v = show_action k, pstr v in $"f'{!k}: {!v}'" : string
                ) v.actions v.avg_policy
            |> rm.join' "\n"
        regret =
            am.generic.map2 (fun k v => 
                inl k,v = show_action k, pstr v in $"f'{!k}: {!v}'" : string
                ) v.actions v.regret
            |> rm.join' "\n"
        q =
            inl qs : a _ _ = dictm.toArray v.qs
            am.generic.map (fun (card, q) => 
                inl card = show_card card
                inl actions =
                    am.generic.map2 (fun k v =>
                        inl k,v = show_action k, pstr v in $"f'{!k}: {!v}'" : string
                        ) v.actions q
                    |> rm.join' ", "
                $"f'{!card} - {!actions}'"
                ) qs
            |> rm.join' "\n"
        }
    
    !!!!Import("ui_train")
    $"ui_train.run(!train,!show_buffer,!play)"
    ()