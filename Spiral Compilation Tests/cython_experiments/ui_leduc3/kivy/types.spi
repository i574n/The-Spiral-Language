type obj = $"object"
nominal widget = obj
nominal layout_widget = obj
nominal app = obj
nominal prop a = {
    read : () -> a
    set : a -> ()
    subscribe : (a -> ()) -> rx.disposable
    }

inl (<<;) (prop a) (prop b) = prop {
    read = fun () => a.read(), b.read()
    set = fun a',b' => a.set a' . b.set b'
    subscribe = fun f =>
        inl f _ = f (a.read(), b.read())
        inl c = rx.disposablem.composite()
        rx.push c (a.subscribe f) . rx.push c (b.subscribe f)
        rx.toDisposable c
    }

prototype toWidget m : m -> widget
prototype toLayout m : m -> layout_widget
instance toWidget widget = id

inl addWidget (w : widget) (i : u64) x = inl x = toLayout x in $"!x.add_widget(!w,!i)"
inl removeWidget (w : widget) x = inl x = toLayout x in $"!x.remove_widget(!w)"
inl clearWidgets x = inl x = toLayout x in $"!x.clear_widgets()"

open helpers
inl size_hint_x forall t {toWidget}. (x : t) =
    prop {
        set = fun (v : option f64) =>
            match v with
            | Some: v => $"!x.size_hint_x = !v"
            | None => $"!x.size_hint_x = None"
        read = fun () =>
            inl x = $"!x.size_hint_x"
            if $"!x is None" then None else Some: x
        subscribe = fun f => bind1 "size_hint_x" (fun _,b => f $"!b") x
        }
inl size_hint_y forall t {toWidget}. (x : t) =
    prop {
        set = fun (v : option f64) =>
            match v with
            | Some: v => $"!x.size_hint_y = !v"
            | None => $"!x.size_hint_y = None"
        read = fun () =>
            inl x = $"!x.size_hint_y"
            if $"!x is None" then None else Some: x
        subscribe = fun f => bind1 "size_hint_y" (fun _,b => f $"!b") x
        }
inl size_hint forall t {toWidget}. (x : t) =
    prop {
        set = fun (v : option f64 * option f64) =>
            match v with
            | (Some: a), (Some: b) => $"!x.size_hint = !a,!b"
            | (Some: a), None => $"!x.size_hint = !a,None"
            | None, (Some: b) => $"!x.size_hint = None,!b"
            | None, None => $"!x.size_hint = None,None"
        read = fun () =>
            inl a,b = tup2 $"!x.size_hint"
            inl a = if $"!a is None" then None else Some: a
            inl b = if $"!b is None" then None else Some: b
            a,b
        subscribe = fun f => bind1 "size_hint_y" (fun _,b => f (tup2 b)) x
        }
inl pos_hint forall t {toWidget}. (x : t) =
    prop {
        set = fun (v : option f64 * option f64) =>
            match v with
            | (Some: a), (Some: b) => $"!x.pos_hint = {'x':!a, 'y':!b}"
            | (Some: a), None => $"!x.pos_hint = {'x':!a, 'y':None}"
            | None, (Some: b) => $"!x.pos_hint = {'x':None, 'y':!b}"
            | None, None => $"!x.pos_hint = {'x':None, 'y':None}"
        read = fun () => failwith "TODO"
        subscribe = fun f => failwith "TODO"
        }
inl x forall t {toWidget}. (x : t) =
    prop {
        set = fun (v : f64) => $"!x.x = !v"
        read = fun () => $"!x.x"
        subscribe = fun f => bind1 "x" (fun _,b => f $"!b") x
        }
inl y forall t {toWidget}. (x : t) =
    prop {
        set = fun (v : f64) => $"!x.y = !v"
        read = fun () => $"!x.y"
        subscribe = fun f => bind1 "y" (fun _,b => f $"!b") x
        }
inl width forall t {toWidget}. (x : t) =
    prop {
        set = fun (v : f64) => $"!x.width = !v"
        read = fun () => $"!x.width"
        subscribe = fun f => bind1 "width" (fun _,b => f $"!b") x
        }
inl height forall t {toWidget}. (x : t) =
    prop {
        set = fun (v : f64) => $"!x.height = !v"
        read = fun () => $"!x.height"
        subscribe = fun f => bind1 "height" (fun _,b => f $"!b") x
        }
inl pos forall t {toWidget}. (x : t) =
    prop {
        set = fun (a,b : f64 * f64) => $"!x.pos = !a, !b"
        read = fun () => $"!x.pos"
        subscribe = fun f => bind1 "pos" (fun _,b => f (tup2 b)) x
        }
inl size forall t {toWidget}. (x : t) =
    prop {
        set = fun (a,b : f64 * f64) => $"!x.size = !a, !b"
        read = fun () => $"!x.size"
        subscribe = fun f => bind1 "size" (fun _,b => f (tup2 b)) x
        }
prototype text_size m : (f64 * f64) -> m -> ()
prototype do_scroll_x m : bool -> m -> ()
prototype do_scroll_y m : bool -> m -> ()

union orientation = Vertical | Horizontal
prototype orientation m : orientation -> m -> ()
prototype text m : string -> m -> ()
prototype font_size m : f64 -> m -> ()
prototype font_name m : string -> m -> ()

open rx
prototype on_press m : (m -> ()) -> m -> disposable
prototype texture_size m : m -> prop (f64 * f64)
