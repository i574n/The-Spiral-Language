// A lot of the functionality here could be adapted without much difficulty for other libraries, but
// this particular instance of Lithe has functionality specific to the Kivy UI library for the Python language.

open rx
open kivy

inl control c l = create fun obs =>
    inl c = c()
    inl disp = disposablem.composite()
    listm.iter (fun f => match f c with None => () | Some: (x : disposable) => push disp x) l
    onNext obs (toWidget c)
    toDisposable disp

inl children l c =
    inl len = listm.length l
    inl in_front = a64.init len (fun _ => 0)
    inl prev_widget = a64.init len (fun _ => None)
    inl disp = disposablem.composite()
    listm.fold (fun i x =>
        inl subs = subscribe x fun x => 
            match a64.index prev_widget i with
            | None => loop.forDown' (nearFrom: i to: 0) (fun i => a64.set in_front i (a64.index in_front i + 1))
            | Some: x => removeWidget x c
            addWidget x (a64.index in_front i) c
            a64.set prev_widget i (Some: x)
        push disp subs
        i+1
        ) 0 l
    |> fun _ => Some: toDisposable disp

inl (~-) f x c = f x c . None
inl (~+) x f g c = Some: subscribe x (fun x => f (g x) c)
inl (~@) f x c = Some: (f x c : disposable)
inl (~#) x f g c =
    inl disp = disposablem.serial()
    inl x = subscribe x (fun x => push disp (f (g x) c))
    inl d = disposablem.composite()
    listm.iter (push d) [x; toDisposable disp]
    toDisposable d

inl loop init model view =
    inl subject = subjectm.behavior init
    inl dispatch msg =
        inl f (dt : obj) = onNext subject (model (subjectm.value subject) msg)
        !!!!Import("kivy.clock")
        $"kivy.clock.Clock.schedule_once(!f)" : ()
        
    view dispatch (toObservable subject)

inl button x = control buttonm.create x
inl boxlayout x = control boxlayoutm.create x
inl label x = control labelm.create x