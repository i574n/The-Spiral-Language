type obj = $"object"
nominal tensor = obj
inl randn forall t {int}. (b,a : t * t) = tensor $"torch.randn(!b,!a)"
nominal net = obj
inl linear forall t {int}. (b,a : t * t) = net $"torch.nn.Linear(!b,!a)"
inl forward l (x : tensor) = tensor $"!l.forward(!x)"

inl main() =
    !!!!Import("torch")
    !!!!Import("torch.nn")
    !!!!Import("nets")
    inl nets_small (b,a : u32 * u32) : net = $"nets.small(!b,!a)"
    inl dims = {
        batch_size = 2
        intro = 16
        mid = 32
    }
    inl r = randn (dims.batch_size, dims.intro)
    inl net = nets_small (dims.intro, dims.mid)
    inl q = forward net r
    $"print(!q)"
    ()