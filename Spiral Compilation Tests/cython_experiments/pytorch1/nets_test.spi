open pickle

type obj = $"object"
nominal tensor = obj
nominal net = obj
nominal distribution = obj
inl randn forall t {int}. (b,a : t * t) = tensor $"torch.randn(!b,!a)"
inl forward l (x : tensor) = tensor $"!l.forward(!x)"
inl fromArray (x : array _) : tensor = $"torch.from_numpy(!x)"
inl fromSerialized (serialized x) = fromArray x
inl categorical (probs : tensor) : distribution = $"torch.distributions.Categorical(probs=!probs)"
inl sample (x : distribution) : tensor = $"!x.sample()"

union action =
    | Raise: u64 // `Raise: 0` would be a min raise.
    | Call
    | Fold

type rank = u64
type suit = u64
type card = rank * suit
type player_view = {
    stack_self : u64
    stack_opp : u64
    pot : u64
    hand : card * card
    }

inl MaxStack = 10u64
inl MaxRaise = 4u64

inl Action : pu action = alt {raise_=U64 MaxRaise; call=Unit; fold=Unit}
inl Card = U64 13 ** U64 4

inl PlayerView : pu player_view = 
    inl a (stack_self,stack_opp,pot,hand) = {stack_self stack_opp pot hand}
    inl b {stack_self stack_opp pot hand} = (stack_self,stack_opp,pot,hand)
    wrap (a,b) (U64 MaxStack ** U64 MaxStack ** U64 MaxStack ** (Card ** Card))

inl main() =
    !!!!Import("torch")
    !!!!Import("torch.nn")
    !!!!Import("torch.distributions")
    !!!!Import("nets")
    inl nets_small (c,b,a : u64 * u64 * u64) : net = $"nets.small(!c,!b,!a)"
    inl dims = {
        intro = size PlayerView
        mid = 32
        out = size Action
    }
    inl input = {stack_self=(MaxStack-1)/2; stack_opp=(MaxStack-1)/2; pot=MaxStack-1; hand=(0,1),(12,3)} |> serialize PlayerView
    inl net = nets_small (dims.intro, dims.mid, dims.out)
    inl dist = forward net (fromSerialized input) |> categorical
    inl x = sample dist
    inl idx = $"!x.item()"
    match a64.init dims.out (fun i => if i = idx then 1 else 0) |> serialized |> deserialize Action with
    | Raise: x => $"f\"Raise: {!x}\""
    | Call => $"f\"Call\""
    | Fold => $"f\"Fold\"" : string