union observation o a = Observation: o | Action: a
nominal player o a = { prob : log_prob; observations : list (observation o a) }
inl init forall observation action. : player observation action = player {prob=Log_prob_one; observations=Nil} |> dyn
nominal player_funs game_state obs act r = {
    action : {game_state : game_state; id : u8; player : player obs act;  player' : log_prob; chance_prob : log_prob; actions : a u64 act; next : log_prob * act -> r} -> r
    terminal : {game_state : game_state; id : u8; player : player obs act; chance_prob : log_prob; reward : r2} -> ()
    }
type pl2 o a = log_prob * player o a * player o a

inl prob (player {prob}) = prob
inl observations (player {observations}) = observations
inl apply_action (player x) a = player {x with observations#=(::) (Action: a)}
inl apply_observation (player x) o = player {x with observations#=(::) (Observation: o)}
inl apply_changes (player x) (prob,a) = player {x with observations#=(::) (Action: a); prob#=(+@) prob}

inl sample_players_update pid (prob,x) (chance_prob,p1,p2) =
    prob +@ chance_prob,
    match pid with
    | Some: pid =>
        inl update pid' p = if pid = pid' then apply_observation p x else p
        update 0 p1, update 1 p2
    | None =>
        inl update p = apply_observation p x
        update p1, update p2

