type obj = $"object"
nominal tensor = obj
nominal net = obj
nominal distribution = obj
inl randn forall t {int}. (b,a : t * t) = 
    !!!!Import("torch")
    tensor $"torch.randn(!b,!a)"
inl forward l (x : tensor) = tensor $"!l.forward(!x)"
inl fromArray (x : array _) : tensor = 
    !!!!Import("torch")
    $"torch.from_numpy(!x)"
inl categorical (probs : tensor) : distribution = 
    !!!!Import("torch.distributions")
    $"torch.distributions.Categorical(probs=!probs)"
inl sample'' (x : distribution) : tensor = $"!x.sample()"
inl sample' (x : distribution) : tensor * tensor = inl v = sample'' x in $"!x.log_prob(!v)",v
inl sample (x : distribution) : log_prob * i64 = inl p,v = sample' x in log_prob $"!p.item()", $"!v.item()"

inl denseSize x = serialization.dense.array.size x
inl sparseSize x = serialization.sparse.int.size x

inl serializeDense schema x = 
    open serialization.dense.array
    inl (binary_array x) = serialize schema x
    fromArray x

inl serializeSparse schema x =
    open serialization.sparse.int
    serialize schema x

inl deserializeSparse schema x =
    open serialization.sparse.int
    deserialize schema (phash x)

inl deserializeMaskedSparse schema mask (x : i64) =
    open serialization.sparse.int
    deserialize schema (a64.index mask $"!x")

type serialized_net o a = {
    net : net
    input : serialization.dense.array.pu o
    output : serialization.sparse.int.pu a
    }

inl runMasked'' ({net input output} : serialized_net _ _) observation mask = 
    inl mask = a64.map (serializeSparse output) mask
    inl o = forward net (serializeDense input observation)
    inl o_mask = $"!o[!mask]" : tensor
    !!!!Import("torch.nn.functional")
    mask, ($"torch.nn.functional.softmax(!o_mask,-1)" : tensor)
inl runMasked' net obs mask = 
    inl _,x = runMasked'' net obs mask
    $"!x.cpu().detach().numpy()" : array serialization.dense.array.at
inl runMasked x observation mask = 
    inl mask, o_mask_dist = runMasked'' x observation mask
    inl o_mask_dist = categorical o_mask_dist
    inl p,v = sample o_mask_dist
    p, deserializeMaskedSparse x.output mask v

inl run ({net input output} : serialized_net _ _) observation =
    inl o = forward net (serializeDense input observation)
    !!!!Import("torch.nn.functional")
    inl o_dist = $"torch.nn.functional.softmax(!o,-1)" |> categorical
    inl p,v = sample o_dist
    p, deserializeSparse output v

// inl PyTorchImports =
//     !!!!Import("torch")
//     !!!!Import("torch.nn")
//     !!!!Import("torch.distributions")
//     !!!!Import("torch.nn.functional")