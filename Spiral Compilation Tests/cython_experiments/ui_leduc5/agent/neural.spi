open nodes
open leduc

let process (l : list (observation card action)) =
    let rec action (c,l) = function
        | Cons: (Observation: x), x' => (c,listm.rev l |> listm.toArray) :: action (x,Nil) x'
        | Cons: (Action: x), x' => action (c,x :: l) x'
        | Nil => (c,listm.rev l |> listm.toArray) :: Nil
    match listm.rev l with
    | Cons: (Observation: x), x' => action (x,Nil) x' |> listm.toArray
    | _ => failwith "Expected a card."

inl create_net () =
    !!!!Import("nets")

    inl input =
        open serialization.dense.array
        inl card = alt {king=Unit; queen=Unit; jack=Unit} : pu card
        inl action = alt {fold=Unit; call=Unit; raise=Unit} : pu action
        array 2 (card ** array 4 action)
    inl output =
        open serialization.sparse.int
        alt {fold=Unit; call=Unit; raise=Unit} : pu action

    open torch
    inl c,b,a = denseSize input, 64u64, sparseSize output
    {input output net = $"nets.small(!c,!b,!a)"}

// Samples.
inl funs net = player_funs { 
    action = fun {game_state player player' actions next} => next (torch.runMasked net (process (observations player)) actions,state player)
    terminal = fun _ => () 
    }
    
// Enumerates.
inl funs_buffer net add_buffer =
    player_funs {
        action = fun ({game_state player player' actions next} & x) =>
            inl actions_prob = torch.runMasked' net (process (observations player)) actions
            inl reward = 
                inl state = state player
                a64.fold2 (fun s prob a => inl prob = f64 prob in s + prob * next ((to_log_prob prob, a),state)) 0 actions_prob actions
            add_buffer {x with reward without next}
            reward
        terminal = fun _ => ()
        }

inl Init = uniform.init()
inl create net = {funs=funs net; init=Init}
inl create_buffer net add_buffer = {funs=funs_buffer net add_buffer; init=Init}