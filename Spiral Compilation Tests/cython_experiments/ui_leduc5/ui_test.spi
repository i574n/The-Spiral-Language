inl main () : () =
    !!!!Import("ui_leduc")
    inl root : obj = $"ui_leduc.root"
    let human_dispatch (((p1,p2,card : leduc.game_state),observations),dist,(next : _ -> ())) : () =
        inl trace = agent.human.show_trace p1.id observations
        inl actions : obj =
            inl actions = mut {fold= $"False"; call= $"False"; raise= $"False"}
            dist |> am.iter (fun x =>
                open leduc
                match x with
                | Fold => actions.fold <- fun () => next x
                | Call => actions.call <- fun () => next x
                | Raise => actions.raise <- fun () => next x
                )
            inl fold,call,raise = actions.fold, actions.call, actions.raise
            $"{'fold': !fold, 'call': !call, 'raise': !raise}"
        inl table_data : obj =
            inl show_card = 
                open leduc
                function King => 'K' | Queen => 'Q' | Jack => 'J'
            inl my_card = show_card p1.card
            inl my_pot = p1.pot
            inl op_card = show_card p2.card
            inl op_pot = p2.pot
            inl community_card = match card with Some: c => show_card c  | None => ' '
            $"{'my_card': !my_card, 'my_pot': !my_pot, 'op_card': !op_card, 'op_pot': !op_pot, 'community_card': !community_card}"
        $"!root.data = {'trace':!trace, 'actions': !actions, 'table_data': !table_data}"
    inl p1 = agent.neural.create(agent.neural.create_net())
    inl p2 = agent.human.create human_dispatch
    inl f (): () =
        open nodes
        leduc.game (nodes.cps.nodes_2p (p1.funs, p2.funs)) ((p1.init,p2.init),fun r => ())
    $"ui_leduc.start_game(!f)"