open hu_holdem

union oaction = ORoundOver | OFold | OCall | ORaiseTo: i32
inl holdem_obs_to_array (l : list (observation card action)) : a u64 oaction =
    l |> listm.fold (fun (s,is_round_over) => function
        | Observation: x => s, true
        | Action: x => 
            inl x = match x with Fold => OFold | Call => OCall | RaiseTo: x => ORaiseTo: x
            if is_round_over then x :: ORoundOver :: s, false
            else x :: s, false
        ) ([],false) 
    |> fst |> listm.toArray

inl suit_rank' x =
    open hand_scorer
    suit x, rank x
inl suit_rank (a,b) = suit_rank' a, suit_rank' b

inl holdem_extractor' ((player_state : pl2 card action),(p1,p2,community_card,stack,is_showdown : player * player * a u64 _ * i32 * bool),pid) = 
    assert (p1.id = pid) "Expected p1.id to match the pid."
    ((stack, p1.pot, p2.pot, suit_rank p1.hand, am.map suit_rank community_card), pl2_observations player_state pid), suit_rank p2.hand

inl holdem_extractor x = inl (a,b),c = holdem_extractor' x in a,holdem_obs_to_array b,c