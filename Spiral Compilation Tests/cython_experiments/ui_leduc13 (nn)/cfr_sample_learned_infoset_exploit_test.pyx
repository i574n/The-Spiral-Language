import numpy
cimport numpy
cimport libc.math
cdef class Mut0:
    cdef public unsigned long long v0
    cdef public object v1
    cdef public unsigned long long v2
    def __init__(self, unsigned long long v0, v1, unsigned long long v2): self.v0 = v0; self.v1 = v1; self.v2 = v2
cdef class Mut1:
    cdef public signed long v0
    def __init__(self, signed long v0): self.v0 = v0
ctypedef signed long US0
cdef class Heap0:
    cdef readonly object v0
    cdef readonly object v1
    cdef readonly object v2
    cdef readonly object v3
    def __init__(self, v0, v1, v2, v3): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3
ctypedef signed long US1
cdef class US2:
    cdef readonly signed long tag
cdef class US2_0(US2): # action_
    cdef readonly US0 v0
    def __init__(self, US0 v0): self.tag = 0; self.v0 = v0
cdef class US2_1(US2): # observation_
    cdef readonly US1 v0
    def __init__(self, US1 v0): self.tag = 1; self.v0 = v0
cdef class UH0:
    cdef readonly signed long tag
cdef class UH0_0(UH0): # cons_
    cdef readonly US2 v0
    cdef readonly UH0 v1
    def __init__(self, US2 v0, UH0 v1): self.tag = 0; self.v0 = v0; self.v1 = v1
cdef class UH0_1(UH0): # nil
    def __init__(self): self.tag = 1
cdef class US3:
    cdef readonly signed long tag
cdef class US3_0(US3): # none
    def __init__(self): self.tag = 0
cdef class US3_1(US3): # some_
    cdef readonly US1 v0
    def __init__(self, US1 v0): self.tag = 1; self.v0 = v0
cdef class Tuple0:
    cdef readonly double v0
    cdef readonly double v1
    cdef readonly US0 v2
    def __init__(self, double v0, double v1, US0 v2): self.v0 = v0; self.v1 = v1; self.v2 = v2
cdef class Tuple1:
    cdef readonly object v0
    cdef readonly object v1
    cdef readonly object v2
    cdef readonly object v3
    def __init__(self, v0, v1, v2, v3): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3
cdef class Tuple2:
    cdef readonly unsigned long long v0
    cdef readonly UH0 v1
    cdef readonly object v2
    cdef readonly object v3
    cdef readonly object v4
    cdef readonly object v5
    def __init__(self, unsigned long long v0, UH0 v1, v2, v3, v4, v5): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5
cdef class Tuple3:
    cdef readonly double v0
    cdef readonly double v1
    def __init__(self, double v0, double v1): self.v0 = v0; self.v1 = v1
cdef class Closure4():
    cdef UH0 v0
    cdef double v1
    cdef double v2
    cdef UH0 v3
    cdef double v4
    cdef double v5
    cdef double v6
    cdef Mut0 v7
    cdef Heap0 v8
    cdef signed long v9
    cdef US1 v10
    cdef US1 v11
    cdef unsigned char v12
    cdef signed long v13
    cdef US1 v14
    cdef unsigned char v15
    cdef signed long v16
    def __init__(self, UH0 v0, double v1, double v2, UH0 v3, double v4, double v5, double v6, Mut0 v7, Heap0 v8, signed long v9, US1 v10, US1 v11, unsigned char v12, signed long v13, US1 v14, unsigned char v15, signed long v16): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15; self.v16 = v16
    def __call__(self, Tuple0 args):
        cdef UH0 v0 = self.v0
        cdef double v1 = self.v1
        cdef double v2 = self.v2
        cdef UH0 v3 = self.v3
        cdef double v4 = self.v4
        cdef double v5 = self.v5
        cdef double v6 = self.v6
        cdef Mut0 v7 = self.v7
        cdef Heap0 v8 = self.v8
        cdef signed long v9 = self.v9
        cdef US1 v10 = self.v10
        cdef US1 v11 = self.v11
        cdef unsigned char v12 = self.v12
        cdef signed long v13 = self.v13
        cdef US1 v14 = self.v14
        cdef unsigned char v15 = self.v15
        cdef signed long v16 = self.v16
        cdef double v17 = args.v0
        cdef double v18 = args.v1
        cdef US0 v19 = args.v2
        cdef double v20
        cdef double v21
        cdef US2 v22
        cdef UH0 v23
        cdef US2 v24
        cdef UH0 v25
        v20 = v18 + v2
        v21 = v17 + v1
        v22 = US2_0(v19)
        v23 = UH0_0(v22, v3)
        del v22
        v24 = US2_0(v19)
        v25 = UH0_0(v24, v0)
        del v24
        return method13(v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v19, v6, v23, v4, v5, v25, v21, v20)
cdef class Closure3():
    cdef UH0 v0
    cdef double v1
    cdef double v2
    cdef UH0 v3
    cdef double v4
    cdef double v5
    cdef double v6
    cdef Mut0 v7
    cdef Heap0 v8
    cdef signed long v9
    cdef US1 v10
    cdef US1 v11
    cdef unsigned char v12
    cdef signed long v13
    cdef US1 v14
    cdef unsigned char v15
    cdef signed long v16
    def __init__(self, UH0 v0, double v1, double v2, UH0 v3, double v4, double v5, double v6, Mut0 v7, Heap0 v8, signed long v9, US1 v10, US1 v11, unsigned char v12, signed long v13, US1 v14, unsigned char v15, signed long v16): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15; self.v16 = v16
    def __call__(self, Tuple0 args):
        cdef UH0 v0 = self.v0
        cdef double v1 = self.v1
        cdef double v2 = self.v2
        cdef UH0 v3 = self.v3
        cdef double v4 = self.v4
        cdef double v5 = self.v5
        cdef double v6 = self.v6
        cdef Mut0 v7 = self.v7
        cdef Heap0 v8 = self.v8
        cdef signed long v9 = self.v9
        cdef US1 v10 = self.v10
        cdef US1 v11 = self.v11
        cdef unsigned char v12 = self.v12
        cdef signed long v13 = self.v13
        cdef US1 v14 = self.v14
        cdef unsigned char v15 = self.v15
        cdef signed long v16 = self.v16
        cdef double v17 = args.v0
        cdef double v18 = args.v1
        cdef US0 v19 = args.v2
        cdef double v20
        cdef double v21
        cdef US2 v22
        cdef UH0 v23
        cdef US2 v24
        cdef UH0 v25
        v20 = v18 + v5
        v21 = v17 + v4
        v22 = US2_0(v19)
        v23 = UH0_0(v22, v3)
        del v22
        v24 = US2_0(v19)
        v25 = UH0_0(v24, v0)
        del v24
        return method13(v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v19, v6, v23, v21, v20, v25, v1, v2)
cdef class Closure2():
    cdef UH0 v0
    cdef double v1
    cdef double v2
    cdef UH0 v3
    cdef double v4
    cdef double v5
    cdef double v6
    cdef Mut0 v7
    cdef Heap0 v8
    cdef US1 v9
    cdef unsigned char v10
    cdef signed long v11
    cdef US1 v12
    cdef unsigned char v13
    cdef signed long v14
    cdef US1 v15
    def __init__(self, UH0 v0, double v1, double v2, UH0 v3, double v4, double v5, double v6, Mut0 v7, Heap0 v8, US1 v9, unsigned char v10, signed long v11, US1 v12, unsigned char v13, signed long v14, US1 v15): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15
    def __call__(self, Tuple0 args):
        cdef UH0 v0 = self.v0
        cdef double v1 = self.v1
        cdef double v2 = self.v2
        cdef UH0 v3 = self.v3
        cdef double v4 = self.v4
        cdef double v5 = self.v5
        cdef double v6 = self.v6
        cdef Mut0 v7 = self.v7
        cdef Heap0 v8 = self.v8
        cdef US1 v9 = self.v9
        cdef unsigned char v10 = self.v10
        cdef signed long v11 = self.v11
        cdef US1 v12 = self.v12
        cdef unsigned char v13 = self.v13
        cdef signed long v14 = self.v14
        cdef US1 v15 = self.v15
        cdef double v16 = args.v0
        cdef double v17 = args.v1
        cdef US0 v18 = args.v2
        cdef double v19
        cdef double v20
        cdef US2 v21
        cdef UH0 v22
        cdef US2 v23
        cdef UH0 v24
        v19 = v17 + v5
        v20 = v16 + v4
        v21 = US2_0(v18)
        v22 = UH0_0(v21, v3)
        del v21
        v23 = US2_0(v18)
        v24 = UH0_0(v23, v0)
        del v23
        return method11(v7, v8, v9, v10, v11, v12, v13, v14, v15, v18, v6, v22, v20, v19, v24, v1, v2)
cdef class Closure5():
    cdef UH0 v0
    cdef double v1
    cdef double v2
    cdef UH0 v3
    cdef double v4
    cdef double v5
    cdef double v6
    cdef Mut0 v7
    cdef Heap0 v8
    cdef US1 v9
    cdef unsigned char v10
    cdef signed long v11
    cdef US1 v12
    cdef unsigned char v13
    cdef signed long v14
    cdef US1 v15
    def __init__(self, UH0 v0, double v1, double v2, UH0 v3, double v4, double v5, double v6, Mut0 v7, Heap0 v8, US1 v9, unsigned char v10, signed long v11, US1 v12, unsigned char v13, signed long v14, US1 v15): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15
    def __call__(self, Tuple0 args):
        cdef UH0 v0 = self.v0
        cdef double v1 = self.v1
        cdef double v2 = self.v2
        cdef UH0 v3 = self.v3
        cdef double v4 = self.v4
        cdef double v5 = self.v5
        cdef double v6 = self.v6
        cdef Mut0 v7 = self.v7
        cdef Heap0 v8 = self.v8
        cdef US1 v9 = self.v9
        cdef unsigned char v10 = self.v10
        cdef signed long v11 = self.v11
        cdef US1 v12 = self.v12
        cdef unsigned char v13 = self.v13
        cdef signed long v14 = self.v14
        cdef US1 v15 = self.v15
        cdef double v16 = args.v0
        cdef double v17 = args.v1
        cdef US0 v18 = args.v2
        cdef double v19
        cdef double v20
        cdef US2 v21
        cdef UH0 v22
        cdef US2 v23
        cdef UH0 v24
        v19 = v17 + v2
        v20 = v16 + v1
        v21 = US2_0(v18)
        v22 = UH0_0(v21, v3)
        del v21
        v23 = US2_0(v18)
        v24 = UH0_0(v23, v0)
        del v23
        return method11(v7, v8, v9, v10, v11, v12, v13, v14, v15, v18, v6, v22, v4, v5, v24, v20, v19)
cdef class Closure7():
    cdef UH0 v0
    cdef double v1
    cdef double v2
    cdef UH0 v3
    cdef double v4
    cdef double v5
    cdef double v6
    cdef Mut0 v7
    cdef Heap0 v8
    cdef object v9
    cdef signed long v10
    cdef US1 v11
    cdef unsigned char v12
    cdef signed long v13
    cdef US1 v14
    cdef unsigned char v15
    cdef signed long v16
    def __init__(self, UH0 v0, double v1, double v2, UH0 v3, double v4, double v5, double v6, Mut0 v7, Heap0 v8, numpy.ndarray[signed long,ndim=1] v9, signed long v10, US1 v11, unsigned char v12, signed long v13, US1 v14, unsigned char v15, signed long v16): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15; self.v16 = v16
    def __call__(self, Tuple0 args):
        cdef UH0 v0 = self.v0
        cdef double v1 = self.v1
        cdef double v2 = self.v2
        cdef UH0 v3 = self.v3
        cdef double v4 = self.v4
        cdef double v5 = self.v5
        cdef double v6 = self.v6
        cdef Mut0 v7 = self.v7
        cdef Heap0 v8 = self.v8
        cdef numpy.ndarray[signed long,ndim=1] v9 = self.v9
        cdef signed long v10 = self.v10
        cdef US1 v11 = self.v11
        cdef unsigned char v12 = self.v12
        cdef signed long v13 = self.v13
        cdef US1 v14 = self.v14
        cdef unsigned char v15 = self.v15
        cdef signed long v16 = self.v16
        cdef double v17 = args.v0
        cdef double v18 = args.v1
        cdef US0 v19 = args.v2
        cdef double v20
        cdef double v21
        cdef US2 v22
        cdef UH0 v23
        cdef US2 v24
        cdef UH0 v25
        v20 = v18 + v2
        v21 = v17 + v1
        v22 = US2_0(v19)
        v23 = UH0_0(v22, v3)
        del v22
        v24 = US2_0(v19)
        v25 = UH0_0(v24, v0)
        del v24
        return method36(v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v19, v6, v23, v4, v5, v25, v21, v20)
cdef class Closure6():
    cdef UH0 v0
    cdef double v1
    cdef double v2
    cdef UH0 v3
    cdef double v4
    cdef double v5
    cdef double v6
    cdef Mut0 v7
    cdef Heap0 v8
    cdef object v9
    cdef signed long v10
    cdef US1 v11
    cdef unsigned char v12
    cdef signed long v13
    cdef US1 v14
    cdef unsigned char v15
    cdef signed long v16
    def __init__(self, UH0 v0, double v1, double v2, UH0 v3, double v4, double v5, double v6, Mut0 v7, Heap0 v8, numpy.ndarray[signed long,ndim=1] v9, signed long v10, US1 v11, unsigned char v12, signed long v13, US1 v14, unsigned char v15, signed long v16): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15; self.v16 = v16
    def __call__(self, Tuple0 args):
        cdef UH0 v0 = self.v0
        cdef double v1 = self.v1
        cdef double v2 = self.v2
        cdef UH0 v3 = self.v3
        cdef double v4 = self.v4
        cdef double v5 = self.v5
        cdef double v6 = self.v6
        cdef Mut0 v7 = self.v7
        cdef Heap0 v8 = self.v8
        cdef numpy.ndarray[signed long,ndim=1] v9 = self.v9
        cdef signed long v10 = self.v10
        cdef US1 v11 = self.v11
        cdef unsigned char v12 = self.v12
        cdef signed long v13 = self.v13
        cdef US1 v14 = self.v14
        cdef unsigned char v15 = self.v15
        cdef signed long v16 = self.v16
        cdef double v17 = args.v0
        cdef double v18 = args.v1
        cdef US0 v19 = args.v2
        cdef double v20
        cdef double v21
        cdef US2 v22
        cdef UH0 v23
        cdef US2 v24
        cdef UH0 v25
        v20 = v18 + v5
        v21 = v17 + v4
        v22 = US2_0(v19)
        v23 = UH0_0(v22, v3)
        del v22
        v24 = US2_0(v19)
        v25 = UH0_0(v24, v0)
        del v24
        return method36(v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v19, v6, v23, v21, v20, v25, v1, v2)
cdef class Closure1():
    cdef UH0 v0
    cdef double v1
    cdef double v2
    cdef UH0 v3
    cdef double v4
    cdef double v5
    cdef double v6
    cdef Mut0 v7
    cdef Heap0 v8
    cdef object v9
    cdef signed long v10
    cdef US1 v11
    cdef unsigned char v12
    cdef signed long v13
    cdef US1 v14
    cdef unsigned char v15
    def __init__(self, UH0 v0, double v1, double v2, UH0 v3, double v4, double v5, double v6, Mut0 v7, Heap0 v8, numpy.ndarray[signed long,ndim=1] v9, signed long v10, US1 v11, unsigned char v12, signed long v13, US1 v14, unsigned char v15): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15
    def __call__(self, Tuple0 args):
        cdef UH0 v0 = self.v0
        cdef double v1 = self.v1
        cdef double v2 = self.v2
        cdef UH0 v3 = self.v3
        cdef double v4 = self.v4
        cdef double v5 = self.v5
        cdef double v6 = self.v6
        cdef Mut0 v7 = self.v7
        cdef Heap0 v8 = self.v8
        cdef numpy.ndarray[signed long,ndim=1] v9 = self.v9
        cdef signed long v10 = self.v10
        cdef US1 v11 = self.v11
        cdef unsigned char v12 = self.v12
        cdef signed long v13 = self.v13
        cdef US1 v14 = self.v14
        cdef unsigned char v15 = self.v15
        cdef double v16 = args.v0
        cdef double v17 = args.v1
        cdef US0 v18 = args.v2
        cdef double v19
        cdef double v20
        cdef US2 v21
        cdef UH0 v22
        cdef US2 v23
        cdef UH0 v24
        v19 = v17 + v5
        v20 = v16 + v4
        v21 = US2_0(v18)
        v22 = UH0_0(v21, v3)
        del v21
        v23 = US2_0(v18)
        v24 = UH0_0(v23, v0)
        del v23
        return method9(v7, v8, v9, v10, v11, v12, v13, v14, v15, v18, v6, v22, v20, v19, v24, v1, v2)
cdef class Closure8():
    cdef UH0 v0
    cdef double v1
    cdef double v2
    cdef UH0 v3
    cdef double v4
    cdef double v5
    cdef double v6
    cdef Mut0 v7
    cdef Heap0 v8
    cdef object v9
    cdef signed long v10
    cdef US1 v11
    cdef unsigned char v12
    cdef signed long v13
    cdef US1 v14
    cdef unsigned char v15
    def __init__(self, UH0 v0, double v1, double v2, UH0 v3, double v4, double v5, double v6, Mut0 v7, Heap0 v8, numpy.ndarray[signed long,ndim=1] v9, signed long v10, US1 v11, unsigned char v12, signed long v13, US1 v14, unsigned char v15): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15
    def __call__(self, Tuple0 args):
        cdef UH0 v0 = self.v0
        cdef double v1 = self.v1
        cdef double v2 = self.v2
        cdef UH0 v3 = self.v3
        cdef double v4 = self.v4
        cdef double v5 = self.v5
        cdef double v6 = self.v6
        cdef Mut0 v7 = self.v7
        cdef Heap0 v8 = self.v8
        cdef numpy.ndarray[signed long,ndim=1] v9 = self.v9
        cdef signed long v10 = self.v10
        cdef US1 v11 = self.v11
        cdef unsigned char v12 = self.v12
        cdef signed long v13 = self.v13
        cdef US1 v14 = self.v14
        cdef unsigned char v15 = self.v15
        cdef double v16 = args.v0
        cdef double v17 = args.v1
        cdef US0 v18 = args.v2
        cdef double v19
        cdef double v20
        cdef US2 v21
        cdef UH0 v22
        cdef US2 v23
        cdef UH0 v24
        v19 = v17 + v2
        v20 = v16 + v1
        v21 = US2_0(v18)
        v22 = UH0_0(v21, v3)
        del v21
        v23 = US2_0(v18)
        v24 = UH0_0(v23, v0)
        del v23
        return method9(v7, v8, v9, v10, v11, v12, v13, v14, v15, v18, v6, v22, v4, v5, v24, v20, v19)
cdef class Closure0():
    cdef UH0 v0
    cdef double v1
    cdef double v2
    cdef UH0 v3
    cdef double v4
    cdef double v5
    cdef double v6
    cdef Mut0 v7
    cdef US1 v8
    cdef US1 v9
    cdef Heap0 v10
    cdef object v11
    def __init__(self, UH0 v0, double v1, double v2, UH0 v3, double v4, double v5, double v6, Mut0 v7, US1 v8, US1 v9, Heap0 v10, numpy.ndarray[signed long,ndim=1] v11): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11
    def __call__(self, Tuple0 args):
        cdef UH0 v0 = self.v0
        cdef double v1 = self.v1
        cdef double v2 = self.v2
        cdef UH0 v3 = self.v3
        cdef double v4 = self.v4
        cdef double v5 = self.v5
        cdef double v6 = self.v6
        cdef Mut0 v7 = self.v7
        cdef US1 v8 = self.v8
        cdef US1 v9 = self.v9
        cdef Heap0 v10 = self.v10
        cdef numpy.ndarray[signed long,ndim=1] v11 = self.v11
        cdef double v12 = args.v0
        cdef double v13 = args.v1
        cdef US0 v14 = args.v2
        cdef double v15
        cdef double v16
        cdef US2 v17
        cdef UH0 v18
        cdef US2 v19
        cdef UH0 v20
        v15 = v13 + v5
        v16 = v12 + v4
        v17 = US2_0(v14)
        v18 = UH0_0(v17, v3)
        del v17
        v19 = US2_0(v14)
        v20 = UH0_0(v19, v0)
        del v19
        return method7(v7, v8, v9, v10, v11, v14, v6, v18, v16, v15, v20, v1, v2)
cdef class Closure13():
    cdef UH0 v0
    cdef double v1
    cdef double v2
    cdef UH0 v3
    cdef double v4
    cdef double v5
    cdef double v6
    cdef Mut0 v7
    cdef Heap0 v8
    cdef signed long v9
    cdef US1 v10
    cdef US1 v11
    cdef unsigned char v12
    cdef signed long v13
    cdef US1 v14
    cdef unsigned char v15
    cdef signed long v16
    def __init__(self, UH0 v0, double v1, double v2, UH0 v3, double v4, double v5, double v6, Mut0 v7, Heap0 v8, signed long v9, US1 v10, US1 v11, unsigned char v12, signed long v13, US1 v14, unsigned char v15, signed long v16): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15; self.v16 = v16
    def __call__(self, Tuple0 args):
        cdef UH0 v0 = self.v0
        cdef double v1 = self.v1
        cdef double v2 = self.v2
        cdef UH0 v3 = self.v3
        cdef double v4 = self.v4
        cdef double v5 = self.v5
        cdef double v6 = self.v6
        cdef Mut0 v7 = self.v7
        cdef Heap0 v8 = self.v8
        cdef signed long v9 = self.v9
        cdef US1 v10 = self.v10
        cdef US1 v11 = self.v11
        cdef unsigned char v12 = self.v12
        cdef signed long v13 = self.v13
        cdef US1 v14 = self.v14
        cdef unsigned char v15 = self.v15
        cdef signed long v16 = self.v16
        cdef double v17 = args.v0
        cdef double v18 = args.v1
        cdef US0 v19 = args.v2
        cdef double v20
        cdef double v21
        cdef US2 v22
        cdef UH0 v23
        cdef US2 v24
        cdef UH0 v25
        v20 = v18 + v2
        v21 = v17 + v1
        v22 = US2_0(v19)
        v23 = UH0_0(v22, v3)
        del v22
        v24 = US2_0(v19)
        v25 = UH0_0(v24, v0)
        del v24
        return method43(v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v19, v6, v23, v4, v5, v25, v21, v20)
cdef class Closure12():
    cdef UH0 v0
    cdef double v1
    cdef double v2
    cdef UH0 v3
    cdef double v4
    cdef double v5
    cdef double v6
    cdef Mut0 v7
    cdef Heap0 v8
    cdef signed long v9
    cdef US1 v10
    cdef US1 v11
    cdef unsigned char v12
    cdef signed long v13
    cdef US1 v14
    cdef unsigned char v15
    cdef signed long v16
    def __init__(self, UH0 v0, double v1, double v2, UH0 v3, double v4, double v5, double v6, Mut0 v7, Heap0 v8, signed long v9, US1 v10, US1 v11, unsigned char v12, signed long v13, US1 v14, unsigned char v15, signed long v16): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15; self.v16 = v16
    def __call__(self, Tuple0 args):
        cdef UH0 v0 = self.v0
        cdef double v1 = self.v1
        cdef double v2 = self.v2
        cdef UH0 v3 = self.v3
        cdef double v4 = self.v4
        cdef double v5 = self.v5
        cdef double v6 = self.v6
        cdef Mut0 v7 = self.v7
        cdef Heap0 v8 = self.v8
        cdef signed long v9 = self.v9
        cdef US1 v10 = self.v10
        cdef US1 v11 = self.v11
        cdef unsigned char v12 = self.v12
        cdef signed long v13 = self.v13
        cdef US1 v14 = self.v14
        cdef unsigned char v15 = self.v15
        cdef signed long v16 = self.v16
        cdef double v17 = args.v0
        cdef double v18 = args.v1
        cdef US0 v19 = args.v2
        cdef double v20
        cdef double v21
        cdef US2 v22
        cdef UH0 v23
        cdef US2 v24
        cdef UH0 v25
        v20 = v18 + v5
        v21 = v17 + v4
        v22 = US2_0(v19)
        v23 = UH0_0(v22, v3)
        del v22
        v24 = US2_0(v19)
        v25 = UH0_0(v24, v0)
        del v24
        return method43(v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v19, v6, v23, v21, v20, v25, v1, v2)
cdef class Closure11():
    cdef UH0 v0
    cdef double v1
    cdef double v2
    cdef UH0 v3
    cdef double v4
    cdef double v5
    cdef double v6
    cdef Mut0 v7
    cdef Heap0 v8
    cdef US1 v9
    cdef unsigned char v10
    cdef signed long v11
    cdef US1 v12
    cdef unsigned char v13
    cdef signed long v14
    cdef US1 v15
    def __init__(self, UH0 v0, double v1, double v2, UH0 v3, double v4, double v5, double v6, Mut0 v7, Heap0 v8, US1 v9, unsigned char v10, signed long v11, US1 v12, unsigned char v13, signed long v14, US1 v15): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15
    def __call__(self, Tuple0 args):
        cdef UH0 v0 = self.v0
        cdef double v1 = self.v1
        cdef double v2 = self.v2
        cdef UH0 v3 = self.v3
        cdef double v4 = self.v4
        cdef double v5 = self.v5
        cdef double v6 = self.v6
        cdef Mut0 v7 = self.v7
        cdef Heap0 v8 = self.v8
        cdef US1 v9 = self.v9
        cdef unsigned char v10 = self.v10
        cdef signed long v11 = self.v11
        cdef US1 v12 = self.v12
        cdef unsigned char v13 = self.v13
        cdef signed long v14 = self.v14
        cdef US1 v15 = self.v15
        cdef double v16 = args.v0
        cdef double v17 = args.v1
        cdef US0 v18 = args.v2
        cdef double v19
        cdef double v20
        cdef US2 v21
        cdef UH0 v22
        cdef US2 v23
        cdef UH0 v24
        v19 = v17 + v5
        v20 = v16 + v4
        v21 = US2_0(v18)
        v22 = UH0_0(v21, v3)
        del v21
        v23 = US2_0(v18)
        v24 = UH0_0(v23, v0)
        del v23
        return method42(v7, v8, v9, v10, v11, v12, v13, v14, v15, v18, v6, v22, v20, v19, v24, v1, v2)
cdef class Closure14():
    cdef UH0 v0
    cdef double v1
    cdef double v2
    cdef UH0 v3
    cdef double v4
    cdef double v5
    cdef double v6
    cdef Mut0 v7
    cdef Heap0 v8
    cdef US1 v9
    cdef unsigned char v10
    cdef signed long v11
    cdef US1 v12
    cdef unsigned char v13
    cdef signed long v14
    cdef US1 v15
    def __init__(self, UH0 v0, double v1, double v2, UH0 v3, double v4, double v5, double v6, Mut0 v7, Heap0 v8, US1 v9, unsigned char v10, signed long v11, US1 v12, unsigned char v13, signed long v14, US1 v15): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15
    def __call__(self, Tuple0 args):
        cdef UH0 v0 = self.v0
        cdef double v1 = self.v1
        cdef double v2 = self.v2
        cdef UH0 v3 = self.v3
        cdef double v4 = self.v4
        cdef double v5 = self.v5
        cdef double v6 = self.v6
        cdef Mut0 v7 = self.v7
        cdef Heap0 v8 = self.v8
        cdef US1 v9 = self.v9
        cdef unsigned char v10 = self.v10
        cdef signed long v11 = self.v11
        cdef US1 v12 = self.v12
        cdef unsigned char v13 = self.v13
        cdef signed long v14 = self.v14
        cdef US1 v15 = self.v15
        cdef double v16 = args.v0
        cdef double v17 = args.v1
        cdef US0 v18 = args.v2
        cdef double v19
        cdef double v20
        cdef US2 v21
        cdef UH0 v22
        cdef US2 v23
        cdef UH0 v24
        v19 = v17 + v2
        v20 = v16 + v1
        v21 = US2_0(v18)
        v22 = UH0_0(v21, v3)
        del v21
        v23 = US2_0(v18)
        v24 = UH0_0(v23, v0)
        del v23
        return method42(v7, v8, v9, v10, v11, v12, v13, v14, v15, v18, v6, v22, v4, v5, v24, v20, v19)
cdef class Closure16():
    cdef UH0 v0
    cdef double v1
    cdef double v2
    cdef UH0 v3
    cdef double v4
    cdef double v5
    cdef double v6
    cdef Mut0 v7
    cdef Heap0 v8
    cdef object v9
    cdef signed long v10
    cdef US1 v11
    cdef unsigned char v12
    cdef signed long v13
    cdef US1 v14
    cdef unsigned char v15
    cdef signed long v16
    def __init__(self, UH0 v0, double v1, double v2, UH0 v3, double v4, double v5, double v6, Mut0 v7, Heap0 v8, numpy.ndarray[signed long,ndim=1] v9, signed long v10, US1 v11, unsigned char v12, signed long v13, US1 v14, unsigned char v15, signed long v16): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15; self.v16 = v16
    def __call__(self, Tuple0 args):
        cdef UH0 v0 = self.v0
        cdef double v1 = self.v1
        cdef double v2 = self.v2
        cdef UH0 v3 = self.v3
        cdef double v4 = self.v4
        cdef double v5 = self.v5
        cdef double v6 = self.v6
        cdef Mut0 v7 = self.v7
        cdef Heap0 v8 = self.v8
        cdef numpy.ndarray[signed long,ndim=1] v9 = self.v9
        cdef signed long v10 = self.v10
        cdef US1 v11 = self.v11
        cdef unsigned char v12 = self.v12
        cdef signed long v13 = self.v13
        cdef US1 v14 = self.v14
        cdef unsigned char v15 = self.v15
        cdef signed long v16 = self.v16
        cdef double v17 = args.v0
        cdef double v18 = args.v1
        cdef US0 v19 = args.v2
        cdef double v20
        cdef double v21
        cdef US2 v22
        cdef UH0 v23
        cdef US2 v24
        cdef UH0 v25
        v20 = v18 + v2
        v21 = v17 + v1
        v22 = US2_0(v19)
        v23 = UH0_0(v22, v3)
        del v22
        v24 = US2_0(v19)
        v25 = UH0_0(v24, v0)
        del v24
        return method44(v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v19, v6, v23, v4, v5, v25, v21, v20)
cdef class Closure15():
    cdef UH0 v0
    cdef double v1
    cdef double v2
    cdef UH0 v3
    cdef double v4
    cdef double v5
    cdef double v6
    cdef Mut0 v7
    cdef Heap0 v8
    cdef object v9
    cdef signed long v10
    cdef US1 v11
    cdef unsigned char v12
    cdef signed long v13
    cdef US1 v14
    cdef unsigned char v15
    cdef signed long v16
    def __init__(self, UH0 v0, double v1, double v2, UH0 v3, double v4, double v5, double v6, Mut0 v7, Heap0 v8, numpy.ndarray[signed long,ndim=1] v9, signed long v10, US1 v11, unsigned char v12, signed long v13, US1 v14, unsigned char v15, signed long v16): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15; self.v16 = v16
    def __call__(self, Tuple0 args):
        cdef UH0 v0 = self.v0
        cdef double v1 = self.v1
        cdef double v2 = self.v2
        cdef UH0 v3 = self.v3
        cdef double v4 = self.v4
        cdef double v5 = self.v5
        cdef double v6 = self.v6
        cdef Mut0 v7 = self.v7
        cdef Heap0 v8 = self.v8
        cdef numpy.ndarray[signed long,ndim=1] v9 = self.v9
        cdef signed long v10 = self.v10
        cdef US1 v11 = self.v11
        cdef unsigned char v12 = self.v12
        cdef signed long v13 = self.v13
        cdef US1 v14 = self.v14
        cdef unsigned char v15 = self.v15
        cdef signed long v16 = self.v16
        cdef double v17 = args.v0
        cdef double v18 = args.v1
        cdef US0 v19 = args.v2
        cdef double v20
        cdef double v21
        cdef US2 v22
        cdef UH0 v23
        cdef US2 v24
        cdef UH0 v25
        v20 = v18 + v5
        v21 = v17 + v4
        v22 = US2_0(v19)
        v23 = UH0_0(v22, v3)
        del v22
        v24 = US2_0(v19)
        v25 = UH0_0(v24, v0)
        del v24
        return method44(v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v19, v6, v23, v21, v20, v25, v1, v2)
cdef class Closure10():
    cdef UH0 v0
    cdef double v1
    cdef double v2
    cdef UH0 v3
    cdef double v4
    cdef double v5
    cdef double v6
    cdef Mut0 v7
    cdef Heap0 v8
    cdef object v9
    cdef signed long v10
    cdef US1 v11
    cdef unsigned char v12
    cdef signed long v13
    cdef US1 v14
    cdef unsigned char v15
    def __init__(self, UH0 v0, double v1, double v2, UH0 v3, double v4, double v5, double v6, Mut0 v7, Heap0 v8, numpy.ndarray[signed long,ndim=1] v9, signed long v10, US1 v11, unsigned char v12, signed long v13, US1 v14, unsigned char v15): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15
    def __call__(self, Tuple0 args):
        cdef UH0 v0 = self.v0
        cdef double v1 = self.v1
        cdef double v2 = self.v2
        cdef UH0 v3 = self.v3
        cdef double v4 = self.v4
        cdef double v5 = self.v5
        cdef double v6 = self.v6
        cdef Mut0 v7 = self.v7
        cdef Heap0 v8 = self.v8
        cdef numpy.ndarray[signed long,ndim=1] v9 = self.v9
        cdef signed long v10 = self.v10
        cdef US1 v11 = self.v11
        cdef unsigned char v12 = self.v12
        cdef signed long v13 = self.v13
        cdef US1 v14 = self.v14
        cdef unsigned char v15 = self.v15
        cdef double v16 = args.v0
        cdef double v17 = args.v1
        cdef US0 v18 = args.v2
        cdef double v19
        cdef double v20
        cdef US2 v21
        cdef UH0 v22
        cdef US2 v23
        cdef UH0 v24
        v19 = v17 + v5
        v20 = v16 + v4
        v21 = US2_0(v18)
        v22 = UH0_0(v21, v3)
        del v21
        v23 = US2_0(v18)
        v24 = UH0_0(v23, v0)
        del v23
        return method40(v7, v8, v9, v10, v11, v12, v13, v14, v15, v18, v6, v22, v20, v19, v24, v1, v2)
cdef class Closure17():
    cdef UH0 v0
    cdef double v1
    cdef double v2
    cdef UH0 v3
    cdef double v4
    cdef double v5
    cdef double v6
    cdef Mut0 v7
    cdef Heap0 v8
    cdef object v9
    cdef signed long v10
    cdef US1 v11
    cdef unsigned char v12
    cdef signed long v13
    cdef US1 v14
    cdef unsigned char v15
    def __init__(self, UH0 v0, double v1, double v2, UH0 v3, double v4, double v5, double v6, Mut0 v7, Heap0 v8, numpy.ndarray[signed long,ndim=1] v9, signed long v10, US1 v11, unsigned char v12, signed long v13, US1 v14, unsigned char v15): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11; self.v12 = v12; self.v13 = v13; self.v14 = v14; self.v15 = v15
    def __call__(self, Tuple0 args):
        cdef UH0 v0 = self.v0
        cdef double v1 = self.v1
        cdef double v2 = self.v2
        cdef UH0 v3 = self.v3
        cdef double v4 = self.v4
        cdef double v5 = self.v5
        cdef double v6 = self.v6
        cdef Mut0 v7 = self.v7
        cdef Heap0 v8 = self.v8
        cdef numpy.ndarray[signed long,ndim=1] v9 = self.v9
        cdef signed long v10 = self.v10
        cdef US1 v11 = self.v11
        cdef unsigned char v12 = self.v12
        cdef signed long v13 = self.v13
        cdef US1 v14 = self.v14
        cdef unsigned char v15 = self.v15
        cdef double v16 = args.v0
        cdef double v17 = args.v1
        cdef US0 v18 = args.v2
        cdef double v19
        cdef double v20
        cdef US2 v21
        cdef UH0 v22
        cdef US2 v23
        cdef UH0 v24
        v19 = v17 + v2
        v20 = v16 + v1
        v21 = US2_0(v18)
        v22 = UH0_0(v21, v3)
        del v21
        v23 = US2_0(v18)
        v24 = UH0_0(v23, v0)
        del v23
        return method40(v7, v8, v9, v10, v11, v12, v13, v14, v15, v18, v6, v22, v4, v5, v24, v20, v19)
cdef class Closure9():
    cdef UH0 v0
    cdef double v1
    cdef double v2
    cdef UH0 v3
    cdef double v4
    cdef double v5
    cdef double v6
    cdef Mut0 v7
    cdef US1 v8
    cdef US1 v9
    cdef Heap0 v10
    cdef object v11
    def __init__(self, UH0 v0, double v1, double v2, UH0 v3, double v4, double v5, double v6, Mut0 v7, US1 v8, US1 v9, Heap0 v10, numpy.ndarray[signed long,ndim=1] v11): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3; self.v4 = v4; self.v5 = v5; self.v6 = v6; self.v7 = v7; self.v8 = v8; self.v9 = v9; self.v10 = v10; self.v11 = v11
    def __call__(self, Tuple0 args):
        cdef UH0 v0 = self.v0
        cdef double v1 = self.v1
        cdef double v2 = self.v2
        cdef UH0 v3 = self.v3
        cdef double v4 = self.v4
        cdef double v5 = self.v5
        cdef double v6 = self.v6
        cdef Mut0 v7 = self.v7
        cdef US1 v8 = self.v8
        cdef US1 v9 = self.v9
        cdef Heap0 v10 = self.v10
        cdef numpy.ndarray[signed long,ndim=1] v11 = self.v11
        cdef double v12 = args.v0
        cdef double v13 = args.v1
        cdef US0 v14 = args.v2
        cdef double v15
        cdef double v16
        cdef US2 v17
        cdef UH0 v18
        cdef US2 v19
        cdef UH0 v20
        v15 = v13 + v5
        v16 = v12 + v4
        v17 = US2_0(v14)
        v18 = UH0_0(v17, v3)
        del v17
        v19 = US2_0(v14)
        v20 = UH0_0(v19, v0)
        del v19
        return method39(v7, v8, v9, v10, v11, v14, v6, v18, v16, v15, v20, v1, v2)
cdef class Mut2:
    cdef public unsigned long long v0
    cdef public object v1
    cdef public unsigned long long v2
    def __init__(self, unsigned long long v0, v1, unsigned long long v2): self.v0 = v0; self.v1 = v1; self.v2 = v2
cdef class Mut3:
    cdef public object v0
    cdef public object v1
    cdef public object v2
    cdef public unsigned long long v3
    def __init__(self, v0, v1, v2, unsigned long long v3): self.v0 = v0; self.v1 = v1; self.v2 = v2; self.v3 = v3
cdef class Tuple4:
    cdef readonly unsigned long long v0
    cdef readonly UH0 v1
    cdef readonly Mut3 v2
    def __init__(self, unsigned long long v0, UH0 v1, Mut3 v2): self.v0 = v0; self.v1 = v1; self.v2 = v2
cdef void method1(unsigned long long v0, numpy.ndarray[object,ndim=1] v1, unsigned long long v2):
    cdef bint v3
    cdef unsigned long long v4
    cdef list v5
    v3 = v2 < v0
    if v3:
        v4 = v2 + (<unsigned long long>1)
        v5 = [None]*(<unsigned long long>0)
        v1[v2] = v5
        del v5
        method1(v0, v1, v4)
    else:
        pass
cdef Mut0 method0(unsigned long long v0, unsigned long long v1):
    cdef numpy.ndarray[object,ndim=1] v3
    cdef unsigned long long v4
    cdef Mut0 v5
    v3 = numpy.empty(v1,dtype=object)
    v4 = (<unsigned long long>0)
    method1(v1, v3, v4)
    v5 = Mut0(v0, v3, (<unsigned long long>0))
    del v3
    return v5
cdef bint method2(Mut1 v0):
    cdef signed long v1
    v1 = v0.v0
    return v1 < (<signed long>20)
cdef bint method3(Mut1 v0):
    cdef signed long v1
    v1 = v0.v0
    return v1 < (<signed long>200000)
cdef void method4(unsigned long long v0, unsigned long long v1, numpy.ndarray[signed long,ndim=1] v2, numpy.ndarray[signed long,ndim=1] v3, unsigned long long v4):
    cdef bint v5
    cdef unsigned long long v6
    cdef bint v7
    cdef unsigned long long v8
    cdef US1 v9
    v5 = v4 < v0
    if v5:
        v6 = v4 + (<unsigned long long>1)
        v7 = v1 <= v4
        if v7:
            v8 = v6
        else:
            v8 = v4
        v9 = v2[v8]
        v3[v4] = v9
        method4(v0, v1, v2, v3, v6)
    else:
        pass
cdef numpy.ndarray[signed long,ndim=1] method8(Heap0 v0, US1 v1, unsigned char v2, signed long v3, US1 v4, unsigned char v5, signed long v6):
    cdef bint v7
    cdef bint v9
    v7 = (<signed long>0) < v6
    if v7:
        return v0.v2
    else:
        v9 = (<signed long>0) == v6
        if v9:
            return v0.v0
        else:
            raise Exception("invalid action state")
cdef numpy.ndarray[signed long,ndim=1] method12(Heap0 v0, US1 v1, unsigned char v2, signed long v3, US1 v4, unsigned char v5, signed long v6, signed long v7):
    cdef bint v8
    cdef bint v10
    cdef bint v13
    cdef bint v15
    v8 = (<signed long>0) < v7
    if v8:
        v10 = v6 == v3
    else:
        v10 = 0
    if v10:
        return v0.v2
    else:
        if v8:
            return v0.v1
        else:
            v13 = (<signed long>0) == v7
            if v13:
                v15 = v6 == v3
            else:
                v15 = 0
            if v15:
                return v0.v0
            else:
                if v13:
                    return v0.v3
                else:
                    raise Exception("invalid action state")
cdef signed long method14(US1 v0):
    if v0 == 0: # jack
        return (<signed long>0)
    elif v0 == 1: # king
        return (<signed long>2)
    elif v0 == 2: # queen
        return (<signed long>1)
cdef unsigned long long method17(UH0 v0):
    cdef US2 v1
    cdef UH0 v2
    cdef unsigned long long v35
    cdef US0 v3
    cdef unsigned long long v13
    cdef unsigned long long v4
    cdef unsigned long long v5
    cdef unsigned long long v7
    cdef unsigned long long v8
    cdef unsigned long long v10
    cdef unsigned long long v11
    cdef unsigned long long v14
    cdef unsigned long long v15
    cdef unsigned long long v16
    cdef unsigned long long v17
    cdef US1 v19
    cdef unsigned long long v29
    cdef unsigned long long v20
    cdef unsigned long long v21
    cdef unsigned long long v23
    cdef unsigned long long v24
    cdef unsigned long long v26
    cdef unsigned long long v27
    cdef unsigned long long v30
    cdef unsigned long long v31
    cdef unsigned long long v32
    cdef unsigned long long v33
    cdef unsigned long long v36
    cdef unsigned long long v37
    cdef unsigned long long v38
    cdef unsigned long long v39
    cdef unsigned long long v40
    cdef unsigned long long v41
    cdef unsigned long long v42
    cdef unsigned long long v44
    cdef unsigned long long v45
    if v0.tag == 0: # cons_
        v1 = (<UH0_0>v0).v0; v2 = (<UH0_0>v0).v1
        if v1.tag == 0: # action_
            v3 = (<US2_0>v1).v0
            if v3 == 0: # call
                v4 = (<signed long>0)
                v5 = (<unsigned long long>1) + v4
                v13 = (<unsigned long long>9223372036854765835) * v5
            elif v3 == 1: # fold
                v7 = (<signed long>1)
                v8 = (<unsigned long long>1) + v7
                v13 = (<unsigned long long>9223372036854765835) * v8
            elif v3 == 2: # raise
                v10 = (<signed long>2)
                v11 = (<unsigned long long>1) + v10
                v13 = (<unsigned long long>9223372036854765835) * v11
            v14 = (<unsigned long long>9223372036854775807) + v13
            v15 = v14 * (<unsigned long long>9973)
            v16 = (<signed long>0)
            v17 = (<unsigned long long>1) + v16
            v35 = v15 * v17
        elif v1.tag == 1: # observation_
            v19 = (<US2_1>v1).v0
            if v19 == 0: # jack
                v20 = (<signed long>0)
                v21 = (<unsigned long long>1) + v20
                v29 = (<unsigned long long>9223372036854765835) * v21
            elif v19 == 1: # king
                v23 = (<signed long>1)
                v24 = (<unsigned long long>1) + v23
                v29 = (<unsigned long long>9223372036854765835) * v24
            elif v19 == 2: # queen
                v26 = (<signed long>2)
                v27 = (<unsigned long long>1) + v26
                v29 = (<unsigned long long>9223372036854765835) * v27
            v30 = (<unsigned long long>9223372036854775807) + v29
            v31 = v30 * (<unsigned long long>9973)
            v32 = (<signed long>1)
            v33 = (<unsigned long long>1) + v32
            v35 = v31 * v33
        del v1
        v36 = v35 * (<unsigned long long>9973)
        v37 = method17(v2)
        del v2
        v38 = v36 + v37
        v39 = (<unsigned long long>9223372036854775807) + v38
        v40 = v39 * (<unsigned long long>9973)
        v41 = (<signed long>0)
        v42 = (<unsigned long long>1) + v41
        return v40 * v42
    elif v0.tag == 1: # nil
        v44 = (<signed long>1)
        v45 = (<unsigned long long>1) + v44
        return (<unsigned long long>9223372036854765835) * v45
cdef bint method19(UH0 v0, UH0 v1):
    cdef US2 v2
    cdef UH0 v3
    cdef US2 v4
    cdef UH0 v5
    cdef bint v12
    cdef US0 v6
    cdef US0 v7
    cdef US1 v9
    cdef US1 v10
    if v1.tag == 0 and v0.tag == 0: # cons_
        v2 = (<UH0_0>v1).v0; v3 = (<UH0_0>v1).v1; v4 = (<UH0_0>v0).v0; v5 = (<UH0_0>v0).v1
        if v2.tag == 0 and v4.tag == 0: # action_
            v6 = (<US2_0>v2).v0; v7 = (<US2_0>v4).v0
            if v6 == 0 and v7 == 0: # call
                v12 = 1
            elif v6 == 1 and v7 == 1: # fold
                v12 = 1
            elif v6 == 2 and v7 == 2: # raise
                v12 = 1
            else:
                v12 = 0
        elif v2.tag == 1 and v4.tag == 1: # observation_
            v9 = (<US2_1>v2).v0; v10 = (<US2_1>v4).v0
            if v9 == 0 and v10 == 0: # jack
                v12 = 1
            elif v9 == 1 and v10 == 1: # king
                v12 = 1
            elif v9 == 2 and v10 == 2: # queen
                v12 = 1
            else:
                v12 = 0
        else:
            v12 = 0
        del v2; del v4
        if v12:
            return method19(v5, v3)
        else:
            del v3; del v5
            return 0
    elif v1.tag == 1 and v0.tag == 1: # nil
        return 1
    else:
        return 0
cdef void method20(unsigned long long v0, numpy.ndarray[double,ndim=1] v1, unsigned long long v2):
    cdef bint v3
    cdef unsigned long long v4
    v3 = v2 < v0
    if v3:
        v4 = v2 + (<unsigned long long>1)
        v1[v2] = (<double>0.000000)
        method20(v0, v1, v4)
    else:
        pass
cdef void method21(unsigned long long v0, numpy.ndarray[object,ndim=1] v1, unsigned long long v2):
    cdef bint v3
    cdef unsigned long long v4
    v3 = v2 < v0
    if v3:
        v4 = v2 + (<unsigned long long>1)
        v1[v2] = Tuple3((<double>0.000000), (<double>0.000000))
        method21(v0, v1, v4)
    else:
        pass
cdef void method23(unsigned long long v0, numpy.ndarray[object,ndim=1] v1, unsigned long long v2):
    cdef bint v3
    cdef unsigned long long v4
    cdef list v5
    v3 = v2 < v0
    if v3:
        v4 = v2 + (<unsigned long long>1)
        v5 = [None]*(<unsigned long long>0)
        v1[v2] = v5
        del v5
        method23(v0, v1, v4)
    else:
        pass
cdef void method25(unsigned long long v0, unsigned long long v1, numpy.ndarray[object,ndim=1] v2, list v3, unsigned long long v4):
    cdef bint v5
    cdef unsigned long long v6
    cdef unsigned long long v7
    cdef UH0 v8
    cdef numpy.ndarray[signed long,ndim=1] v9
    cdef numpy.ndarray[double,ndim=1] v10
    cdef numpy.ndarray[object,ndim=1] v11
    cdef numpy.ndarray[double,ndim=1] v12
    cdef Tuple2 tmp1
    cdef unsigned long long v13
    cdef list v14
    v5 = v4 < v0
    if v5:
        v6 = v4 + (<unsigned long long>1)
        tmp1 = v3[v4]
        v7, v8, v9, v10, v11, v12 = tmp1.v0, tmp1.v1, tmp1.v2, tmp1.v3, tmp1.v4, tmp1.v5
        del tmp1
        v13 = v7 % v1
        v14 = v2[v13]
        v14.append(Tuple2(v7, v8, v9, v10, v11, v12))
        del v8; del v9; del v10; del v11; del v12; del v14
        method25(v0, v1, v2, v3, v6)
    else:
        pass
cdef void method24(unsigned long long v0, numpy.ndarray[object,ndim=1] v1, unsigned long long v2, numpy.ndarray[object,ndim=1] v3, unsigned long long v4):
    cdef bint v5
    cdef unsigned long long v6
    cdef list v7
    cdef unsigned long long v8
    cdef unsigned long long v9
    v5 = v4 < v0
    if v5:
        v6 = v4 + (<unsigned long long>1)
        v7 = v1[v4]
        v8 = len(v7)
        v9 = (<unsigned long long>0)
        method25(v8, v2, v3, v7, v9)
        del v7
        method24(v0, v1, v2, v3, v6)
    else:
        pass
cdef void method22(Mut0 v0):
    cdef numpy.ndarray[object,ndim=1] v1
    cdef unsigned long long v2
    cdef unsigned long long v3
    cdef unsigned long long v4
    cdef unsigned long long v5
    cdef bint v6
    cdef numpy.ndarray[object,ndim=1] v7
    cdef unsigned long long v8
    cdef unsigned long long v9
    cdef unsigned long long v10
    cdef unsigned long long v11
    v1 = v0.v1
    v2 = len(v1)
    v3 = v2 * (<unsigned long long>3)
    v4 = v3 // (<unsigned long long>2)
    v5 = v4 + (<unsigned long long>3)
    v6 = v5 <= v2
    if v6:
        raise Exception("The table length cannot be increased.")
    else:
        pass
    v7 = numpy.empty(v5,dtype=object)
    v8 = (<unsigned long long>0)
    method23(v5, v7, v8)
    v9 = (<unsigned long long>0)
    method24(v2, v1, v5, v7, v9)
    del v1
    v0.v1 = v7
    del v7
    v10 = v0.v0
    v11 = v10 + (<unsigned long long>2)
    v0.v0 = v11
cdef Tuple1 method18(Mut0 v0, UH0 v1, numpy.ndarray[signed long,ndim=1] v2, unsigned long long v3, list v4, unsigned long long v5):
    cdef unsigned long long v6
    cdef bint v7
    cdef unsigned long long v8
    cdef UH0 v9
    cdef numpy.ndarray[signed long,ndim=1] v10
    cdef numpy.ndarray[double,ndim=1] v11
    cdef numpy.ndarray[object,ndim=1] v12
    cdef numpy.ndarray[double,ndim=1] v13
    cdef Tuple2 tmp0
    cdef bint v14
    cdef bint v16
    cdef unsigned long long v17
    cdef unsigned long long v26
    cdef numpy.ndarray[double,ndim=1] v27
    cdef unsigned long long v28
    cdef numpy.ndarray[double,ndim=1] v29
    cdef unsigned long long v30
    cdef numpy.ndarray[object,ndim=1] v31
    cdef unsigned long long v32
    cdef unsigned long long v33
    cdef unsigned long long v34
    cdef unsigned long long v35
    cdef unsigned long long v36
    cdef numpy.ndarray[object,ndim=1] v37
    cdef unsigned long long v38
    cdef unsigned long long v39
    cdef bint v40
    v6 = len(v4)
    v7 = v5 < v6
    if v7:
        tmp0 = v4[v5]
        v8, v9, v10, v11, v12, v13 = tmp0.v0, tmp0.v1, tmp0.v2, tmp0.v3, tmp0.v4, tmp0.v5
        del tmp0
        v14 = v3 == v8
        if v14:
            v16 = method19(v9, v1)
        else:
            v16 = 0
        del v9
        if v16:
            return Tuple1(v10, v11, v12, v13)
        else:
            del v10; del v11; del v12; del v13
            v17 = v5 + (<unsigned long long>1)
            return method18(v0, v1, v2, v3, v4, v17)
    else:
        v26 = len(v2)
        v27 = numpy.empty(v26,dtype=numpy.float64)
        v28 = (<unsigned long long>0)
        method20(v26, v27, v28)
        v29 = numpy.empty(v26,dtype=numpy.float64)
        v30 = (<unsigned long long>0)
        method20(v26, v29, v30)
        v31 = numpy.empty(v26,dtype=object)
        v32 = (<unsigned long long>0)
        method21(v26, v31, v32)
        v4.append(Tuple2(v3, v1, v2, v29, v31, v27))
        v33 = v0.v2
        v34 = v33 + (<unsigned long long>1)
        v0.v2 = v34
        v35 = v0.v2
        v36 = v0.v0
        v37 = v0.v1
        v38 = len(v37)
        del v37
        v39 = v36 * v38
        v40 = v35 >= v39
        if v40:
            method22(v0)
        else:
            pass
        return Tuple1(v2, v29, v31, v27)
cdef Tuple1 method16(Mut0 v0, numpy.ndarray[signed long,ndim=1] v1, UH0 v2):
    cdef unsigned long long v4
    cdef numpy.ndarray[object,ndim=1] v5
    cdef unsigned long long v6
    cdef unsigned long long v7
    cdef list v8
    cdef unsigned long long v9
    v4 = method17(v2)
    v5 = v0.v1
    v6 = len(v5)
    v7 = v4 % v6
    v8 = v5[v7]
    del v5
    v9 = (<unsigned long long>0)
    return method18(v0, v2, v1, v4, v8, v9)
cdef double method27(unsigned long long v0, numpy.ndarray[double,ndim=1] v1, numpy.ndarray[double,ndim=1] v2, unsigned long long v3, double v4):
    cdef bint v5
    cdef unsigned long long v6
    cdef double v7
    cdef bint v8
    cdef double v9
    cdef double v10
    v5 = v3 < v0
    if v5:
        v6 = v3 + (<unsigned long long>1)
        v7 = v1[v3]
        v8 = (<double>0.000000) >= v7
        if v8:
            v9 = (<double>0.000000)
        else:
            v9 = v7
        v10 = v9 + v4
        v2[v3] = v9
        return method27(v0, v1, v2, v6, v10)
    else:
        return v4
cdef void method28(unsigned long long v0, double v1, numpy.ndarray[double,ndim=1] v2, unsigned long long v3):
    cdef bint v4
    cdef unsigned long long v5
    cdef double v6
    v4 = v3 < v0
    if v4:
        v5 = v3 + (<unsigned long long>1)
        v6 = v2[v3]
        v2[v3] = v1
        method28(v0, v1, v2, v5)
    else:
        pass
cdef void method29(unsigned long long v0, double v1, numpy.ndarray[double,ndim=1] v2, unsigned long long v3):
    cdef bint v4
    cdef unsigned long long v5
    cdef double v6
    cdef double v7
    v4 = v3 < v0
    if v4:
        v5 = v3 + (<unsigned long long>1)
        v6 = v2[v3]
        v7 = v6 / v1
        v2[v3] = v7
        method29(v0, v1, v2, v5)
    else:
        pass
cdef numpy.ndarray[double,ndim=1] method26(numpy.ndarray[double,ndim=1] v0):
    cdef unsigned long long v1
    cdef numpy.ndarray[double,ndim=1] v2
    cdef unsigned long long v3
    cdef double v4
    cdef double v5
    cdef bint v6
    cdef unsigned long long v7
    cdef double v8
    cdef double v9
    cdef unsigned long long v10
    cdef unsigned long long v11
    cdef unsigned long long v12
    v1 = len(v0)
    v2 = numpy.empty(v1,dtype=numpy.float64)
    v3 = (<unsigned long long>0)
    v4 = (<double>0.000000)
    v5 = method27(v1, v0, v2, v3, v4)
    v6 = v5 == (<double>0.000000)
    if v6:
        v7 = len(v2)
        v8 = <double>v7
        v9 = (<double>1.000000) / v8
        v10 = (<unsigned long long>0)
        method28(v7, v9, v2, v10)
    else:
        v11 = len(v2)
        v12 = (<unsigned long long>0)
        method29(v11, v5, v2, v12)
    return v2
cdef void method30(unsigned long long v0, unsigned long long v1, numpy.ndarray[double,ndim=1] v2, numpy.ndarray[double,ndim=1] v3, unsigned long long v4):
    cdef bint v5
    cdef unsigned long long v6
    cdef double v7
    cdef double v8
    cdef double v9
    cdef double v10
    cdef double v11
    cdef double v12
    v5 = v4 < v0
    if v5:
        v6 = v4 + (<unsigned long long>1)
        v7 = v2[v4]
        v8 = <double>v1
        v9 = (<double>1.000000) / v8
        v10 = (<double>0.250000) * v9
        v11 = (<double>0.750000) * v7
        v12 = v10 + v11
        v3[v4] = v12
        method30(v0, v1, v2, v3, v6)
    else:
        pass
cdef double method31(unsigned long long v0, numpy.ndarray[double,ndim=1] v1, unsigned long long v2, double v3, numpy.ndarray[object,ndim=1] v4, numpy.ndarray[double,ndim=1] v5, unsigned long long v6, double v7):
    cdef bint v8
    cdef unsigned long long v9
    cdef double v10
    cdef double v11
    cdef Tuple3 tmp3
    cdef bint v12
    cdef double v14
    cdef double v13
    cdef bint v15
    cdef double v16
    cdef double v17
    cdef double v18
    cdef double v19
    v8 = v6 < v0
    if v8:
        v9 = v6 + (<unsigned long long>1)
        tmp3 = v4[v6]
        v10, v11 = tmp3.v0, tmp3.v1
        del tmp3
        v12 = v11 == (<double>0.000000)
        if v12:
            v14 = (<double>0.000000)
        else:
            v13 = v10 / v11
            v14 = v13
        v15 = v6 == v2
        if v15:
            v16 = v3
        else:
            v16 = v14
        v17 = v1[v6]
        v18 = v16 * v17
        v19 = v7 + v18
        v5[v6] = v16
        return method31(v0, v1, v2, v3, v4, v5, v9, v19)
    else:
        return v7
cdef void method32(unsigned long long v0, unsigned char v1, double v2, numpy.ndarray[double,ndim=1] v3, double v4, numpy.ndarray[double,ndim=1] v5, unsigned long long v6):
    cdef bint v7
    cdef unsigned long long v8
    cdef double v9
    cdef double v10
    cdef double v11
    cdef bint v12
    cdef double v14
    cdef double v15
    cdef double v16
    cdef bint v17
    cdef double v18
    v7 = v6 < v0
    if v7:
        v8 = v6 + (<unsigned long long>1)
        v9 = v5[v6]
        v10 = v3[v6]
        v11 = v10 - v2
        v12 = v1 == (<unsigned char>0)
        if v12:
            v14 = v11
        else:
            v14 = -v11
        v15 = v4 * v14
        v16 = v9 + v15
        v17 = (<double>0.000000) >= v16
        if v17:
            v18 = (<double>0.000000)
        else:
            v18 = v16
        v5[v6] = v18
        method32(v0, v1, v2, v3, v4, v5, v8)
    else:
        pass
cdef void method33(unsigned long long v0, numpy.ndarray[double,ndim=1] v1, double v2, numpy.ndarray[double,ndim=1] v3, unsigned long long v4):
    cdef bint v5
    cdef unsigned long long v6
    cdef double v7
    cdef double v8
    cdef double v9
    cdef double v10
    v5 = v4 < v0
    if v5:
        v6 = v4 + (<unsigned long long>1)
        v7 = v3[v4]
        v8 = v1[v4]
        v9 = v2 * v8
        v10 = v7 + v9
        v3[v4] = v10
        method33(v0, v1, v2, v3, v6)
    else:
        pass
cdef double method34(unsigned long long v0, numpy.ndarray[double,ndim=1] v1, numpy.ndarray[double,ndim=1] v2, unsigned long long v3, double v4):
    cdef bint v5
    cdef unsigned long long v6
    cdef double v7
    cdef double v8
    cdef double v9
    cdef double v10
    v5 = v3 < v0
    if v5:
        v6 = v3 + (<unsigned long long>1)
        v7 = v1[v3]
        v8 = v2[v3]
        v9 = v8 * v7
        v10 = v4 + v9
        return method34(v0, v1, v2, v6, v10)
    else:
        return v4
cdef double method15(Mut0 v0, v1, numpy.ndarray[signed long,ndim=1] v2, unsigned char v3, double v4, double v5, UH0 v6, double v7, double v8, double v9):
    cdef numpy.ndarray[signed long,ndim=1] v10
    cdef numpy.ndarray[double,ndim=1] v11
    cdef numpy.ndarray[object,ndim=1] v12
    cdef numpy.ndarray[double,ndim=1] v13
    cdef Tuple1 tmp2
    cdef unsigned long long v14
    cdef numpy.ndarray[double,ndim=1] v15
    cdef unsigned long long v16
    cdef numpy.ndarray[double,ndim=1] v17
    cdef unsigned long long v18
    cdef unsigned long long v19
    cdef double v20
    cdef double v21
    cdef double v22
    cdef double v23
    cdef US0 v24
    cdef double v25
    cdef numpy.ndarray[double,ndim=1] v26
    cdef unsigned long long v27
    cdef double v28
    cdef double v29
    cdef double v30
    cdef double v31
    cdef double v32
    cdef double v33
    cdef double v34
    cdef double v35
    cdef double v36
    cdef double v37
    cdef Tuple3 tmp4
    cdef double v38
    cdef double v39
    cdef double v40
    cdef double v41
    cdef double v42
    cdef double v43
    cdef double v44
    cdef unsigned long long v45
    cdef unsigned long long v46
    cdef numpy.ndarray[double,ndim=1] v47
    cdef double v48
    cdef double v49
    cdef double v50
    cdef unsigned long long v51
    cdef unsigned long long v52
    cdef unsigned long long v53
    cdef unsigned long long v54
    cdef bint v55
    cdef bint v56
    cdef unsigned long long v57
    cdef double v58
    tmp2 = method16(v0, v2, v6)
    v10, v11, v12, v13 = tmp2.v0, tmp2.v1, tmp2.v2, tmp2.v3
    del tmp2
    del v10
    v14 = len(v2)
    v15 = method26(v13)
    v16 = len(v15)
    v17 = numpy.empty(v16,dtype=numpy.float64)
    v18 = (<unsigned long long>0)
    method30(v16, v14, v15, v17, v18)
    v19 = numpy.random.choice(v14,p=v17)
    v20 = v17[v19]
    del v17
    v21 = v15[v19]
    v22 = libc.math.log(v20)
    v23 = libc.math.log(v21)
    v24 = v2[v19]
    v25 = v1(Tuple0(v23, v22, v24))
    v26 = numpy.empty(v14,dtype=numpy.float64)
    v27 = (<unsigned long long>0)
    v28 = (<double>0.000000)
    v29 = method31(v14, v15, v19, v25, v12, v26, v27, v28)
    del v15
    v30 = v9 + v5
    v31 = v9 + v4
    v32 = -v8
    v33 = v31 - v30
    v34 = v32 + v33
    v35 = libc.math.exp(v34)
    tmp4 = v12[v19]
    v36, v37 = tmp4.v0, tmp4.v1
    del tmp4
    v38 = v36 * (<double>0.750000)
    v39 = v37 * (<double>0.750000)
    v40 = v25 * v35
    v41 = v40 * (<double>0.250000)
    v42 = v35 * (<double>0.250000)
    v43 = v38 + v41
    v44 = v39 + v42
    v12[v19] = Tuple3(v43, v44)
    del v12
    v45 = len(v13)
    v46 = (<unsigned long long>0)
    method32(v45, v3, v29, v26, v35, v13, v46)
    v47 = method26(v13)
    del v13
    v48 = v7 - v8
    v49 = v48 - v30
    v50 = libc.math.exp(v49)
    v51 = len(v11)
    v52 = (<unsigned long long>0)
    method33(v51, v47, v50, v11, v52)
    del v11
    v53 = len(v47)
    v54 = len(v26)
    v55 = v53 == v54
    v56 = v55 == 0
    if v56:
        raise Exception("The length of the two arrays has to the same.")
    else:
        pass
    v57 = (<unsigned long long>0)
    v58 = (<double>0.000000)
    return method34(v53, v47, v26, v57, v58)
cdef double method35(Mut0 v0, v1, numpy.ndarray[signed long,ndim=1] v2, unsigned char v3, double v4, double v5, UH0 v6, double v7, double v8, double v9):
    cdef numpy.ndarray[signed long,ndim=1] v10
    cdef numpy.ndarray[double,ndim=1] v11
    cdef numpy.ndarray[object,ndim=1] v12
    cdef numpy.ndarray[double,ndim=1] v13
    cdef Tuple1 tmp5
    cdef unsigned long long v14
    cdef numpy.ndarray[double,ndim=1] v15
    cdef unsigned long long v16
    cdef double v17
    cdef double v18
    cdef US0 v19
    tmp5 = method16(v0, v2, v6)
    v10, v11, v12, v13 = tmp5.v0, tmp5.v1, tmp5.v2, tmp5.v3
    del tmp5
    del v10; del v11; del v12
    v14 = len(v2)
    v15 = method26(v13)
    del v13
    v16 = numpy.random.choice(v14,p=v15)
    v17 = v15[v16]
    del v15
    v18 = libc.math.log(v17)
    v19 = v2[v16]
    return v1(Tuple0(v18, v18, v19))
cdef double method13(Mut0 v0, Heap0 v1, signed long v2, US1 v3, US1 v4, unsigned char v5, signed long v6, US1 v7, unsigned char v8, signed long v9, US0 v10, double v11, UH0 v12, double v13, double v14, UH0 v15, double v16, double v17):
    cdef signed long v18
    cdef signed long v19
    cdef signed long v20
    cdef bint v21
    cdef bint v23
    cdef signed long v47
    cdef bint v24
    cdef bint v25
    cdef bint v28
    cdef bint v29
    cdef signed long v30
    cdef signed long v31
    cdef bint v32
    cdef signed long v33
    cdef signed long v34
    cdef bint v35
    cdef signed long v38
    cdef bint v36
    cdef bint v39
    cdef bint v40
    cdef bint v41
    cdef bint v48
    cdef unsigned char v52
    cdef signed long v53
    cdef bint v49
    cdef bint v54
    cdef signed long v56
    cdef bint v57
    cdef signed long v59
    cdef signed long v60
    cdef bint v61
    cdef signed long v63
    cdef signed long v64
    cdef US1 v65
    cdef unsigned char v66
    cdef signed long v67
    cdef US1 v68
    cdef unsigned char v69
    cdef signed long v70
    cdef double v71
    cdef bint v72
    cdef signed long v74
    cdef bint v75
    cdef signed long v77
    cdef signed long v78
    cdef signed long v80
    cdef signed long v81
    cdef US1 v82
    cdef unsigned char v83
    cdef signed long v84
    cdef US1 v85
    cdef unsigned char v86
    cdef signed long v87
    cdef double v88
    cdef signed long v89
    cdef signed long v90
    cdef numpy.ndarray[signed long,ndim=1] v91
    cdef bint v92
    cdef US3 v93
    cdef unsigned char v94
    cdef object v95
    cdef US3 v97
    cdef unsigned char v98
    cdef object v99
    if v10 == 0: # call
        v18 = method14(v3)
        v19 = method14(v7)
        v20 = method14(v4)
        v21 = v19 == v18
        if v21:
            v23 = v20 == v18
        else:
            v23 = 0
        if v23:
            v24 = v19 < v20
            if v24:
                v47 = (<signed long>-1)
            else:
                v25 = v19 > v20
                if v25:
                    v47 = (<signed long>1)
                else:
                    v47 = (<signed long>0)
        else:
            if v21:
                v47 = (<signed long>1)
            else:
                v28 = v20 == v18
                if v28:
                    v47 = (<signed long>-1)
                else:
                    v29 = v19 > v18
                    if v29:
                        v30, v31 = v19, v18
                    else:
                        v30, v31 = v18, v19
                    v32 = v20 > v18
                    if v32:
                        v33, v34 = v20, v18
                    else:
                        v33, v34 = v18, v20
                    v35 = v30 < v33
                    if v35:
                        v38 = (<signed long>-1)
                    else:
                        v36 = v30 > v33
                        if v36:
                            v38 = (<signed long>1)
                        else:
                            v38 = (<signed long>0)
                    v39 = v38 == (<signed long>0)
                    if v39:
                        v40 = v31 < v34
                        if v40:
                            v47 = (<signed long>-1)
                        else:
                            v41 = v31 > v34
                            if v41:
                                v47 = (<signed long>1)
                            else:
                                v47 = (<signed long>0)
                    else:
                        v47 = v38
        v48 = v47 == (<signed long>1)
        if v48:
            v52, v53 = v8, v6
        else:
            v49 = v47 == (<signed long>-1)
            if v49:
                v52, v53 = v5, v6
            else:
                v52, v53 = v8, (<signed long>0)
        v54 = v52 == (<unsigned char>0)
        if v54:
            v56 = v53
        else:
            v56 = -v53
        v57 = v8 == (<unsigned char>0)
        if v57:
            v59 = v56
        else:
            v59 = -v56
        v60 = v59 + v6
        v61 = v5 == (<unsigned char>0)
        if v61:
            v63 = v56
        else:
            v63 = -v56
        v64 = v63 + v6
        if v57:
            v65, v66, v67, v68, v69, v70 = v7, v8, v60, v4, v5, v64
        else:
            v65, v66, v67, v68, v69, v70 = v4, v5, v64, v7, v8, v60
        v71 = <double>v56
        return v71
    elif v10 == 1: # fold
        v72 = v5 == (<unsigned char>0)
        if v72:
            v74 = v9
        else:
            v74 = -v9
        v75 = v8 == (<unsigned char>0)
        if v75:
            v77 = v74
        else:
            v77 = -v74
        v78 = v77 + v9
        if v72:
            v80 = v74
        else:
            v80 = -v74
        v81 = v80 + v6
        if v75:
            v82, v83, v84, v85, v86, v87 = v7, v8, v78, v4, v5, v81
        else:
            v82, v83, v84, v85, v86, v87 = v4, v5, v81, v7, v8, v78
        v88 = <double>v74
        return v88
    elif v10 == 2: # raise
        v89 = v2 - (<signed long>1)
        v90 = v6 + (<signed long>4)
        v91 = method12(v1, v7, v8, v90, v4, v5, v6, v89)
        v92 = v5 == (<unsigned char>0)
        if v92:
            v93 = US3_1(v3)
            del v93
            v94 = (<unsigned char>0)
            v95 = Closure3(v15, v16, v17, v12, v13, v14, v11, v0, v1, v89, v3, v7, v8, v90, v4, v5, v6)
            return method15(v0, v95, v91, v94, v16, v17, v12, v13, v14, v11)
        else:
            v97 = US3_1(v3)
            del v97
            v98 = (<unsigned char>1)
            v99 = Closure4(v15, v16, v17, v12, v13, v14, v11, v0, v1, v89, v3, v7, v8, v90, v4, v5, v6)
            return method35(v0, v99, v91, v98, v13, v14, v15, v16, v17, v11)
cdef double method11(Mut0 v0, Heap0 v1, US1 v2, unsigned char v3, signed long v4, US1 v5, unsigned char v6, signed long v7, US1 v8, US0 v9, double v10, UH0 v11, double v12, double v13, UH0 v14, double v15, double v16):
    cdef signed long v17
    cdef numpy.ndarray[signed long,ndim=1] v18
    cdef bint v19
    cdef US3 v20
    cdef unsigned char v21
    cdef object v22
    cdef US3 v24
    cdef unsigned char v25
    cdef object v26
    cdef object v29
    cdef signed long v31
    cdef signed long v32
    cdef numpy.ndarray[signed long,ndim=1] v33
    cdef bint v34
    cdef US3 v35
    cdef unsigned char v36
    cdef object v37
    cdef US3 v39
    cdef unsigned char v40
    cdef object v41
    if v9 == 0: # call
        v17 = (<signed long>2)
        v18 = method12(v1, v5, v6, v7, v2, v3, v4, v17)
        v19 = v3 == (<unsigned char>0)
        if v19:
            v20 = US3_1(v8)
            del v20
            v21 = (<unsigned char>0)
            v22 = Closure3(v14, v15, v16, v11, v12, v13, v10, v0, v1, v17, v8, v5, v6, v7, v2, v3, v4)
            return method15(v0, v22, v18, v21, v15, v16, v11, v12, v13, v10)
        else:
            v24 = US3_1(v8)
            del v24
            v25 = (<unsigned char>1)
            v26 = Closure4(v14, v15, v16, v11, v12, v13, v10, v0, v1, v17, v8, v5, v6, v7, v2, v3, v4)
            return method35(v0, v26, v18, v25, v12, v13, v14, v15, v16, v10)
    elif v9 == 1: # fold
        raise Exception("impossible")
    elif v9 == 2: # raise
        v31 = (<signed long>1)
        v32 = v4 + (<signed long>4)
        v33 = method12(v1, v5, v6, v32, v2, v3, v4, v31)
        v34 = v3 == (<unsigned char>0)
        if v34:
            v35 = US3_1(v8)
            del v35
            v36 = (<unsigned char>0)
            v37 = Closure3(v14, v15, v16, v11, v12, v13, v10, v0, v1, v31, v8, v5, v6, v32, v2, v3, v4)
            return method15(v0, v37, v33, v36, v15, v16, v11, v12, v13, v10)
        else:
            v39 = US3_1(v8)
            del v39
            v40 = (<unsigned char>1)
            v41 = Closure4(v14, v15, v16, v11, v12, v13, v10, v0, v1, v31, v8, v5, v6, v32, v2, v3, v4)
            return method35(v0, v41, v33, v40, v12, v13, v14, v15, v16, v10)
cdef double method10(Mut0 v0, Heap0 v1, US1 v2, unsigned char v3, signed long v4, US1 v5, unsigned char v6, signed long v7, US1 v8, double v9, UH0 v10, double v11, double v12, UH0 v13, double v14, double v15):
    cdef numpy.ndarray[signed long,ndim=1] v16
    cdef bint v17
    cdef US3 v18
    cdef unsigned char v19
    cdef object v20
    cdef US3 v22
    cdef unsigned char v23
    cdef object v24
    v16 = v1.v2
    v17 = v6 == (<unsigned char>0)
    if v17:
        v18 = US3_1(v8)
        del v18
        v19 = (<unsigned char>0)
        v20 = Closure2(v13, v14, v15, v10, v11, v12, v9, v0, v1, v2, v3, v4, v5, v6, v7, v8)
        return method15(v0, v20, v16, v19, v14, v15, v10, v11, v12, v9)
    else:
        v22 = US3_1(v8)
        del v22
        v23 = (<unsigned char>1)
        v24 = Closure5(v13, v14, v15, v10, v11, v12, v9, v0, v1, v2, v3, v4, v5, v6, v7, v8)
        return method35(v0, v24, v16, v23, v11, v12, v13, v14, v15, v9)
cdef double method36(Mut0 v0, Heap0 v1, numpy.ndarray[signed long,ndim=1] v2, signed long v3, US1 v4, unsigned char v5, signed long v6, US1 v7, unsigned char v8, signed long v9, US0 v10, double v11, UH0 v12, double v13, double v14, UH0 v15, double v16, double v17):
    cdef bint v18
    cdef US1 v19
    cdef unsigned char v20
    cdef signed long v21
    cdef US1 v22
    cdef unsigned char v23
    cdef signed long v24
    cdef unsigned long long v25
    cdef unsigned long long v26
    cdef US1 v27
    cdef double v28
    cdef double v29
    cdef double v30
    cdef double v31
    cdef US2 v32
    cdef UH0 v33
    cdef US2 v34
    cdef UH0 v35
    cdef bint v37
    cdef signed long v39
    cdef bint v40
    cdef signed long v42
    cdef signed long v43
    cdef signed long v45
    cdef signed long v46
    cdef US1 v47
    cdef unsigned char v48
    cdef signed long v49
    cdef US1 v50
    cdef unsigned char v51
    cdef signed long v52
    cdef double v53
    cdef signed long v54
    cdef signed long v55
    cdef numpy.ndarray[signed long,ndim=1] v56
    cdef bint v57
    cdef US3 v58
    cdef unsigned char v59
    cdef object v60
    cdef US3 v62
    cdef unsigned char v63
    cdef object v64
    if v10 == 0: # call
        v18 = v8 == (<unsigned char>0)
        if v18:
            v19, v20, v21, v22, v23, v24 = v7, v8, v6, v4, v5, v6
        else:
            v19, v20, v21, v22, v23, v24 = v4, v5, v6, v7, v8, v6
        v25 = len(v2)
        v26 = numpy.random.randint(0,v25)
        v27 = v2[v26]
        v28 = <double>v25
        v29 = (<double>1.000000) / v28
        v30 = libc.math.log(v29)
        v31 = v30 + v11
        v32 = US2_1(v27)
        v33 = UH0_0(v32, v12)
        del v32
        v34 = US2_1(v27)
        v35 = UH0_0(v34, v15)
        del v34
        return method10(v0, v1, v22, v23, v24, v19, v20, v21, v27, v31, v33, v13, v14, v35, v16, v17)
    elif v10 == 1: # fold
        v37 = v5 == (<unsigned char>0)
        if v37:
            v39 = v9
        else:
            v39 = -v9
        v40 = v8 == (<unsigned char>0)
        if v40:
            v42 = v39
        else:
            v42 = -v39
        v43 = v42 + v9
        if v37:
            v45 = v39
        else:
            v45 = -v39
        v46 = v45 + v6
        if v40:
            v47, v48, v49, v50, v51, v52 = v7, v8, v43, v4, v5, v46
        else:
            v47, v48, v49, v50, v51, v52 = v4, v5, v46, v7, v8, v43
        v53 = <double>v39
        return v53
    elif v10 == 2: # raise
        v54 = v3 - (<signed long>1)
        v55 = v6 + (<signed long>2)
        v56 = method12(v1, v7, v8, v55, v4, v5, v6, v54)
        v57 = v5 == (<unsigned char>0)
        if v57:
            v58 = US3_0()
            del v58
            v59 = (<unsigned char>0)
            v60 = Closure6(v15, v16, v17, v12, v13, v14, v11, v0, v1, v2, v54, v7, v8, v55, v4, v5, v6)
            return method15(v0, v60, v56, v59, v16, v17, v12, v13, v14, v11)
        else:
            v62 = US3_0()
            del v62
            v63 = (<unsigned char>1)
            v64 = Closure7(v15, v16, v17, v12, v13, v14, v11, v0, v1, v2, v54, v7, v8, v55, v4, v5, v6)
            return method35(v0, v64, v56, v63, v13, v14, v15, v16, v17, v11)
cdef double method9(Mut0 v0, Heap0 v1, numpy.ndarray[signed long,ndim=1] v2, signed long v3, US1 v4, unsigned char v5, signed long v6, US1 v7, unsigned char v8, US0 v9, double v10, UH0 v11, double v12, double v13, UH0 v14, double v15, double v16):
    cdef bint v17
    cdef US1 v18
    cdef unsigned char v19
    cdef signed long v20
    cdef US1 v21
    cdef unsigned char v22
    cdef signed long v23
    cdef unsigned long long v24
    cdef unsigned long long v25
    cdef US1 v26
    cdef double v27
    cdef double v28
    cdef double v29
    cdef double v30
    cdef US2 v31
    cdef UH0 v32
    cdef US2 v33
    cdef UH0 v34
    cdef bint v36
    cdef signed long v38
    cdef bint v39
    cdef signed long v41
    cdef signed long v42
    cdef signed long v44
    cdef signed long v45
    cdef US1 v46
    cdef unsigned char v47
    cdef signed long v48
    cdef US1 v49
    cdef unsigned char v50
    cdef signed long v51
    cdef double v52
    cdef signed long v53
    cdef signed long v54
    cdef numpy.ndarray[signed long,ndim=1] v55
    cdef bint v56
    cdef US3 v57
    cdef unsigned char v58
    cdef object v59
    cdef US3 v61
    cdef unsigned char v62
    cdef object v63
    if v9 == 0: # call
        v17 = v8 == (<unsigned char>0)
        if v17:
            v18, v19, v20, v21, v22, v23 = v7, v8, v6, v4, v5, v6
        else:
            v18, v19, v20, v21, v22, v23 = v4, v5, v6, v7, v8, v6
        v24 = len(v2)
        v25 = numpy.random.randint(0,v24)
        v26 = v2[v25]
        v27 = <double>v24
        v28 = (<double>1.000000) / v27
        v29 = libc.math.log(v28)
        v30 = v29 + v10
        v31 = US2_1(v26)
        v32 = UH0_0(v31, v11)
        del v31
        v33 = US2_1(v26)
        v34 = UH0_0(v33, v14)
        del v33
        return method10(v0, v1, v21, v22, v23, v18, v19, v20, v26, v30, v32, v12, v13, v34, v15, v16)
    elif v9 == 1: # fold
        v36 = v5 == (<unsigned char>0)
        if v36:
            v38 = v6
        else:
            v38 = -v6
        v39 = v8 == (<unsigned char>0)
        if v39:
            v41 = v38
        else:
            v41 = -v38
        v42 = v41 + v6
        if v36:
            v44 = v38
        else:
            v44 = -v38
        v45 = v44 + v6
        if v39:
            v46, v47, v48, v49, v50, v51 = v7, v8, v42, v4, v5, v45
        else:
            v46, v47, v48, v49, v50, v51 = v4, v5, v45, v7, v8, v42
        v52 = <double>v38
        return v52
    elif v9 == 2: # raise
        v53 = v3 - (<signed long>1)
        v54 = v6 + (<signed long>2)
        v55 = method12(v1, v7, v8, v54, v4, v5, v6, v53)
        v56 = v5 == (<unsigned char>0)
        if v56:
            v57 = US3_0()
            del v57
            v58 = (<unsigned char>0)
            v59 = Closure6(v14, v15, v16, v11, v12, v13, v10, v0, v1, v2, v53, v7, v8, v54, v4, v5, v6)
            return method15(v0, v59, v55, v58, v15, v16, v11, v12, v13, v10)
        else:
            v61 = US3_0()
            del v61
            v62 = (<unsigned char>1)
            v63 = Closure7(v14, v15, v16, v11, v12, v13, v10, v0, v1, v2, v53, v7, v8, v54, v4, v5, v6)
            return method35(v0, v63, v55, v62, v12, v13, v14, v15, v16, v10)
cdef double method7(Mut0 v0, US1 v1, US1 v2, Heap0 v3, numpy.ndarray[signed long,ndim=1] v4, US0 v5, double v6, UH0 v7, double v8, double v9, UH0 v10, double v11, double v12):
    cdef signed long v13
    cdef unsigned char v14
    cdef signed long v15
    cdef unsigned char v16
    cdef numpy.ndarray[signed long,ndim=1] v17
    cdef bint v18
    cdef US3 v19
    cdef unsigned char v20
    cdef object v21
    cdef US3 v23
    cdef unsigned char v24
    cdef object v25
    cdef object v28
    cdef signed long v30
    cdef unsigned char v31
    cdef signed long v32
    cdef unsigned char v33
    cdef signed long v34
    cdef numpy.ndarray[signed long,ndim=1] v35
    cdef bint v36
    cdef US3 v37
    cdef unsigned char v38
    cdef object v39
    cdef US3 v41
    cdef unsigned char v42
    cdef object v43
    if v5 == 0: # call
        v13 = (<signed long>2)
        v14 = (<unsigned char>1)
        v15 = (<signed long>1)
        v16 = (<unsigned char>0)
        v17 = method8(v3, v1, v16, v15, v2, v14, v13)
        v18 = v14 == (<unsigned char>0)
        if v18:
            v19 = US3_0()
            del v19
            v20 = (<unsigned char>0)
            v21 = Closure1(v10, v11, v12, v7, v8, v9, v6, v0, v3, v4, v13, v1, v16, v15, v2, v14)
            return method15(v0, v21, v17, v20, v11, v12, v7, v8, v9, v6)
        else:
            v23 = US3_0()
            del v23
            v24 = (<unsigned char>1)
            v25 = Closure8(v10, v11, v12, v7, v8, v9, v6, v0, v3, v4, v13, v1, v16, v15, v2, v14)
            return method35(v0, v25, v17, v24, v8, v9, v10, v11, v12, v6)
    elif v5 == 1: # fold
        raise Exception("impossible")
    elif v5 == 2: # raise
        v30 = (<signed long>1)
        v31 = (<unsigned char>1)
        v32 = (<signed long>1)
        v33 = (<unsigned char>0)
        v34 = (<signed long>3)
        v35 = method12(v3, v1, v33, v34, v2, v31, v32, v30)
        v36 = v31 == (<unsigned char>0)
        if v36:
            v37 = US3_0()
            del v37
            v38 = (<unsigned char>0)
            v39 = Closure6(v10, v11, v12, v7, v8, v9, v6, v0, v3, v4, v30, v1, v33, v34, v2, v31, v32)
            return method15(v0, v39, v35, v38, v11, v12, v7, v8, v9, v6)
        else:
            v41 = US3_0()
            del v41
            v42 = (<unsigned char>1)
            v43 = Closure7(v10, v11, v12, v7, v8, v9, v6, v0, v3, v4, v30, v1, v33, v34, v2, v31, v32)
            return method35(v0, v43, v35, v42, v8, v9, v10, v11, v12, v6)
cdef double method6(Mut0 v0, Heap0 v1, US1 v2, US1 v3, numpy.ndarray[signed long,ndim=1] v4, double v5, UH0 v6, double v7, double v8, UH0 v9, double v10, double v11):
    cdef numpy.ndarray[signed long,ndim=1] v12
    cdef unsigned char v13
    cdef signed long v14
    cdef unsigned char v15
    cdef US3 v16
    cdef unsigned char v17
    cdef object v18
    v12 = v1.v2
    v13 = (<unsigned char>0)
    v14 = (<signed long>1)
    v15 = (<unsigned char>1)
    v16 = US3_0()
    del v16
    v17 = (<unsigned char>0)
    v18 = Closure0(v9, v10, v11, v6, v7, v8, v5, v0, v2, v3, v1, v4)
    return method15(v0, v18, v12, v17, v10, v11, v6, v7, v8, v5)
cdef double method5(Mut0 v0, Heap0 v1, US1 v2, numpy.ndarray[signed long,ndim=1] v3, double v4, UH0 v5, double v6, double v7, UH0 v8, double v9, double v10):
    cdef unsigned long long v11
    cdef unsigned long long v12
    cdef US1 v13
    cdef unsigned long long v14
    cdef numpy.ndarray[signed long,ndim=1] v15
    cdef unsigned long long v16
    cdef double v17
    cdef double v18
    cdef double v19
    cdef double v20
    cdef US2 v21
    cdef UH0 v22
    v11 = len(v3)
    v12 = numpy.random.randint(0,v11)
    v13 = v3[v12]
    v14 = v11 - (<unsigned long long>1)
    v15 = numpy.empty(v14,dtype=numpy.int32)
    v16 = (<unsigned long long>0)
    method4(v14, v12, v3, v15, v16)
    v17 = <double>v11
    v18 = (<double>1.000000) / v17
    v19 = libc.math.log(v18)
    v20 = v19 + v4
    v21 = US2_1(v13)
    v22 = UH0_0(v21, v8)
    del v21
    return method6(v0, v1, v2, v13, v15, v20, v5, v6, v7, v22, v9, v10)
cdef double method43(Mut0 v0, Heap0 v1, signed long v2, US1 v3, US1 v4, unsigned char v5, signed long v6, US1 v7, unsigned char v8, signed long v9, US0 v10, double v11, UH0 v12, double v13, double v14, UH0 v15, double v16, double v17):
    cdef signed long v18
    cdef signed long v19
    cdef signed long v20
    cdef bint v21
    cdef bint v23
    cdef signed long v47
    cdef bint v24
    cdef bint v25
    cdef bint v28
    cdef bint v29
    cdef signed long v30
    cdef signed long v31
    cdef bint v32
    cdef signed long v33
    cdef signed long v34
    cdef bint v35
    cdef signed long v38
    cdef bint v36
    cdef bint v39
    cdef bint v40
    cdef bint v41
    cdef bint v48
    cdef unsigned char v52
    cdef signed long v53
    cdef bint v49
    cdef bint v54
    cdef signed long v56
    cdef bint v57
    cdef signed long v59
    cdef signed long v60
    cdef bint v61
    cdef signed long v63
    cdef signed long v64
    cdef US1 v65
    cdef unsigned char v66
    cdef signed long v67
    cdef US1 v68
    cdef unsigned char v69
    cdef signed long v70
    cdef double v71
    cdef bint v72
    cdef signed long v74
    cdef bint v75
    cdef signed long v77
    cdef signed long v78
    cdef signed long v80
    cdef signed long v81
    cdef US1 v82
    cdef unsigned char v83
    cdef signed long v84
    cdef US1 v85
    cdef unsigned char v86
    cdef signed long v87
    cdef double v88
    cdef signed long v89
    cdef signed long v90
    cdef numpy.ndarray[signed long,ndim=1] v91
    cdef bint v92
    cdef US3 v93
    cdef unsigned char v94
    cdef object v95
    cdef US3 v97
    cdef unsigned char v98
    cdef object v99
    if v10 == 0: # call
        v18 = method14(v3)
        v19 = method14(v7)
        v20 = method14(v4)
        v21 = v19 == v18
        if v21:
            v23 = v20 == v18
        else:
            v23 = 0
        if v23:
            v24 = v19 < v20
            if v24:
                v47 = (<signed long>-1)
            else:
                v25 = v19 > v20
                if v25:
                    v47 = (<signed long>1)
                else:
                    v47 = (<signed long>0)
        else:
            if v21:
                v47 = (<signed long>1)
            else:
                v28 = v20 == v18
                if v28:
                    v47 = (<signed long>-1)
                else:
                    v29 = v19 > v18
                    if v29:
                        v30, v31 = v19, v18
                    else:
                        v30, v31 = v18, v19
                    v32 = v20 > v18
                    if v32:
                        v33, v34 = v20, v18
                    else:
                        v33, v34 = v18, v20
                    v35 = v30 < v33
                    if v35:
                        v38 = (<signed long>-1)
                    else:
                        v36 = v30 > v33
                        if v36:
                            v38 = (<signed long>1)
                        else:
                            v38 = (<signed long>0)
                    v39 = v38 == (<signed long>0)
                    if v39:
                        v40 = v31 < v34
                        if v40:
                            v47 = (<signed long>-1)
                        else:
                            v41 = v31 > v34
                            if v41:
                                v47 = (<signed long>1)
                            else:
                                v47 = (<signed long>0)
                    else:
                        v47 = v38
        v48 = v47 == (<signed long>1)
        if v48:
            v52, v53 = v8, v6
        else:
            v49 = v47 == (<signed long>-1)
            if v49:
                v52, v53 = v5, v6
            else:
                v52, v53 = v8, (<signed long>0)
        v54 = v52 == (<unsigned char>0)
        if v54:
            v56 = v53
        else:
            v56 = -v53
        v57 = v8 == (<unsigned char>0)
        if v57:
            v59 = v56
        else:
            v59 = -v56
        v60 = v59 + v6
        v61 = v5 == (<unsigned char>0)
        if v61:
            v63 = v56
        else:
            v63 = -v56
        v64 = v63 + v6
        if v57:
            v65, v66, v67, v68, v69, v70 = v7, v8, v60, v4, v5, v64
        else:
            v65, v66, v67, v68, v69, v70 = v4, v5, v64, v7, v8, v60
        v71 = <double>v56
        return v71
    elif v10 == 1: # fold
        v72 = v5 == (<unsigned char>0)
        if v72:
            v74 = v9
        else:
            v74 = -v9
        v75 = v8 == (<unsigned char>0)
        if v75:
            v77 = v74
        else:
            v77 = -v74
        v78 = v77 + v9
        if v72:
            v80 = v74
        else:
            v80 = -v74
        v81 = v80 + v6
        if v75:
            v82, v83, v84, v85, v86, v87 = v7, v8, v78, v4, v5, v81
        else:
            v82, v83, v84, v85, v86, v87 = v4, v5, v81, v7, v8, v78
        v88 = <double>v74
        return v88
    elif v10 == 2: # raise
        v89 = v2 - (<signed long>1)
        v90 = v6 + (<signed long>4)
        v91 = method12(v1, v7, v8, v90, v4, v5, v6, v89)
        v92 = v5 == (<unsigned char>0)
        if v92:
            v93 = US3_1(v3)
            del v93
            v94 = (<unsigned char>0)
            v95 = Closure12(v15, v16, v17, v12, v13, v14, v11, v0, v1, v89, v3, v7, v8, v90, v4, v5, v6)
            return method35(v0, v95, v91, v94, v16, v17, v12, v13, v14, v11)
        else:
            v97 = US3_1(v3)
            del v97
            v98 = (<unsigned char>1)
            v99 = Closure13(v15, v16, v17, v12, v13, v14, v11, v0, v1, v89, v3, v7, v8, v90, v4, v5, v6)
            return method15(v0, v99, v91, v98, v13, v14, v15, v16, v17, v11)
cdef double method42(Mut0 v0, Heap0 v1, US1 v2, unsigned char v3, signed long v4, US1 v5, unsigned char v6, signed long v7, US1 v8, US0 v9, double v10, UH0 v11, double v12, double v13, UH0 v14, double v15, double v16):
    cdef signed long v17
    cdef numpy.ndarray[signed long,ndim=1] v18
    cdef bint v19
    cdef US3 v20
    cdef unsigned char v21
    cdef object v22
    cdef US3 v24
    cdef unsigned char v25
    cdef object v26
    cdef object v29
    cdef signed long v31
    cdef signed long v32
    cdef numpy.ndarray[signed long,ndim=1] v33
    cdef bint v34
    cdef US3 v35
    cdef unsigned char v36
    cdef object v37
    cdef US3 v39
    cdef unsigned char v40
    cdef object v41
    if v9 == 0: # call
        v17 = (<signed long>2)
        v18 = method12(v1, v5, v6, v7, v2, v3, v4, v17)
        v19 = v3 == (<unsigned char>0)
        if v19:
            v20 = US3_1(v8)
            del v20
            v21 = (<unsigned char>0)
            v22 = Closure12(v14, v15, v16, v11, v12, v13, v10, v0, v1, v17, v8, v5, v6, v7, v2, v3, v4)
            return method35(v0, v22, v18, v21, v15, v16, v11, v12, v13, v10)
        else:
            v24 = US3_1(v8)
            del v24
            v25 = (<unsigned char>1)
            v26 = Closure13(v14, v15, v16, v11, v12, v13, v10, v0, v1, v17, v8, v5, v6, v7, v2, v3, v4)
            return method15(v0, v26, v18, v25, v12, v13, v14, v15, v16, v10)
    elif v9 == 1: # fold
        raise Exception("impossible")
    elif v9 == 2: # raise
        v31 = (<signed long>1)
        v32 = v4 + (<signed long>4)
        v33 = method12(v1, v5, v6, v32, v2, v3, v4, v31)
        v34 = v3 == (<unsigned char>0)
        if v34:
            v35 = US3_1(v8)
            del v35
            v36 = (<unsigned char>0)
            v37 = Closure12(v14, v15, v16, v11, v12, v13, v10, v0, v1, v31, v8, v5, v6, v32, v2, v3, v4)
            return method35(v0, v37, v33, v36, v15, v16, v11, v12, v13, v10)
        else:
            v39 = US3_1(v8)
            del v39
            v40 = (<unsigned char>1)
            v41 = Closure13(v14, v15, v16, v11, v12, v13, v10, v0, v1, v31, v8, v5, v6, v32, v2, v3, v4)
            return method15(v0, v41, v33, v40, v12, v13, v14, v15, v16, v10)
cdef double method41(Mut0 v0, Heap0 v1, US1 v2, unsigned char v3, signed long v4, US1 v5, unsigned char v6, signed long v7, US1 v8, double v9, UH0 v10, double v11, double v12, UH0 v13, double v14, double v15):
    cdef numpy.ndarray[signed long,ndim=1] v16
    cdef bint v17
    cdef US3 v18
    cdef unsigned char v19
    cdef object v20
    cdef US3 v22
    cdef unsigned char v23
    cdef object v24
    v16 = v1.v2
    v17 = v6 == (<unsigned char>0)
    if v17:
        v18 = US3_1(v8)
        del v18
        v19 = (<unsigned char>0)
        v20 = Closure11(v13, v14, v15, v10, v11, v12, v9, v0, v1, v2, v3, v4, v5, v6, v7, v8)
        return method35(v0, v20, v16, v19, v14, v15, v10, v11, v12, v9)
    else:
        v22 = US3_1(v8)
        del v22
        v23 = (<unsigned char>1)
        v24 = Closure14(v13, v14, v15, v10, v11, v12, v9, v0, v1, v2, v3, v4, v5, v6, v7, v8)
        return method15(v0, v24, v16, v23, v11, v12, v13, v14, v15, v9)
cdef double method44(Mut0 v0, Heap0 v1, numpy.ndarray[signed long,ndim=1] v2, signed long v3, US1 v4, unsigned char v5, signed long v6, US1 v7, unsigned char v8, signed long v9, US0 v10, double v11, UH0 v12, double v13, double v14, UH0 v15, double v16, double v17):
    cdef bint v18
    cdef US1 v19
    cdef unsigned char v20
    cdef signed long v21
    cdef US1 v22
    cdef unsigned char v23
    cdef signed long v24
    cdef unsigned long long v25
    cdef unsigned long long v26
    cdef US1 v27
    cdef double v28
    cdef double v29
    cdef double v30
    cdef double v31
    cdef US2 v32
    cdef UH0 v33
    cdef US2 v34
    cdef UH0 v35
    cdef bint v37
    cdef signed long v39
    cdef bint v40
    cdef signed long v42
    cdef signed long v43
    cdef signed long v45
    cdef signed long v46
    cdef US1 v47
    cdef unsigned char v48
    cdef signed long v49
    cdef US1 v50
    cdef unsigned char v51
    cdef signed long v52
    cdef double v53
    cdef signed long v54
    cdef signed long v55
    cdef numpy.ndarray[signed long,ndim=1] v56
    cdef bint v57
    cdef US3 v58
    cdef unsigned char v59
    cdef object v60
    cdef US3 v62
    cdef unsigned char v63
    cdef object v64
    if v10 == 0: # call
        v18 = v8 == (<unsigned char>0)
        if v18:
            v19, v20, v21, v22, v23, v24 = v7, v8, v6, v4, v5, v6
        else:
            v19, v20, v21, v22, v23, v24 = v4, v5, v6, v7, v8, v6
        v25 = len(v2)
        v26 = numpy.random.randint(0,v25)
        v27 = v2[v26]
        v28 = <double>v25
        v29 = (<double>1.000000) / v28
        v30 = libc.math.log(v29)
        v31 = v30 + v11
        v32 = US2_1(v27)
        v33 = UH0_0(v32, v12)
        del v32
        v34 = US2_1(v27)
        v35 = UH0_0(v34, v15)
        del v34
        return method41(v0, v1, v22, v23, v24, v19, v20, v21, v27, v31, v33, v13, v14, v35, v16, v17)
    elif v10 == 1: # fold
        v37 = v5 == (<unsigned char>0)
        if v37:
            v39 = v9
        else:
            v39 = -v9
        v40 = v8 == (<unsigned char>0)
        if v40:
            v42 = v39
        else:
            v42 = -v39
        v43 = v42 + v9
        if v37:
            v45 = v39
        else:
            v45 = -v39
        v46 = v45 + v6
        if v40:
            v47, v48, v49, v50, v51, v52 = v7, v8, v43, v4, v5, v46
        else:
            v47, v48, v49, v50, v51, v52 = v4, v5, v46, v7, v8, v43
        v53 = <double>v39
        return v53
    elif v10 == 2: # raise
        v54 = v3 - (<signed long>1)
        v55 = v6 + (<signed long>2)
        v56 = method12(v1, v7, v8, v55, v4, v5, v6, v54)
        v57 = v5 == (<unsigned char>0)
        if v57:
            v58 = US3_0()
            del v58
            v59 = (<unsigned char>0)
            v60 = Closure15(v15, v16, v17, v12, v13, v14, v11, v0, v1, v2, v54, v7, v8, v55, v4, v5, v6)
            return method35(v0, v60, v56, v59, v16, v17, v12, v13, v14, v11)
        else:
            v62 = US3_0()
            del v62
            v63 = (<unsigned char>1)
            v64 = Closure16(v15, v16, v17, v12, v13, v14, v11, v0, v1, v2, v54, v7, v8, v55, v4, v5, v6)
            return method15(v0, v64, v56, v63, v13, v14, v15, v16, v17, v11)
cdef double method40(Mut0 v0, Heap0 v1, numpy.ndarray[signed long,ndim=1] v2, signed long v3, US1 v4, unsigned char v5, signed long v6, US1 v7, unsigned char v8, US0 v9, double v10, UH0 v11, double v12, double v13, UH0 v14, double v15, double v16):
    cdef bint v17
    cdef US1 v18
    cdef unsigned char v19
    cdef signed long v20
    cdef US1 v21
    cdef unsigned char v22
    cdef signed long v23
    cdef unsigned long long v24
    cdef unsigned long long v25
    cdef US1 v26
    cdef double v27
    cdef double v28
    cdef double v29
    cdef double v30
    cdef US2 v31
    cdef UH0 v32
    cdef US2 v33
    cdef UH0 v34
    cdef bint v36
    cdef signed long v38
    cdef bint v39
    cdef signed long v41
    cdef signed long v42
    cdef signed long v44
    cdef signed long v45
    cdef US1 v46
    cdef unsigned char v47
    cdef signed long v48
    cdef US1 v49
    cdef unsigned char v50
    cdef signed long v51
    cdef double v52
    cdef signed long v53
    cdef signed long v54
    cdef numpy.ndarray[signed long,ndim=1] v55
    cdef bint v56
    cdef US3 v57
    cdef unsigned char v58
    cdef object v59
    cdef US3 v61
    cdef unsigned char v62
    cdef object v63
    if v9 == 0: # call
        v17 = v8 == (<unsigned char>0)
        if v17:
            v18, v19, v20, v21, v22, v23 = v7, v8, v6, v4, v5, v6
        else:
            v18, v19, v20, v21, v22, v23 = v4, v5, v6, v7, v8, v6
        v24 = len(v2)
        v25 = numpy.random.randint(0,v24)
        v26 = v2[v25]
        v27 = <double>v24
        v28 = (<double>1.000000) / v27
        v29 = libc.math.log(v28)
        v30 = v29 + v10
        v31 = US2_1(v26)
        v32 = UH0_0(v31, v11)
        del v31
        v33 = US2_1(v26)
        v34 = UH0_0(v33, v14)
        del v33
        return method41(v0, v1, v21, v22, v23, v18, v19, v20, v26, v30, v32, v12, v13, v34, v15, v16)
    elif v9 == 1: # fold
        v36 = v5 == (<unsigned char>0)
        if v36:
            v38 = v6
        else:
            v38 = -v6
        v39 = v8 == (<unsigned char>0)
        if v39:
            v41 = v38
        else:
            v41 = -v38
        v42 = v41 + v6
        if v36:
            v44 = v38
        else:
            v44 = -v38
        v45 = v44 + v6
        if v39:
            v46, v47, v48, v49, v50, v51 = v7, v8, v42, v4, v5, v45
        else:
            v46, v47, v48, v49, v50, v51 = v4, v5, v45, v7, v8, v42
        v52 = <double>v38
        return v52
    elif v9 == 2: # raise
        v53 = v3 - (<signed long>1)
        v54 = v6 + (<signed long>2)
        v55 = method12(v1, v7, v8, v54, v4, v5, v6, v53)
        v56 = v5 == (<unsigned char>0)
        if v56:
            v57 = US3_0()
            del v57
            v58 = (<unsigned char>0)
            v59 = Closure15(v14, v15, v16, v11, v12, v13, v10, v0, v1, v2, v53, v7, v8, v54, v4, v5, v6)
            return method35(v0, v59, v55, v58, v15, v16, v11, v12, v13, v10)
        else:
            v61 = US3_0()
            del v61
            v62 = (<unsigned char>1)
            v63 = Closure16(v14, v15, v16, v11, v12, v13, v10, v0, v1, v2, v53, v7, v8, v54, v4, v5, v6)
            return method15(v0, v63, v55, v62, v12, v13, v14, v15, v16, v10)
cdef double method39(Mut0 v0, US1 v1, US1 v2, Heap0 v3, numpy.ndarray[signed long,ndim=1] v4, US0 v5, double v6, UH0 v7, double v8, double v9, UH0 v10, double v11, double v12):
    cdef signed long v13
    cdef unsigned char v14
    cdef signed long v15
    cdef unsigned char v16
    cdef numpy.ndarray[signed long,ndim=1] v17
    cdef bint v18
    cdef US3 v19
    cdef unsigned char v20
    cdef object v21
    cdef US3 v23
    cdef unsigned char v24
    cdef object v25
    cdef object v28
    cdef signed long v30
    cdef unsigned char v31
    cdef signed long v32
    cdef unsigned char v33
    cdef signed long v34
    cdef numpy.ndarray[signed long,ndim=1] v35
    cdef bint v36
    cdef US3 v37
    cdef unsigned char v38
    cdef object v39
    cdef US3 v41
    cdef unsigned char v42
    cdef object v43
    if v5 == 0: # call
        v13 = (<signed long>2)
        v14 = (<unsigned char>1)
        v15 = (<signed long>1)
        v16 = (<unsigned char>0)
        v17 = method8(v3, v1, v16, v15, v2, v14, v13)
        v18 = v14 == (<unsigned char>0)
        if v18:
            v19 = US3_0()
            del v19
            v20 = (<unsigned char>0)
            v21 = Closure10(v10, v11, v12, v7, v8, v9, v6, v0, v3, v4, v13, v1, v16, v15, v2, v14)
            return method35(v0, v21, v17, v20, v11, v12, v7, v8, v9, v6)
        else:
            v23 = US3_0()
            del v23
            v24 = (<unsigned char>1)
            v25 = Closure17(v10, v11, v12, v7, v8, v9, v6, v0, v3, v4, v13, v1, v16, v15, v2, v14)
            return method15(v0, v25, v17, v24, v8, v9, v10, v11, v12, v6)
    elif v5 == 1: # fold
        raise Exception("impossible")
    elif v5 == 2: # raise
        v30 = (<signed long>1)
        v31 = (<unsigned char>1)
        v32 = (<signed long>1)
        v33 = (<unsigned char>0)
        v34 = (<signed long>3)
        v35 = method12(v3, v1, v33, v34, v2, v31, v32, v30)
        v36 = v31 == (<unsigned char>0)
        if v36:
            v37 = US3_0()
            del v37
            v38 = (<unsigned char>0)
            v39 = Closure15(v10, v11, v12, v7, v8, v9, v6, v0, v3, v4, v30, v1, v33, v34, v2, v31, v32)
            return method35(v0, v39, v35, v38, v11, v12, v7, v8, v9, v6)
        else:
            v41 = US3_0()
            del v41
            v42 = (<unsigned char>1)
            v43 = Closure16(v10, v11, v12, v7, v8, v9, v6, v0, v3, v4, v30, v1, v33, v34, v2, v31, v32)
            return method15(v0, v43, v35, v42, v8, v9, v10, v11, v12, v6)
cdef double method38(Mut0 v0, Heap0 v1, US1 v2, US1 v3, numpy.ndarray[signed long,ndim=1] v4, double v5, UH0 v6, double v7, double v8, UH0 v9, double v10, double v11):
    cdef numpy.ndarray[signed long,ndim=1] v12
    cdef unsigned char v13
    cdef signed long v14
    cdef unsigned char v15
    cdef US3 v16
    cdef unsigned char v17
    cdef object v18
    v12 = v1.v2
    v13 = (<unsigned char>0)
    v14 = (<signed long>1)
    v15 = (<unsigned char>1)
    v16 = US3_0()
    del v16
    v17 = (<unsigned char>0)
    v18 = Closure9(v9, v10, v11, v6, v7, v8, v5, v0, v2, v3, v1, v4)
    return method35(v0, v18, v12, v17, v10, v11, v6, v7, v8, v5)
cdef double method37(Mut0 v0, Heap0 v1, US1 v2, numpy.ndarray[signed long,ndim=1] v3, double v4, UH0 v5, double v6, double v7, UH0 v8, double v9, double v10):
    cdef unsigned long long v11
    cdef unsigned long long v12
    cdef US1 v13
    cdef unsigned long long v14
    cdef numpy.ndarray[signed long,ndim=1] v15
    cdef unsigned long long v16
    cdef double v17
    cdef double v18
    cdef double v19
    cdef double v20
    cdef US2 v21
    cdef UH0 v22
    v11 = len(v3)
    v12 = numpy.random.randint(0,v11)
    v13 = v3[v12]
    v14 = v11 - (<unsigned long long>1)
    v15 = numpy.empty(v14,dtype=numpy.int32)
    v16 = (<unsigned long long>0)
    method4(v14, v12, v3, v15, v16)
    v17 = <double>v11
    v18 = (<double>1.000000) / v17
    v19 = libc.math.log(v18)
    v20 = v19 + v4
    v21 = US2_1(v13)
    v22 = UH0_0(v21, v8)
    del v21
    return method38(v0, v1, v2, v13, v15, v20, v5, v6, v7, v22, v9, v10)
cdef void method46(unsigned long long v0, numpy.ndarray[object,ndim=1] v1, unsigned long long v2):
    cdef bint v3
    cdef unsigned long long v4
    cdef list v5
    v3 = v2 < v0
    if v3:
        v4 = v2 + (<unsigned long long>1)
        v5 = [None]*(<unsigned long long>0)
        v1[v2] = v5
        del v5
        method46(v0, v1, v4)
    else:
        pass
cdef Mut2 method45(unsigned long long v0, unsigned long long v1):
    cdef numpy.ndarray[object,ndim=1] v3
    cdef unsigned long long v4
    cdef Mut2 v5
    v3 = numpy.empty(v1,dtype=object)
    v4 = (<unsigned long long>0)
    method46(v1, v3, v4)
    v5 = Mut2(v0, v3, (<unsigned long long>0))
    del v3
    return v5
cdef bint method47(Mut1 v0):
    cdef signed long v1
    v1 = v0.v0
    return v1 < (<signed long>500)
cdef void method54(unsigned long long v0, numpy.ndarray[double,ndim=1] v1, unsigned long long v2):
    cdef bint v3
    cdef unsigned long long v4
    v3 = v2 < v0
    if v3:
        v4 = v2 + (<unsigned long long>1)
        v1[v2] = (<double>0.000000)
        method54(v0, v1, v4)
    else:
        pass
cdef void method56(unsigned long long v0, numpy.ndarray[object,ndim=1] v1, unsigned long long v2):
    cdef bint v3
    cdef unsigned long long v4
    cdef list v5
    v3 = v2 < v0
    if v3:
        v4 = v2 + (<unsigned long long>1)
        v5 = [None]*(<unsigned long long>0)
        v1[v2] = v5
        del v5
        method56(v0, v1, v4)
    else:
        pass
cdef void method58(unsigned long long v0, unsigned long long v1, numpy.ndarray[object,ndim=1] v2, list v3, unsigned long long v4):
    cdef bint v5
    cdef unsigned long long v6
    cdef unsigned long long v7
    cdef UH0 v8
    cdef Mut3 v9
    cdef Tuple4 tmp7
    cdef unsigned long long v10
    cdef list v11
    v5 = v4 < v0
    if v5:
        v6 = v4 + (<unsigned long long>1)
        tmp7 = v3[v4]
        v7, v8, v9 = tmp7.v0, tmp7.v1, tmp7.v2
        del tmp7
        v10 = v7 % v1
        v11 = v2[v10]
        v11.append(Tuple4(v7, v8, v9))
        del v8; del v9; del v11
        method58(v0, v1, v2, v3, v6)
    else:
        pass
cdef void method57(unsigned long long v0, numpy.ndarray[object,ndim=1] v1, unsigned long long v2, numpy.ndarray[object,ndim=1] v3, unsigned long long v4):
    cdef bint v5
    cdef unsigned long long v6
    cdef list v7
    cdef unsigned long long v8
    cdef unsigned long long v9
    v5 = v4 < v0
    if v5:
        v6 = v4 + (<unsigned long long>1)
        v7 = v1[v4]
        v8 = len(v7)
        v9 = (<unsigned long long>0)
        method58(v8, v2, v3, v7, v9)
        del v7
        method57(v0, v1, v2, v3, v6)
    else:
        pass
cdef void method55(Mut2 v0):
    cdef numpy.ndarray[object,ndim=1] v1
    cdef unsigned long long v2
    cdef unsigned long long v3
    cdef unsigned long long v4
    cdef unsigned long long v5
    cdef bint v6
    cdef numpy.ndarray[object,ndim=1] v7
    cdef unsigned long long v8
    cdef unsigned long long v9
    cdef unsigned long long v10
    cdef unsigned long long v11
    v1 = v0.v1
    v2 = len(v1)
    v3 = v2 * (<unsigned long long>3)
    v4 = v3 // (<unsigned long long>2)
    v5 = v4 + (<unsigned long long>3)
    v6 = v5 <= v2
    if v6:
        raise Exception("The table length cannot be increased.")
    else:
        pass
    v7 = numpy.empty(v5,dtype=object)
    v8 = (<unsigned long long>0)
    method56(v5, v7, v8)
    v9 = (<unsigned long long>0)
    method57(v2, v1, v5, v7, v9)
    del v1
    v0.v1 = v7
    del v7
    v10 = v0.v0
    v11 = v10 + (<unsigned long long>2)
    v0.v0 = v11
cdef Mut3 method53(Mut2 v0, UH0 v1, numpy.ndarray[signed long,ndim=1] v2, unsigned long long v3, list v4, unsigned long long v5):
    cdef unsigned long long v6
    cdef bint v7
    cdef unsigned long long v8
    cdef UH0 v9
    cdef Mut3 v10
    cdef Tuple4 tmp6
    cdef bint v11
    cdef bint v13
    cdef unsigned long long v14
    cdef unsigned long long v17
    cdef numpy.ndarray[double,ndim=1] v18
    cdef unsigned long long v19
    cdef numpy.ndarray[double,ndim=1] v20
    cdef unsigned long long v21
    cdef Mut3 v22
    cdef unsigned long long v23
    cdef unsigned long long v24
    cdef unsigned long long v25
    cdef unsigned long long v26
    cdef numpy.ndarray[object,ndim=1] v27
    cdef unsigned long long v28
    cdef unsigned long long v29
    cdef bint v30
    v6 = len(v4)
    v7 = v5 < v6
    if v7:
        tmp6 = v4[v5]
        v8, v9, v10 = tmp6.v0, tmp6.v1, tmp6.v2
        del tmp6
        v11 = v3 == v8
        if v11:
            v13 = method19(v9, v1)
        else:
            v13 = 0
        del v9
        if v13:
            return v10
        else:
            del v10
            v14 = v5 + (<unsigned long long>1)
            return method53(v0, v1, v2, v3, v4, v14)
    else:
        v17 = len(v2)
        v18 = numpy.empty(v17,dtype=numpy.float64)
        v19 = (<unsigned long long>0)
        method54(v17, v18, v19)
        v20 = numpy.empty(v17,dtype=numpy.float64)
        v21 = (<unsigned long long>0)
        method54(v17, v20, v21)
        v22 = Mut3(v2, v20, v18, (<unsigned long long>1))
        del v18; del v20
        v4.append(Tuple4(v3, v1, v22))
        v23 = v0.v2
        v24 = v23 + (<unsigned long long>1)
        v0.v2 = v24
        v25 = v0.v2
        v26 = v0.v0
        v27 = v0.v1
        v28 = len(v27)
        del v27
        v29 = v26 * v28
        v30 = v25 >= v29
        if v30:
            method55(v0)
        else:
            pass
        return v22
cdef Mut3 method52(Mut2 v0, numpy.ndarray[signed long,ndim=1] v1, UH0 v2):
    cdef unsigned long long v4
    cdef numpy.ndarray[object,ndim=1] v5
    cdef unsigned long long v6
    cdef unsigned long long v7
    cdef list v8
    cdef unsigned long long v9
    v4 = method17(v2)
    v5 = v0.v1
    v6 = len(v5)
    v7 = v4 % v6
    v8 = v5[v7]
    del v5
    v9 = (<unsigned long long>0)
    return method53(v0, v2, v1, v4, v8, v9)
cdef double method60(unsigned long long v0, numpy.ndarray[double,ndim=1] v1, numpy.ndarray[double,ndim=1] v2, unsigned long long v3, double v4):
    cdef bint v5
    cdef unsigned long long v6
    cdef double v7
    cdef bint v8
    cdef double v9
    cdef double v10
    v5 = v3 < v0
    if v5:
        v6 = v3 + (<unsigned long long>1)
        v7 = v1[v3]
        v8 = (<double>0.000000) >= v7
        if v8:
            v9 = (<double>0.000000)
        else:
            v9 = v7
        v10 = v9 + v4
        v2[v3] = v9
        return method60(v0, v1, v2, v6, v10)
    else:
        return v4
cdef void method61(unsigned long long v0, double v1, numpy.ndarray[double,ndim=1] v2, unsigned long long v3):
    cdef bint v4
    cdef unsigned long long v5
    cdef double v6
    v4 = v3 < v0
    if v4:
        v5 = v3 + (<unsigned long long>1)
        v6 = v2[v3]
        v2[v3] = v1
        method61(v0, v1, v2, v5)
    else:
        pass
cdef void method62(unsigned long long v0, double v1, numpy.ndarray[double,ndim=1] v2, unsigned long long v3):
    cdef bint v4
    cdef unsigned long long v5
    cdef double v6
    cdef double v7
    v4 = v3 < v0
    if v4:
        v5 = v3 + (<unsigned long long>1)
        v6 = v2[v3]
        v7 = v6 / v1
        v2[v3] = v7
        method62(v0, v1, v2, v5)
    else:
        pass
cdef numpy.ndarray[double,ndim=1] method59(numpy.ndarray[double,ndim=1] v0):
    cdef unsigned long long v1
    cdef numpy.ndarray[double,ndim=1] v2
    cdef unsigned long long v3
    cdef double v4
    cdef double v5
    cdef bint v6
    cdef unsigned long long v7
    cdef double v8
    cdef double v9
    cdef unsigned long long v10
    cdef unsigned long long v11
    cdef unsigned long long v12
    v1 = len(v0)
    v2 = numpy.empty(v1,dtype=numpy.float64)
    v3 = (<unsigned long long>0)
    v4 = (<double>0.000000)
    v5 = method60(v1, v0, v2, v3, v4)
    v6 = v5 == (<double>0.000000)
    if v6:
        v7 = len(v2)
        v8 = <double>v7
        v9 = (<double>1.000000) / v8
        v10 = (<unsigned long long>0)
        method61(v7, v9, v2, v10)
    else:
        v11 = len(v2)
        v12 = (<unsigned long long>0)
        method62(v11, v5, v2, v12)
    return v2
cdef void method74(unsigned long long v0, double v1, double v2, numpy.ndarray[double,ndim=1] v3, unsigned char v4, double v5, numpy.ndarray[double,ndim=1] v6, unsigned long long v7):
    cdef bint v8
    cdef unsigned long long v9
    cdef double v10
    cdef double v11
    cdef double v12
    cdef double v13
    cdef bint v14
    cdef double v16
    cdef double v17
    cdef double v18
    cdef bint v19
    cdef double v20
    v8 = v7 < v0
    if v8:
        v9 = v7 + (<unsigned long long>1)
        v10 = v6[v7]
        v11 = v5 * v1
        v12 = v3[v7]
        v13 = v12 - v2
        v14 = v4 == (<unsigned char>0)
        if v14:
            v16 = v13
        else:
            v16 = -v13
        v17 = v11 * v16
        v18 = v10 + v17
        v19 = (<double>0.000000) >= v18
        if v19:
            v20 = (<double>0.000000)
        else:
            v20 = v18
        v6[v7] = v20
        method74(v0, v1, v2, v3, v4, v5, v6, v9)
    else:
        pass
cdef void method75(unsigned long long v0, double v1, numpy.ndarray[double,ndim=1] v2, double v3, numpy.ndarray[double,ndim=1] v4, unsigned long long v5):
    cdef bint v6
    cdef unsigned long long v7
    cdef double v8
    cdef double v9
    cdef double v10
    cdef double v11
    cdef double v12
    v6 = v5 < v0
    if v6:
        v7 = v5 + (<unsigned long long>1)
        v8 = v4[v5]
        v9 = v1 * v3
        v10 = v2[v5]
        v11 = v9 * v10
        v12 = v8 + v11
        v4[v5] = v12
        method75(v0, v1, v2, v3, v4, v7)
    else:
        pass
cdef double method73(UH0 v0, double v1, double v2, Mut3 v3, double v4, double v5, numpy.ndarray[double,ndim=1] v6, unsigned char v7):
    cdef unsigned long long v8
    cdef double v9
    cdef numpy.ndarray[double,ndim=1] v10
    cdef unsigned long long v11
    cdef unsigned long long v12
    cdef numpy.ndarray[double,ndim=1] v13
    cdef numpy.ndarray[double,ndim=1] v14
    cdef double v15
    cdef double v16
    cdef numpy.ndarray[double,ndim=1] v17
    cdef unsigned long long v18
    cdef unsigned long long v19
    cdef unsigned long long v20
    cdef unsigned long long v21
    v8 = v3.v3
    v9 = <double>v8
    v10 = v3.v2
    v11 = len(v10)
    v12 = (<unsigned long long>0)
    method74(v11, v4, v5, v6, v7, v9, v10, v12)
    del v10
    v13 = v3.v2
    v14 = method59(v13)
    del v13
    v15 = v1 - v2
    v16 = libc.math.exp(v15)
    v17 = v3.v1
    v18 = len(v17)
    v19 = (<unsigned long long>0)
    method75(v18, v9, v14, v16, v17, v19)
    del v14; del v17
    v20 = v3.v3
    v21 = v20 + (<unsigned long long>1)
    v3.v3 = v21
    return v5
cdef double method76(unsigned long long v0, UH0 v1, double v2, double v3, UH0 v4, double v5, double v6, double v7, double v8, Mut0 v9, Mut2 v10, Heap0 v11, signed long v12, US1 v13, US1 v14, unsigned char v15, signed long v16, US1 v17, unsigned char v18, signed long v19, numpy.ndarray[double,ndim=1] v20, numpy.ndarray[signed long,ndim=1] v21, unsigned long long v22, double v23):
    cdef bint v24
    cdef unsigned long long v25
    cdef double v26
    cdef US0 v27
    cdef bint v28
    cdef bint v31
    cdef double v29
    cdef double v39
    cdef double v32
    cdef double v33
    cdef US2 v34
    cdef UH0 v35
    cdef US2 v36
    cdef UH0 v37
    cdef double v40
    cdef double v41
    v24 = v22 < v0
    if v24:
        v25 = v22 + (<unsigned long long>1)
        v26 = v20[v22]
        v27 = v21[v22]
        v28 = v26 == (<double>0.000000)
        if v28:
            v29 = v5 - v6
            v31 = v29 == (<double>float('-inf'))
        else:
            v31 = 0
        if v31:
            v39 = (<double>0.000000)
        else:
            v32 = libc.math.log(v26)
            v33 = v32 + v2
            v34 = US2_0(v27)
            v35 = UH0_0(v34, v4)
            del v34
            v36 = US2_0(v27)
            v37 = UH0_0(v36, v1)
            del v36
            v39 = method72(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v27, v7, v8, v35, v5, v6, v37, v33, v3)
            del v35; del v37
        v40 = v39 * v26
        v41 = v23 + v40
        return method76(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v25, v41)
    else:
        return v23
cdef double method72(Mut0 v0, Mut2 v1, Heap0 v2, signed long v3, US1 v4, US1 v5, unsigned char v6, signed long v7, US1 v8, unsigned char v9, signed long v10, US0 v11, double v12, double v13, UH0 v14, double v15, double v16, UH0 v17, double v18, double v19):
    cdef signed long v20
    cdef signed long v21
    cdef signed long v22
    cdef bint v23
    cdef bint v25
    cdef signed long v49
    cdef bint v26
    cdef bint v27
    cdef bint v30
    cdef bint v31
    cdef signed long v32
    cdef signed long v33
    cdef bint v34
    cdef signed long v35
    cdef signed long v36
    cdef bint v37
    cdef signed long v40
    cdef bint v38
    cdef bint v41
    cdef bint v42
    cdef bint v43
    cdef bint v50
    cdef unsigned char v54
    cdef signed long v55
    cdef bint v51
    cdef bint v56
    cdef signed long v58
    cdef bint v59
    cdef signed long v61
    cdef signed long v62
    cdef bint v63
    cdef signed long v65
    cdef signed long v66
    cdef US1 v67
    cdef unsigned char v68
    cdef signed long v69
    cdef US1 v70
    cdef unsigned char v71
    cdef signed long v72
    cdef double v73
    cdef bint v74
    cdef signed long v76
    cdef bint v77
    cdef signed long v79
    cdef signed long v80
    cdef signed long v82
    cdef signed long v83
    cdef US1 v84
    cdef unsigned char v85
    cdef signed long v86
    cdef US1 v87
    cdef unsigned char v88
    cdef signed long v89
    cdef double v90
    cdef signed long v91
    cdef signed long v92
    cdef numpy.ndarray[signed long,ndim=1] v93
    cdef bint v94
    cdef Mut3 v95
    cdef double v96
    cdef double v97
    cdef double v98
    cdef double v99
    cdef numpy.ndarray[double,ndim=1] v100
    cdef numpy.ndarray[double,ndim=1] v101
    cdef unsigned long long v102
    cdef unsigned long long v103
    cdef bint v104
    cdef bint v105
    cdef numpy.ndarray[double,ndim=1] v106
    cdef unsigned long long v107
    cdef double v108
    cdef double v109
    cdef unsigned char v110
    cdef numpy.ndarray[signed long,ndim=1] v112
    cdef numpy.ndarray[double,ndim=1] v113
    cdef numpy.ndarray[object,ndim=1] v114
    cdef numpy.ndarray[double,ndim=1] v115
    cdef Tuple1 tmp8
    cdef numpy.ndarray[double,ndim=1] v116
    cdef unsigned long long v117
    cdef unsigned long long v118
    cdef bint v119
    cdef bint v120
    cdef unsigned long long v121
    cdef double v122
    if v11 == 0: # call
        v20 = method14(v4)
        v21 = method14(v8)
        v22 = method14(v5)
        v23 = v21 == v20
        if v23:
            v25 = v22 == v20
        else:
            v25 = 0
        if v25:
            v26 = v21 < v22
            if v26:
                v49 = (<signed long>-1)
            else:
                v27 = v21 > v22
                if v27:
                    v49 = (<signed long>1)
                else:
                    v49 = (<signed long>0)
        else:
            if v23:
                v49 = (<signed long>1)
            else:
                v30 = v22 == v20
                if v30:
                    v49 = (<signed long>-1)
                else:
                    v31 = v21 > v20
                    if v31:
                        v32, v33 = v21, v20
                    else:
                        v32, v33 = v20, v21
                    v34 = v22 > v20
                    if v34:
                        v35, v36 = v22, v20
                    else:
                        v35, v36 = v20, v22
                    v37 = v32 < v35
                    if v37:
                        v40 = (<signed long>-1)
                    else:
                        v38 = v32 > v35
                        if v38:
                            v40 = (<signed long>1)
                        else:
                            v40 = (<signed long>0)
                    v41 = v40 == (<signed long>0)
                    if v41:
                        v42 = v33 < v36
                        if v42:
                            v49 = (<signed long>-1)
                        else:
                            v43 = v33 > v36
                            if v43:
                                v49 = (<signed long>1)
                            else:
                                v49 = (<signed long>0)
                    else:
                        v49 = v40
        v50 = v49 == (<signed long>1)
        if v50:
            v54, v55 = v9, v7
        else:
            v51 = v49 == (<signed long>-1)
            if v51:
                v54, v55 = v6, v7
            else:
                v54, v55 = v9, (<signed long>0)
        v56 = v54 == (<unsigned char>0)
        if v56:
            v58 = v55
        else:
            v58 = -v55
        v59 = v9 == (<unsigned char>0)
        if v59:
            v61 = v58
        else:
            v61 = -v58
        v62 = v61 + v7
        v63 = v6 == (<unsigned char>0)
        if v63:
            v65 = v58
        else:
            v65 = -v58
        v66 = v65 + v7
        if v59:
            v67, v68, v69, v70, v71, v72 = v8, v9, v62, v5, v6, v66
        else:
            v67, v68, v69, v70, v71, v72 = v5, v6, v66, v8, v9, v62
        v73 = <double>v58
        return v73
    elif v11 == 1: # fold
        v74 = v6 == (<unsigned char>0)
        if v74:
            v76 = v10
        else:
            v76 = -v10
        v77 = v9 == (<unsigned char>0)
        if v77:
            v79 = v76
        else:
            v79 = -v76
        v80 = v79 + v10
        if v74:
            v82 = v76
        else:
            v82 = -v76
        v83 = v82 + v7
        if v77:
            v84, v85, v86, v87, v88, v89 = v8, v9, v80, v5, v6, v83
        else:
            v84, v85, v86, v87, v88, v89 = v5, v6, v83, v8, v9, v80
        v90 = <double>v76
        return v90
    elif v11 == 2: # raise
        v91 = v3 - (<signed long>1)
        v92 = v7 + (<signed long>4)
        v93 = method12(v2, v8, v9, v92, v5, v6, v7, v91)
        v94 = v6 == (<unsigned char>0)
        if v94:
            v95 = method52(v1, v93, v14)
            v96 = v13 + v19
            v97 = v12 + v18
            v98 = v97 - v96
            v99 = libc.math.exp(v98)
            v100 = v95.v2
            v101 = method59(v100)
            del v100
            v102 = len(v101)
            v103 = len(v93)
            v104 = v102 == v103
            v105 = v104 != 1
            if v105:
                raise Exception("The two arrays have to have the same size.")
            else:
                pass
            v106 = numpy.empty(v102,dtype=numpy.float64)
            v107 = (<unsigned long long>0)
            v108 = (<double>0.000000)
            v109 = method71(v102, v17, v18, v19, v14, v15, v16, v12, v13, v0, v1, v2, v91, v4, v8, v9, v92, v5, v6, v7, v99, v101, v93, v106, v107, v108)
            del v93; del v101
            v110 = (<unsigned char>0)
            return method73(v14, v15, v16, v95, v99, v109, v106, v110)
        else:
            tmp8 = method16(v0, v93, v17)
            v112, v113, v114, v115 = tmp8.v0, tmp8.v1, tmp8.v2, tmp8.v3
            del tmp8
            del v112; del v114; del v115
            v116 = method26(v113)
            del v113
            v117 = len(v116)
            v118 = len(v93)
            v119 = v117 == v118
            v120 = v119 == 0
            if v120:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v121 = (<unsigned long long>0)
            v122 = (<double>0.000000)
            return method76(v117, v17, v18, v19, v14, v15, v16, v12, v13, v0, v1, v2, v91, v4, v8, v9, v92, v5, v6, v7, v116, v93, v121, v122)
cdef double method71(unsigned long long v0, UH0 v1, double v2, double v3, UH0 v4, double v5, double v6, double v7, double v8, Mut0 v9, Mut2 v10, Heap0 v11, signed long v12, US1 v13, US1 v14, unsigned char v15, signed long v16, US1 v17, unsigned char v18, signed long v19, double v20, numpy.ndarray[double,ndim=1] v21, numpy.ndarray[signed long,ndim=1] v22, numpy.ndarray[double,ndim=1] v23, unsigned long long v24, double v25):
    cdef bint v26
    cdef unsigned long long v27
    cdef double v28
    cdef US0 v29
    cdef bint v30
    cdef bint v32
    cdef double v40
    cdef double v33
    cdef double v34
    cdef US2 v35
    cdef UH0 v36
    cdef US2 v37
    cdef UH0 v38
    cdef double v41
    cdef double v42
    v26 = v24 < v0
    if v26:
        v27 = v24 + (<unsigned long long>1)
        v28 = v21[v24]
        v29 = v22[v24]
        v30 = v28 == (<double>0.000000)
        if v30:
            v32 = v20 == (<double>0.000000)
        else:
            v32 = 0
        if v32:
            v40 = (<double>0.000000)
        else:
            v33 = libc.math.log(v28)
            v34 = v33 + v5
            v35 = US2_0(v29)
            v36 = UH0_0(v35, v4)
            del v35
            v37 = US2_0(v29)
            v38 = UH0_0(v37, v1)
            del v37
            v40 = method72(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v29, v7, v8, v36, v34, v6, v38, v2, v3)
            del v36; del v38
        v41 = v40 * v28
        v42 = v25 + v41
        v23[v24] = v40
        return method71(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v27, v42)
    else:
        return v25
cdef double method70(Mut0 v0, Mut2 v1, Heap0 v2, US1 v3, unsigned char v4, signed long v5, US1 v6, unsigned char v7, signed long v8, US1 v9, US0 v10, double v11, double v12, UH0 v13, double v14, double v15, UH0 v16, double v17, double v18):
    cdef signed long v19
    cdef numpy.ndarray[signed long,ndim=1] v20
    cdef bint v21
    cdef Mut3 v22
    cdef double v23
    cdef double v24
    cdef double v25
    cdef double v26
    cdef numpy.ndarray[double,ndim=1] v27
    cdef numpy.ndarray[double,ndim=1] v28
    cdef unsigned long long v29
    cdef unsigned long long v30
    cdef bint v31
    cdef bint v32
    cdef numpy.ndarray[double,ndim=1] v33
    cdef unsigned long long v34
    cdef double v35
    cdef double v36
    cdef unsigned char v37
    cdef numpy.ndarray[signed long,ndim=1] v39
    cdef numpy.ndarray[double,ndim=1] v40
    cdef numpy.ndarray[object,ndim=1] v41
    cdef numpy.ndarray[double,ndim=1] v42
    cdef Tuple1 tmp9
    cdef numpy.ndarray[double,ndim=1] v43
    cdef unsigned long long v44
    cdef unsigned long long v45
    cdef bint v46
    cdef bint v47
    cdef unsigned long long v48
    cdef double v49
    cdef object v52
    cdef signed long v54
    cdef signed long v55
    cdef numpy.ndarray[signed long,ndim=1] v56
    cdef bint v57
    cdef Mut3 v58
    cdef double v59
    cdef double v60
    cdef double v61
    cdef double v62
    cdef numpy.ndarray[double,ndim=1] v63
    cdef numpy.ndarray[double,ndim=1] v64
    cdef unsigned long long v65
    cdef unsigned long long v66
    cdef bint v67
    cdef bint v68
    cdef numpy.ndarray[double,ndim=1] v69
    cdef unsigned long long v70
    cdef double v71
    cdef double v72
    cdef unsigned char v73
    cdef numpy.ndarray[signed long,ndim=1] v75
    cdef numpy.ndarray[double,ndim=1] v76
    cdef numpy.ndarray[object,ndim=1] v77
    cdef numpy.ndarray[double,ndim=1] v78
    cdef Tuple1 tmp10
    cdef numpy.ndarray[double,ndim=1] v79
    cdef unsigned long long v80
    cdef unsigned long long v81
    cdef bint v82
    cdef bint v83
    cdef unsigned long long v84
    cdef double v85
    if v10 == 0: # call
        v19 = (<signed long>2)
        v20 = method12(v2, v6, v7, v8, v3, v4, v5, v19)
        v21 = v4 == (<unsigned char>0)
        if v21:
            v22 = method52(v1, v20, v13)
            v23 = v12 + v18
            v24 = v11 + v17
            v25 = v24 - v23
            v26 = libc.math.exp(v25)
            v27 = v22.v2
            v28 = method59(v27)
            del v27
            v29 = len(v28)
            v30 = len(v20)
            v31 = v29 == v30
            v32 = v31 != 1
            if v32:
                raise Exception("The two arrays have to have the same size.")
            else:
                pass
            v33 = numpy.empty(v29,dtype=numpy.float64)
            v34 = (<unsigned long long>0)
            v35 = (<double>0.000000)
            v36 = method71(v29, v16, v17, v18, v13, v14, v15, v11, v12, v0, v1, v2, v19, v9, v6, v7, v8, v3, v4, v5, v26, v28, v20, v33, v34, v35)
            del v20; del v28
            v37 = (<unsigned char>0)
            return method73(v13, v14, v15, v22, v26, v36, v33, v37)
        else:
            tmp9 = method16(v0, v20, v16)
            v39, v40, v41, v42 = tmp9.v0, tmp9.v1, tmp9.v2, tmp9.v3
            del tmp9
            del v39; del v41; del v42
            v43 = method26(v40)
            del v40
            v44 = len(v43)
            v45 = len(v20)
            v46 = v44 == v45
            v47 = v46 == 0
            if v47:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v48 = (<unsigned long long>0)
            v49 = (<double>0.000000)
            return method76(v44, v16, v17, v18, v13, v14, v15, v11, v12, v0, v1, v2, v19, v9, v6, v7, v8, v3, v4, v5, v43, v20, v48, v49)
    elif v10 == 1: # fold
        raise Exception("impossible")
    elif v10 == 2: # raise
        v54 = (<signed long>1)
        v55 = v5 + (<signed long>4)
        v56 = method12(v2, v6, v7, v55, v3, v4, v5, v54)
        v57 = v4 == (<unsigned char>0)
        if v57:
            v58 = method52(v1, v56, v13)
            v59 = v12 + v18
            v60 = v11 + v17
            v61 = v60 - v59
            v62 = libc.math.exp(v61)
            v63 = v58.v2
            v64 = method59(v63)
            del v63
            v65 = len(v64)
            v66 = len(v56)
            v67 = v65 == v66
            v68 = v67 != 1
            if v68:
                raise Exception("The two arrays have to have the same size.")
            else:
                pass
            v69 = numpy.empty(v65,dtype=numpy.float64)
            v70 = (<unsigned long long>0)
            v71 = (<double>0.000000)
            v72 = method71(v65, v16, v17, v18, v13, v14, v15, v11, v12, v0, v1, v2, v54, v9, v6, v7, v55, v3, v4, v5, v62, v64, v56, v69, v70, v71)
            del v56; del v64
            v73 = (<unsigned char>0)
            return method73(v13, v14, v15, v58, v62, v72, v69, v73)
        else:
            tmp10 = method16(v0, v56, v16)
            v75, v76, v77, v78 = tmp10.v0, tmp10.v1, tmp10.v2, tmp10.v3
            del tmp10
            del v75; del v77; del v78
            v79 = method26(v76)
            del v76
            v80 = len(v79)
            v81 = len(v56)
            v82 = v80 == v81
            v83 = v82 == 0
            if v83:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v84 = (<unsigned long long>0)
            v85 = (<double>0.000000)
            return method76(v80, v16, v17, v18, v13, v14, v15, v11, v12, v0, v1, v2, v54, v9, v6, v7, v55, v3, v4, v5, v79, v56, v84, v85)
cdef double method69(unsigned long long v0, UH0 v1, double v2, double v3, UH0 v4, double v5, double v6, double v7, double v8, Mut0 v9, Mut2 v10, Heap0 v11, US1 v12, unsigned char v13, signed long v14, US1 v15, unsigned char v16, signed long v17, US1 v18, double v19, numpy.ndarray[double,ndim=1] v20, numpy.ndarray[signed long,ndim=1] v21, numpy.ndarray[double,ndim=1] v22, unsigned long long v23, double v24):
    cdef bint v25
    cdef unsigned long long v26
    cdef double v27
    cdef US0 v28
    cdef bint v29
    cdef bint v31
    cdef double v39
    cdef double v32
    cdef double v33
    cdef US2 v34
    cdef UH0 v35
    cdef US2 v36
    cdef UH0 v37
    cdef double v40
    cdef double v41
    v25 = v23 < v0
    if v25:
        v26 = v23 + (<unsigned long long>1)
        v27 = v20[v23]
        v28 = v21[v23]
        v29 = v27 == (<double>0.000000)
        if v29:
            v31 = v19 == (<double>0.000000)
        else:
            v31 = 0
        if v31:
            v39 = (<double>0.000000)
        else:
            v32 = libc.math.log(v27)
            v33 = v32 + v5
            v34 = US2_0(v28)
            v35 = UH0_0(v34, v4)
            del v34
            v36 = US2_0(v28)
            v37 = UH0_0(v36, v1)
            del v36
            v39 = method70(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v28, v7, v8, v35, v33, v6, v37, v2, v3)
            del v35; del v37
        v40 = v39 * v27
        v41 = v24 + v40
        v22[v23] = v39
        return method69(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v26, v41)
    else:
        return v24
cdef double method77(unsigned long long v0, UH0 v1, double v2, double v3, UH0 v4, double v5, double v6, double v7, double v8, Mut0 v9, Mut2 v10, Heap0 v11, US1 v12, unsigned char v13, signed long v14, US1 v15, unsigned char v16, signed long v17, US1 v18, numpy.ndarray[double,ndim=1] v19, numpy.ndarray[signed long,ndim=1] v20, unsigned long long v21, double v22):
    cdef bint v23
    cdef unsigned long long v24
    cdef double v25
    cdef US0 v26
    cdef bint v27
    cdef bint v30
    cdef double v28
    cdef double v38
    cdef double v31
    cdef double v32
    cdef US2 v33
    cdef UH0 v34
    cdef US2 v35
    cdef UH0 v36
    cdef double v39
    cdef double v40
    v23 = v21 < v0
    if v23:
        v24 = v21 + (<unsigned long long>1)
        v25 = v19[v21]
        v26 = v20[v21]
        v27 = v25 == (<double>0.000000)
        if v27:
            v28 = v5 - v6
            v30 = v28 == (<double>float('-inf'))
        else:
            v30 = 0
        if v30:
            v38 = (<double>0.000000)
        else:
            v31 = libc.math.log(v25)
            v32 = v31 + v2
            v33 = US2_0(v26)
            v34 = UH0_0(v33, v4)
            del v33
            v35 = US2_0(v26)
            v36 = UH0_0(v35, v1)
            del v35
            v38 = method70(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v26, v7, v8, v34, v5, v6, v36, v32, v3)
            del v34; del v36
        v39 = v38 * v25
        v40 = v22 + v39
        return method77(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v24, v40)
    else:
        return v22
cdef double method68(Mut0 v0, Mut2 v1, Heap0 v2, US1 v3, unsigned char v4, signed long v5, US1 v6, unsigned char v7, signed long v8, US1 v9, double v10, double v11, UH0 v12, double v13, double v14, UH0 v15, double v16, double v17):
    cdef numpy.ndarray[signed long,ndim=1] v18
    cdef bint v19
    cdef Mut3 v20
    cdef double v21
    cdef double v22
    cdef double v23
    cdef double v24
    cdef numpy.ndarray[double,ndim=1] v25
    cdef numpy.ndarray[double,ndim=1] v26
    cdef unsigned long long v27
    cdef unsigned long long v28
    cdef bint v29
    cdef bint v30
    cdef numpy.ndarray[double,ndim=1] v31
    cdef unsigned long long v32
    cdef double v33
    cdef double v34
    cdef unsigned char v35
    cdef numpy.ndarray[signed long,ndim=1] v37
    cdef numpy.ndarray[double,ndim=1] v38
    cdef numpy.ndarray[object,ndim=1] v39
    cdef numpy.ndarray[double,ndim=1] v40
    cdef Tuple1 tmp11
    cdef numpy.ndarray[double,ndim=1] v41
    cdef unsigned long long v42
    cdef unsigned long long v43
    cdef bint v44
    cdef bint v45
    cdef unsigned long long v46
    cdef double v47
    v18 = v2.v2
    v19 = v7 == (<unsigned char>0)
    if v19:
        v20 = method52(v1, v18, v12)
        v21 = v11 + v17
        v22 = v10 + v16
        v23 = v22 - v21
        v24 = libc.math.exp(v23)
        v25 = v20.v2
        v26 = method59(v25)
        del v25
        v27 = len(v26)
        v28 = len(v18)
        v29 = v27 == v28
        v30 = v29 != 1
        if v30:
            raise Exception("The two arrays have to have the same size.")
        else:
            pass
        v31 = numpy.empty(v27,dtype=numpy.float64)
        v32 = (<unsigned long long>0)
        v33 = (<double>0.000000)
        v34 = method69(v27, v15, v16, v17, v12, v13, v14, v10, v11, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v24, v26, v18, v31, v32, v33)
        del v18; del v26
        v35 = (<unsigned char>0)
        return method73(v12, v13, v14, v20, v24, v34, v31, v35)
    else:
        tmp11 = method16(v0, v18, v15)
        v37, v38, v39, v40 = tmp11.v0, tmp11.v1, tmp11.v2, tmp11.v3
        del tmp11
        del v37; del v39; del v40
        v41 = method26(v38)
        del v38
        v42 = len(v41)
        v43 = len(v18)
        v44 = v42 == v43
        v45 = v44 == 0
        if v45:
            raise Exception("The length of the two arrays has to the same.")
        else:
            pass
        v46 = (<unsigned long long>0)
        v47 = (<double>0.000000)
        return method77(v42, v15, v16, v17, v12, v13, v14, v10, v11, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v41, v18, v46, v47)
cdef double method67(numpy.ndarray[signed long,ndim=1] v0, Mut0 v1, Mut2 v2, Heap0 v3, US1 v4, unsigned char v5, signed long v6, US1 v7, unsigned char v8, signed long v9, double v10, double v11, UH0 v12, double v13, double v14, UH0 v15, double v16, double v17, unsigned long long v18, double v19):
    cdef unsigned long long v20
    cdef double v21
    cdef double v22
    cdef bint v23
    cdef US1 v24
    cdef double v25
    cdef double v26
    cdef double v27
    cdef double v28
    cdef US2 v29
    cdef UH0 v30
    cdef US2 v31
    cdef UH0 v32
    cdef double v33
    cdef unsigned long long v34
    cdef double v35
    cdef double v37
    v20 = len(v0)
    v21 = <double>v20
    v22 = (<double>1.000000) / v21
    v23 = v18 < v20
    if v23:
        v24 = v0[v18]
        v25 = <double>v20
        v26 = (<double>1.000000) / v25
        v27 = libc.math.log(v26)
        v28 = v27 + v10
        v29 = US2_1(v24)
        v30 = UH0_0(v29, v12)
        del v29
        v31 = US2_1(v24)
        v32 = UH0_0(v31, v15)
        del v31
        v33 = method68(v1, v2, v3, v4, v5, v6, v7, v8, v9, v24, v28, v11, v30, v13, v14, v32, v16, v17)
        del v30; del v32
        v34 = v18 + (<unsigned long long>1)
        v35 = v19 + v33
        return method67(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v34, v35)
    else:
        v37 = v19 * v22
        return v37
cdef double method80(unsigned long long v0, UH0 v1, double v2, double v3, UH0 v4, double v5, double v6, double v7, double v8, Mut0 v9, Mut2 v10, Heap0 v11, numpy.ndarray[signed long,ndim=1] v12, signed long v13, US1 v14, unsigned char v15, signed long v16, US1 v17, unsigned char v18, signed long v19, numpy.ndarray[double,ndim=1] v20, numpy.ndarray[signed long,ndim=1] v21, unsigned long long v22, double v23):
    cdef bint v24
    cdef unsigned long long v25
    cdef double v26
    cdef US0 v27
    cdef bint v28
    cdef bint v31
    cdef double v29
    cdef double v39
    cdef double v32
    cdef double v33
    cdef US2 v34
    cdef UH0 v35
    cdef US2 v36
    cdef UH0 v37
    cdef double v40
    cdef double v41
    v24 = v22 < v0
    if v24:
        v25 = v22 + (<unsigned long long>1)
        v26 = v20[v22]
        v27 = v21[v22]
        v28 = v26 == (<double>0.000000)
        if v28:
            v29 = v5 - v6
            v31 = v29 == (<double>float('-inf'))
        else:
            v31 = 0
        if v31:
            v39 = (<double>0.000000)
        else:
            v32 = libc.math.log(v26)
            v33 = v32 + v2
            v34 = US2_0(v27)
            v35 = UH0_0(v34, v4)
            del v34
            v36 = US2_0(v27)
            v37 = UH0_0(v36, v1)
            del v36
            v39 = method79(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v27, v7, v8, v35, v5, v6, v37, v33, v3)
            del v35; del v37
        v40 = v39 * v26
        v41 = v23 + v40
        return method80(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v25, v41)
    else:
        return v23
cdef double method79(Mut0 v0, Mut2 v1, Heap0 v2, numpy.ndarray[signed long,ndim=1] v3, signed long v4, US1 v5, unsigned char v6, signed long v7, US1 v8, unsigned char v9, signed long v10, US0 v11, double v12, double v13, UH0 v14, double v15, double v16, UH0 v17, double v18, double v19):
    cdef bint v20
    cdef US1 v21
    cdef unsigned char v22
    cdef signed long v23
    cdef US1 v24
    cdef unsigned char v25
    cdef signed long v26
    cdef unsigned long long v27
    cdef double v28
    cdef bint v30
    cdef signed long v32
    cdef bint v33
    cdef signed long v35
    cdef signed long v36
    cdef signed long v38
    cdef signed long v39
    cdef US1 v40
    cdef unsigned char v41
    cdef signed long v42
    cdef US1 v43
    cdef unsigned char v44
    cdef signed long v45
    cdef double v46
    cdef signed long v47
    cdef signed long v48
    cdef numpy.ndarray[signed long,ndim=1] v49
    cdef bint v50
    cdef Mut3 v51
    cdef double v52
    cdef double v53
    cdef double v54
    cdef double v55
    cdef numpy.ndarray[double,ndim=1] v56
    cdef numpy.ndarray[double,ndim=1] v57
    cdef unsigned long long v58
    cdef unsigned long long v59
    cdef bint v60
    cdef bint v61
    cdef numpy.ndarray[double,ndim=1] v62
    cdef unsigned long long v63
    cdef double v64
    cdef double v65
    cdef unsigned char v66
    cdef numpy.ndarray[signed long,ndim=1] v68
    cdef numpy.ndarray[double,ndim=1] v69
    cdef numpy.ndarray[object,ndim=1] v70
    cdef numpy.ndarray[double,ndim=1] v71
    cdef Tuple1 tmp12
    cdef numpy.ndarray[double,ndim=1] v72
    cdef unsigned long long v73
    cdef unsigned long long v74
    cdef bint v75
    cdef bint v76
    cdef unsigned long long v77
    cdef double v78
    if v11 == 0: # call
        v20 = v9 == (<unsigned char>0)
        if v20:
            v21, v22, v23, v24, v25, v26 = v8, v9, v7, v5, v6, v7
        else:
            v21, v22, v23, v24, v25, v26 = v5, v6, v7, v8, v9, v7
        v27 = (<unsigned long long>0)
        v28 = (<double>0.000000)
        return method67(v3, v0, v1, v2, v24, v25, v26, v21, v22, v23, v12, v13, v14, v15, v16, v17, v18, v19, v27, v28)
    elif v11 == 1: # fold
        v30 = v6 == (<unsigned char>0)
        if v30:
            v32 = v10
        else:
            v32 = -v10
        v33 = v9 == (<unsigned char>0)
        if v33:
            v35 = v32
        else:
            v35 = -v32
        v36 = v35 + v10
        if v30:
            v38 = v32
        else:
            v38 = -v32
        v39 = v38 + v7
        if v33:
            v40, v41, v42, v43, v44, v45 = v8, v9, v36, v5, v6, v39
        else:
            v40, v41, v42, v43, v44, v45 = v5, v6, v39, v8, v9, v36
        v46 = <double>v32
        return v46
    elif v11 == 2: # raise
        v47 = v4 - (<signed long>1)
        v48 = v7 + (<signed long>2)
        v49 = method12(v2, v8, v9, v48, v5, v6, v7, v47)
        v50 = v6 == (<unsigned char>0)
        if v50:
            v51 = method52(v1, v49, v14)
            v52 = v13 + v19
            v53 = v12 + v18
            v54 = v53 - v52
            v55 = libc.math.exp(v54)
            v56 = v51.v2
            v57 = method59(v56)
            del v56
            v58 = len(v57)
            v59 = len(v49)
            v60 = v58 == v59
            v61 = v60 != 1
            if v61:
                raise Exception("The two arrays have to have the same size.")
            else:
                pass
            v62 = numpy.empty(v58,dtype=numpy.float64)
            v63 = (<unsigned long long>0)
            v64 = (<double>0.000000)
            v65 = method78(v58, v17, v18, v19, v14, v15, v16, v12, v13, v0, v1, v2, v3, v47, v8, v9, v48, v5, v6, v7, v55, v57, v49, v62, v63, v64)
            del v49; del v57
            v66 = (<unsigned char>0)
            return method73(v14, v15, v16, v51, v55, v65, v62, v66)
        else:
            tmp12 = method16(v0, v49, v17)
            v68, v69, v70, v71 = tmp12.v0, tmp12.v1, tmp12.v2, tmp12.v3
            del tmp12
            del v68; del v70; del v71
            v72 = method26(v69)
            del v69
            v73 = len(v72)
            v74 = len(v49)
            v75 = v73 == v74
            v76 = v75 == 0
            if v76:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v77 = (<unsigned long long>0)
            v78 = (<double>0.000000)
            return method80(v73, v17, v18, v19, v14, v15, v16, v12, v13, v0, v1, v2, v3, v47, v8, v9, v48, v5, v6, v7, v72, v49, v77, v78)
cdef double method78(unsigned long long v0, UH0 v1, double v2, double v3, UH0 v4, double v5, double v6, double v7, double v8, Mut0 v9, Mut2 v10, Heap0 v11, numpy.ndarray[signed long,ndim=1] v12, signed long v13, US1 v14, unsigned char v15, signed long v16, US1 v17, unsigned char v18, signed long v19, double v20, numpy.ndarray[double,ndim=1] v21, numpy.ndarray[signed long,ndim=1] v22, numpy.ndarray[double,ndim=1] v23, unsigned long long v24, double v25):
    cdef bint v26
    cdef unsigned long long v27
    cdef double v28
    cdef US0 v29
    cdef bint v30
    cdef bint v32
    cdef double v40
    cdef double v33
    cdef double v34
    cdef US2 v35
    cdef UH0 v36
    cdef US2 v37
    cdef UH0 v38
    cdef double v41
    cdef double v42
    v26 = v24 < v0
    if v26:
        v27 = v24 + (<unsigned long long>1)
        v28 = v21[v24]
        v29 = v22[v24]
        v30 = v28 == (<double>0.000000)
        if v30:
            v32 = v20 == (<double>0.000000)
        else:
            v32 = 0
        if v32:
            v40 = (<double>0.000000)
        else:
            v33 = libc.math.log(v28)
            v34 = v33 + v5
            v35 = US2_0(v29)
            v36 = UH0_0(v35, v4)
            del v35
            v37 = US2_0(v29)
            v38 = UH0_0(v37, v1)
            del v37
            v40 = method79(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v29, v7, v8, v36, v34, v6, v38, v2, v3)
            del v36; del v38
        v41 = v40 * v28
        v42 = v25 + v41
        v23[v24] = v40
        return method78(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v27, v42)
    else:
        return v25
cdef double method66(Mut0 v0, Mut2 v1, Heap0 v2, numpy.ndarray[signed long,ndim=1] v3, signed long v4, US1 v5, unsigned char v6, signed long v7, US1 v8, unsigned char v9, US0 v10, double v11, double v12, UH0 v13, double v14, double v15, UH0 v16, double v17, double v18):
    cdef bint v19
    cdef US1 v20
    cdef unsigned char v21
    cdef signed long v22
    cdef US1 v23
    cdef unsigned char v24
    cdef signed long v25
    cdef unsigned long long v26
    cdef double v27
    cdef bint v29
    cdef signed long v31
    cdef bint v32
    cdef signed long v34
    cdef signed long v35
    cdef signed long v37
    cdef signed long v38
    cdef US1 v39
    cdef unsigned char v40
    cdef signed long v41
    cdef US1 v42
    cdef unsigned char v43
    cdef signed long v44
    cdef double v45
    cdef signed long v46
    cdef signed long v47
    cdef numpy.ndarray[signed long,ndim=1] v48
    cdef bint v49
    cdef Mut3 v50
    cdef double v51
    cdef double v52
    cdef double v53
    cdef double v54
    cdef numpy.ndarray[double,ndim=1] v55
    cdef numpy.ndarray[double,ndim=1] v56
    cdef unsigned long long v57
    cdef unsigned long long v58
    cdef bint v59
    cdef bint v60
    cdef numpy.ndarray[double,ndim=1] v61
    cdef unsigned long long v62
    cdef double v63
    cdef double v64
    cdef unsigned char v65
    cdef numpy.ndarray[signed long,ndim=1] v67
    cdef numpy.ndarray[double,ndim=1] v68
    cdef numpy.ndarray[object,ndim=1] v69
    cdef numpy.ndarray[double,ndim=1] v70
    cdef Tuple1 tmp13
    cdef numpy.ndarray[double,ndim=1] v71
    cdef unsigned long long v72
    cdef unsigned long long v73
    cdef bint v74
    cdef bint v75
    cdef unsigned long long v76
    cdef double v77
    if v10 == 0: # call
        v19 = v9 == (<unsigned char>0)
        if v19:
            v20, v21, v22, v23, v24, v25 = v8, v9, v7, v5, v6, v7
        else:
            v20, v21, v22, v23, v24, v25 = v5, v6, v7, v8, v9, v7
        v26 = (<unsigned long long>0)
        v27 = (<double>0.000000)
        return method67(v3, v0, v1, v2, v23, v24, v25, v20, v21, v22, v11, v12, v13, v14, v15, v16, v17, v18, v26, v27)
    elif v10 == 1: # fold
        v29 = v6 == (<unsigned char>0)
        if v29:
            v31 = v7
        else:
            v31 = -v7
        v32 = v9 == (<unsigned char>0)
        if v32:
            v34 = v31
        else:
            v34 = -v31
        v35 = v34 + v7
        if v29:
            v37 = v31
        else:
            v37 = -v31
        v38 = v37 + v7
        if v32:
            v39, v40, v41, v42, v43, v44 = v8, v9, v35, v5, v6, v38
        else:
            v39, v40, v41, v42, v43, v44 = v5, v6, v38, v8, v9, v35
        v45 = <double>v31
        return v45
    elif v10 == 2: # raise
        v46 = v4 - (<signed long>1)
        v47 = v7 + (<signed long>2)
        v48 = method12(v2, v8, v9, v47, v5, v6, v7, v46)
        v49 = v6 == (<unsigned char>0)
        if v49:
            v50 = method52(v1, v48, v13)
            v51 = v12 + v18
            v52 = v11 + v17
            v53 = v52 - v51
            v54 = libc.math.exp(v53)
            v55 = v50.v2
            v56 = method59(v55)
            del v55
            v57 = len(v56)
            v58 = len(v48)
            v59 = v57 == v58
            v60 = v59 != 1
            if v60:
                raise Exception("The two arrays have to have the same size.")
            else:
                pass
            v61 = numpy.empty(v57,dtype=numpy.float64)
            v62 = (<unsigned long long>0)
            v63 = (<double>0.000000)
            v64 = method78(v57, v16, v17, v18, v13, v14, v15, v11, v12, v0, v1, v2, v3, v46, v8, v9, v47, v5, v6, v7, v54, v56, v48, v61, v62, v63)
            del v48; del v56
            v65 = (<unsigned char>0)
            return method73(v13, v14, v15, v50, v54, v64, v61, v65)
        else:
            tmp13 = method16(v0, v48, v16)
            v67, v68, v69, v70 = tmp13.v0, tmp13.v1, tmp13.v2, tmp13.v3
            del tmp13
            del v67; del v69; del v70
            v71 = method26(v68)
            del v68
            v72 = len(v71)
            v73 = len(v48)
            v74 = v72 == v73
            v75 = v74 == 0
            if v75:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v76 = (<unsigned long long>0)
            v77 = (<double>0.000000)
            return method80(v72, v16, v17, v18, v13, v14, v15, v11, v12, v0, v1, v2, v3, v46, v8, v9, v47, v5, v6, v7, v71, v48, v76, v77)
cdef double method65(unsigned long long v0, UH0 v1, double v2, double v3, UH0 v4, double v5, double v6, double v7, double v8, Mut0 v9, Mut2 v10, Heap0 v11, numpy.ndarray[signed long,ndim=1] v12, signed long v13, US1 v14, unsigned char v15, signed long v16, US1 v17, unsigned char v18, double v19, numpy.ndarray[double,ndim=1] v20, numpy.ndarray[signed long,ndim=1] v21, numpy.ndarray[double,ndim=1] v22, unsigned long long v23, double v24):
    cdef bint v25
    cdef unsigned long long v26
    cdef double v27
    cdef US0 v28
    cdef bint v29
    cdef bint v31
    cdef double v39
    cdef double v32
    cdef double v33
    cdef US2 v34
    cdef UH0 v35
    cdef US2 v36
    cdef UH0 v37
    cdef double v40
    cdef double v41
    v25 = v23 < v0
    if v25:
        v26 = v23 + (<unsigned long long>1)
        v27 = v20[v23]
        v28 = v21[v23]
        v29 = v27 == (<double>0.000000)
        if v29:
            v31 = v19 == (<double>0.000000)
        else:
            v31 = 0
        if v31:
            v39 = (<double>0.000000)
        else:
            v32 = libc.math.log(v27)
            v33 = v32 + v5
            v34 = US2_0(v28)
            v35 = UH0_0(v34, v4)
            del v34
            v36 = US2_0(v28)
            v37 = UH0_0(v36, v1)
            del v36
            v39 = method66(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v28, v7, v8, v35, v33, v6, v37, v2, v3)
            del v35; del v37
        v40 = v39 * v27
        v41 = v24 + v40
        v22[v23] = v39
        return method65(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v26, v41)
    else:
        return v24
cdef double method81(unsigned long long v0, UH0 v1, double v2, double v3, UH0 v4, double v5, double v6, double v7, double v8, Mut0 v9, Mut2 v10, Heap0 v11, numpy.ndarray[signed long,ndim=1] v12, signed long v13, US1 v14, unsigned char v15, signed long v16, US1 v17, unsigned char v18, numpy.ndarray[double,ndim=1] v19, numpy.ndarray[signed long,ndim=1] v20, unsigned long long v21, double v22):
    cdef bint v23
    cdef unsigned long long v24
    cdef double v25
    cdef US0 v26
    cdef bint v27
    cdef bint v30
    cdef double v28
    cdef double v38
    cdef double v31
    cdef double v32
    cdef US2 v33
    cdef UH0 v34
    cdef US2 v35
    cdef UH0 v36
    cdef double v39
    cdef double v40
    v23 = v21 < v0
    if v23:
        v24 = v21 + (<unsigned long long>1)
        v25 = v19[v21]
        v26 = v20[v21]
        v27 = v25 == (<double>0.000000)
        if v27:
            v28 = v5 - v6
            v30 = v28 == (<double>float('-inf'))
        else:
            v30 = 0
        if v30:
            v38 = (<double>0.000000)
        else:
            v31 = libc.math.log(v25)
            v32 = v31 + v2
            v33 = US2_0(v26)
            v34 = UH0_0(v33, v4)
            del v33
            v35 = US2_0(v26)
            v36 = UH0_0(v35, v1)
            del v35
            v38 = method66(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v26, v7, v8, v34, v5, v6, v36, v32, v3)
            del v34; del v36
        v39 = v38 * v25
        v40 = v22 + v39
        return method81(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v24, v40)
    else:
        return v22
cdef double method64(Mut0 v0, Mut2 v1, US1 v2, US1 v3, Heap0 v4, numpy.ndarray[signed long,ndim=1] v5, US0 v6, double v7, double v8, UH0 v9, double v10, double v11, UH0 v12, double v13, double v14):
    cdef signed long v15
    cdef unsigned char v16
    cdef signed long v17
    cdef unsigned char v18
    cdef numpy.ndarray[signed long,ndim=1] v19
    cdef bint v20
    cdef Mut3 v21
    cdef double v22
    cdef double v23
    cdef double v24
    cdef double v25
    cdef numpy.ndarray[double,ndim=1] v26
    cdef numpy.ndarray[double,ndim=1] v27
    cdef unsigned long long v28
    cdef unsigned long long v29
    cdef bint v30
    cdef bint v31
    cdef numpy.ndarray[double,ndim=1] v32
    cdef unsigned long long v33
    cdef double v34
    cdef double v35
    cdef unsigned char v36
    cdef numpy.ndarray[signed long,ndim=1] v38
    cdef numpy.ndarray[double,ndim=1] v39
    cdef numpy.ndarray[object,ndim=1] v40
    cdef numpy.ndarray[double,ndim=1] v41
    cdef Tuple1 tmp14
    cdef numpy.ndarray[double,ndim=1] v42
    cdef unsigned long long v43
    cdef unsigned long long v44
    cdef bint v45
    cdef bint v46
    cdef unsigned long long v47
    cdef double v48
    cdef object v51
    cdef signed long v53
    cdef unsigned char v54
    cdef signed long v55
    cdef unsigned char v56
    cdef signed long v57
    cdef numpy.ndarray[signed long,ndim=1] v58
    cdef bint v59
    cdef Mut3 v60
    cdef double v61
    cdef double v62
    cdef double v63
    cdef double v64
    cdef numpy.ndarray[double,ndim=1] v65
    cdef numpy.ndarray[double,ndim=1] v66
    cdef unsigned long long v67
    cdef unsigned long long v68
    cdef bint v69
    cdef bint v70
    cdef numpy.ndarray[double,ndim=1] v71
    cdef unsigned long long v72
    cdef double v73
    cdef double v74
    cdef unsigned char v75
    cdef numpy.ndarray[signed long,ndim=1] v77
    cdef numpy.ndarray[double,ndim=1] v78
    cdef numpy.ndarray[object,ndim=1] v79
    cdef numpy.ndarray[double,ndim=1] v80
    cdef Tuple1 tmp15
    cdef numpy.ndarray[double,ndim=1] v81
    cdef unsigned long long v82
    cdef unsigned long long v83
    cdef bint v84
    cdef bint v85
    cdef unsigned long long v86
    cdef double v87
    if v6 == 0: # call
        v15 = (<signed long>2)
        v16 = (<unsigned char>1)
        v17 = (<signed long>1)
        v18 = (<unsigned char>0)
        v19 = method8(v4, v2, v18, v17, v3, v16, v15)
        v20 = v16 == (<unsigned char>0)
        if v20:
            v21 = method52(v1, v19, v9)
            v22 = v8 + v14
            v23 = v7 + v13
            v24 = v23 - v22
            v25 = libc.math.exp(v24)
            v26 = v21.v2
            v27 = method59(v26)
            del v26
            v28 = len(v27)
            v29 = len(v19)
            v30 = v28 == v29
            v31 = v30 != 1
            if v31:
                raise Exception("The two arrays have to have the same size.")
            else:
                pass
            v32 = numpy.empty(v28,dtype=numpy.float64)
            v33 = (<unsigned long long>0)
            v34 = (<double>0.000000)
            v35 = method65(v28, v12, v13, v14, v9, v10, v11, v7, v8, v0, v1, v4, v5, v15, v2, v18, v17, v3, v16, v25, v27, v19, v32, v33, v34)
            del v19; del v27
            v36 = (<unsigned char>0)
            return method73(v9, v10, v11, v21, v25, v35, v32, v36)
        else:
            tmp14 = method16(v0, v19, v12)
            v38, v39, v40, v41 = tmp14.v0, tmp14.v1, tmp14.v2, tmp14.v3
            del tmp14
            del v38; del v40; del v41
            v42 = method26(v39)
            del v39
            v43 = len(v42)
            v44 = len(v19)
            v45 = v43 == v44
            v46 = v45 == 0
            if v46:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v47 = (<unsigned long long>0)
            v48 = (<double>0.000000)
            return method81(v43, v12, v13, v14, v9, v10, v11, v7, v8, v0, v1, v4, v5, v15, v2, v18, v17, v3, v16, v42, v19, v47, v48)
    elif v6 == 1: # fold
        raise Exception("impossible")
    elif v6 == 2: # raise
        v53 = (<signed long>1)
        v54 = (<unsigned char>1)
        v55 = (<signed long>1)
        v56 = (<unsigned char>0)
        v57 = (<signed long>3)
        v58 = method12(v4, v2, v56, v57, v3, v54, v55, v53)
        v59 = v54 == (<unsigned char>0)
        if v59:
            v60 = method52(v1, v58, v9)
            v61 = v8 + v14
            v62 = v7 + v13
            v63 = v62 - v61
            v64 = libc.math.exp(v63)
            v65 = v60.v2
            v66 = method59(v65)
            del v65
            v67 = len(v66)
            v68 = len(v58)
            v69 = v67 == v68
            v70 = v69 != 1
            if v70:
                raise Exception("The two arrays have to have the same size.")
            else:
                pass
            v71 = numpy.empty(v67,dtype=numpy.float64)
            v72 = (<unsigned long long>0)
            v73 = (<double>0.000000)
            v74 = method78(v67, v12, v13, v14, v9, v10, v11, v7, v8, v0, v1, v4, v5, v53, v2, v56, v57, v3, v54, v55, v64, v66, v58, v71, v72, v73)
            del v58; del v66
            v75 = (<unsigned char>0)
            return method73(v9, v10, v11, v60, v64, v74, v71, v75)
        else:
            tmp15 = method16(v0, v58, v12)
            v77, v78, v79, v80 = tmp15.v0, tmp15.v1, tmp15.v2, tmp15.v3
            del tmp15
            del v77; del v79; del v80
            v81 = method26(v78)
            del v78
            v82 = len(v81)
            v83 = len(v58)
            v84 = v82 == v83
            v85 = v84 == 0
            if v85:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v86 = (<unsigned long long>0)
            v87 = (<double>0.000000)
            return method80(v82, v12, v13, v14, v9, v10, v11, v7, v8, v0, v1, v4, v5, v53, v2, v56, v57, v3, v54, v55, v81, v58, v86, v87)
cdef double method63(unsigned long long v0, UH0 v1, double v2, double v3, UH0 v4, double v5, double v6, double v7, double v8, Mut0 v9, Mut2 v10, US1 v11, US1 v12, Heap0 v13, numpy.ndarray[signed long,ndim=1] v14, double v15, numpy.ndarray[double,ndim=1] v16, numpy.ndarray[signed long,ndim=1] v17, numpy.ndarray[double,ndim=1] v18, unsigned long long v19, double v20):
    cdef bint v21
    cdef unsigned long long v22
    cdef double v23
    cdef US0 v24
    cdef bint v25
    cdef bint v27
    cdef double v35
    cdef double v28
    cdef double v29
    cdef US2 v30
    cdef UH0 v31
    cdef US2 v32
    cdef UH0 v33
    cdef double v36
    cdef double v37
    v21 = v19 < v0
    if v21:
        v22 = v19 + (<unsigned long long>1)
        v23 = v16[v19]
        v24 = v17[v19]
        v25 = v23 == (<double>0.000000)
        if v25:
            v27 = v15 == (<double>0.000000)
        else:
            v27 = 0
        if v27:
            v35 = (<double>0.000000)
        else:
            v28 = libc.math.log(v23)
            v29 = v28 + v5
            v30 = US2_0(v24)
            v31 = UH0_0(v30, v4)
            del v30
            v32 = US2_0(v24)
            v33 = UH0_0(v32, v1)
            del v32
            v35 = method64(v9, v10, v11, v12, v13, v14, v24, v7, v8, v31, v29, v6, v33, v2, v3)
            del v31; del v33
        v36 = v35 * v23
        v37 = v20 + v36
        v18[v19] = v35
        return method63(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v22, v37)
    else:
        return v20
cdef double method51(Mut0 v0, Mut2 v1, Heap0 v2, US1 v3, US1 v4, numpy.ndarray[signed long,ndim=1] v5, double v6, double v7, UH0 v8, double v9, double v10, UH0 v11, double v12, double v13):
    cdef numpy.ndarray[signed long,ndim=1] v14
    cdef Mut3 v15
    cdef double v16
    cdef double v17
    cdef double v18
    cdef double v19
    cdef numpy.ndarray[double,ndim=1] v20
    cdef numpy.ndarray[double,ndim=1] v21
    cdef unsigned long long v22
    cdef unsigned long long v23
    cdef bint v24
    cdef bint v25
    cdef numpy.ndarray[double,ndim=1] v26
    cdef unsigned long long v27
    cdef double v28
    cdef double v29
    cdef unsigned char v30
    v14 = v2.v2
    v15 = method52(v1, v14, v8)
    v16 = v7 + v13
    v17 = v6 + v12
    v18 = v17 - v16
    v19 = libc.math.exp(v18)
    v20 = v15.v2
    v21 = method59(v20)
    del v20
    v22 = len(v21)
    v23 = len(v14)
    v24 = v22 == v23
    v25 = v24 != 1
    if v25:
        raise Exception("The two arrays have to have the same size.")
    else:
        pass
    v26 = numpy.empty(v22,dtype=numpy.float64)
    v27 = (<unsigned long long>0)
    v28 = (<double>0.000000)
    v29 = method63(v22, v11, v12, v13, v8, v9, v10, v6, v7, v0, v1, v3, v4, v2, v5, v19, v21, v14, v26, v27, v28)
    del v14; del v21
    v30 = (<unsigned char>0)
    return method73(v8, v9, v10, v15, v19, v29, v26, v30)
cdef double method50(numpy.ndarray[signed long,ndim=1] v0, Mut0 v1, Mut2 v2, Heap0 v3, US1 v4, double v5, double v6, UH0 v7, double v8, double v9, UH0 v10, double v11, double v12, unsigned long long v13, double v14):
    cdef unsigned long long v15
    cdef double v16
    cdef double v17
    cdef bint v18
    cdef US1 v19
    cdef unsigned long long v20
    cdef numpy.ndarray[signed long,ndim=1] v21
    cdef unsigned long long v22
    cdef double v23
    cdef double v24
    cdef double v25
    cdef double v26
    cdef US2 v27
    cdef UH0 v28
    cdef double v29
    cdef unsigned long long v30
    cdef double v31
    cdef double v33
    v15 = len(v0)
    v16 = <double>v15
    v17 = (<double>1.000000) / v16
    v18 = v13 < v15
    if v18:
        v19 = v0[v13]
        v20 = v15 - (<unsigned long long>1)
        v21 = numpy.empty(v20,dtype=numpy.int32)
        v22 = (<unsigned long long>0)
        method4(v20, v13, v0, v21, v22)
        v23 = <double>v15
        v24 = (<double>1.000000) / v23
        v25 = libc.math.log(v24)
        v26 = v25 + v5
        v27 = US2_1(v19)
        v28 = UH0_0(v27, v10)
        del v27
        v29 = method51(v1, v2, v3, v4, v19, v21, v26, v6, v7, v8, v9, v28, v11, v12)
        del v21; del v28
        v30 = v13 + (<unsigned long long>1)
        v31 = v14 + v29
        return method50(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v30, v31)
    else:
        v33 = v14 * v17
        return v33
cdef double method49(Mut0 v0, Mut2 v1, Heap0 v2, US1 v3, numpy.ndarray[signed long,ndim=1] v4, double v5, double v6, UH0 v7, double v8, double v9, UH0 v10, double v11, double v12):
    cdef unsigned long long v13
    cdef double v14
    v13 = (<unsigned long long>0)
    v14 = (<double>0.000000)
    return method50(v4, v0, v1, v2, v3, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14)
cdef double method48(numpy.ndarray[signed long,ndim=1] v0, Mut0 v1, Mut2 v2, Heap0 v3, UH0 v4, double v5, double v6, UH0 v7, double v8, double v9, unsigned long long v10, double v11):
    cdef unsigned long long v12
    cdef double v13
    cdef double v14
    cdef bint v15
    cdef US1 v16
    cdef unsigned long long v17
    cdef numpy.ndarray[signed long,ndim=1] v18
    cdef unsigned long long v19
    cdef double v20
    cdef double v21
    cdef double v22
    cdef double v23
    cdef US2 v24
    cdef UH0 v25
    cdef double v26
    cdef unsigned long long v27
    cdef double v28
    cdef double v30
    v12 = len(v0)
    v13 = <double>v12
    v14 = (<double>1.000000) / v13
    v15 = v10 < v12
    if v15:
        v16 = v0[v10]
        v17 = v12 - (<unsigned long long>1)
        v18 = numpy.empty(v17,dtype=numpy.int32)
        v19 = (<unsigned long long>0)
        method4(v17, v10, v0, v18, v19)
        v20 = <double>v12
        v21 = (<double>1.000000) / v20
        v22 = libc.math.log(v21)
        v23 = (<double>0.000000)
        v24 = US2_1(v16)
        v25 = UH0_0(v24, v4)
        del v24
        v26 = method49(v1, v2, v3, v16, v18, v22, v23, v25, v5, v6, v7, v8, v9)
        del v18; del v25
        v27 = v10 + (<unsigned long long>1)
        v28 = v11 + v26
        return method48(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v27, v28)
    else:
        v30 = v11 * v14
        return v30
cdef double method96(unsigned long long v0, UH0 v1, double v2, double v3, UH0 v4, double v5, double v6, double v7, double v8, Mut0 v9, Mut2 v10, Heap0 v11, signed long v12, US1 v13, US1 v14, unsigned char v15, signed long v16, US1 v17, unsigned char v18, signed long v19, numpy.ndarray[double,ndim=1] v20, numpy.ndarray[signed long,ndim=1] v21, unsigned long long v22, double v23):
    cdef bint v24
    cdef unsigned long long v25
    cdef double v26
    cdef US0 v27
    cdef bint v28
    cdef bint v31
    cdef double v29
    cdef double v39
    cdef double v32
    cdef double v33
    cdef US2 v34
    cdef UH0 v35
    cdef US2 v36
    cdef UH0 v37
    cdef double v40
    cdef double v41
    v24 = v22 < v0
    if v24:
        v25 = v22 + (<unsigned long long>1)
        v26 = v20[v22]
        v27 = v21[v22]
        v28 = v26 == (<double>0.000000)
        if v28:
            v29 = v5 - v6
            v31 = v29 == (<double>float('-inf'))
        else:
            v31 = 0
        if v31:
            v39 = (<double>0.000000)
        else:
            v32 = libc.math.log(v26)
            v33 = v32 + v2
            v34 = US2_0(v27)
            v35 = UH0_0(v34, v4)
            del v34
            v36 = US2_0(v27)
            v37 = UH0_0(v36, v1)
            del v36
            v39 = method95(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v27, v7, v8, v35, v5, v6, v37, v33, v3)
            del v35; del v37
        v40 = v39 * v26
        v41 = v23 + v40
        return method96(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v25, v41)
    else:
        return v23
cdef double method95(Mut0 v0, Mut2 v1, Heap0 v2, signed long v3, US1 v4, US1 v5, unsigned char v6, signed long v7, US1 v8, unsigned char v9, signed long v10, US0 v11, double v12, double v13, UH0 v14, double v15, double v16, UH0 v17, double v18, double v19):
    cdef signed long v20
    cdef signed long v21
    cdef signed long v22
    cdef bint v23
    cdef bint v25
    cdef signed long v49
    cdef bint v26
    cdef bint v27
    cdef bint v30
    cdef bint v31
    cdef signed long v32
    cdef signed long v33
    cdef bint v34
    cdef signed long v35
    cdef signed long v36
    cdef bint v37
    cdef signed long v40
    cdef bint v38
    cdef bint v41
    cdef bint v42
    cdef bint v43
    cdef bint v50
    cdef unsigned char v54
    cdef signed long v55
    cdef bint v51
    cdef bint v56
    cdef signed long v58
    cdef bint v59
    cdef signed long v61
    cdef signed long v62
    cdef bint v63
    cdef signed long v65
    cdef signed long v66
    cdef US1 v67
    cdef unsigned char v68
    cdef signed long v69
    cdef US1 v70
    cdef unsigned char v71
    cdef signed long v72
    cdef double v73
    cdef bint v74
    cdef signed long v76
    cdef bint v77
    cdef signed long v79
    cdef signed long v80
    cdef signed long v82
    cdef signed long v83
    cdef US1 v84
    cdef unsigned char v85
    cdef signed long v86
    cdef US1 v87
    cdef unsigned char v88
    cdef signed long v89
    cdef double v90
    cdef signed long v91
    cdef signed long v92
    cdef numpy.ndarray[signed long,ndim=1] v93
    cdef bint v94
    cdef Mut3 v95
    cdef double v96
    cdef double v97
    cdef double v98
    cdef double v99
    cdef numpy.ndarray[double,ndim=1] v100
    cdef numpy.ndarray[double,ndim=1] v101
    cdef unsigned long long v102
    cdef unsigned long long v103
    cdef bint v104
    cdef bint v105
    cdef unsigned long long v106
    cdef double v107
    cdef numpy.ndarray[signed long,ndim=1] v109
    cdef numpy.ndarray[double,ndim=1] v110
    cdef numpy.ndarray[object,ndim=1] v111
    cdef numpy.ndarray[double,ndim=1] v112
    cdef Tuple1 tmp16
    cdef numpy.ndarray[double,ndim=1] v113
    cdef unsigned long long v114
    cdef unsigned long long v115
    cdef bint v116
    cdef bint v117
    cdef unsigned long long v118
    cdef double v119
    if v11 == 0: # call
        v20 = method14(v4)
        v21 = method14(v8)
        v22 = method14(v5)
        v23 = v21 == v20
        if v23:
            v25 = v22 == v20
        else:
            v25 = 0
        if v25:
            v26 = v21 < v22
            if v26:
                v49 = (<signed long>-1)
            else:
                v27 = v21 > v22
                if v27:
                    v49 = (<signed long>1)
                else:
                    v49 = (<signed long>0)
        else:
            if v23:
                v49 = (<signed long>1)
            else:
                v30 = v22 == v20
                if v30:
                    v49 = (<signed long>-1)
                else:
                    v31 = v21 > v20
                    if v31:
                        v32, v33 = v21, v20
                    else:
                        v32, v33 = v20, v21
                    v34 = v22 > v20
                    if v34:
                        v35, v36 = v22, v20
                    else:
                        v35, v36 = v20, v22
                    v37 = v32 < v35
                    if v37:
                        v40 = (<signed long>-1)
                    else:
                        v38 = v32 > v35
                        if v38:
                            v40 = (<signed long>1)
                        else:
                            v40 = (<signed long>0)
                    v41 = v40 == (<signed long>0)
                    if v41:
                        v42 = v33 < v36
                        if v42:
                            v49 = (<signed long>-1)
                        else:
                            v43 = v33 > v36
                            if v43:
                                v49 = (<signed long>1)
                            else:
                                v49 = (<signed long>0)
                    else:
                        v49 = v40
        v50 = v49 == (<signed long>1)
        if v50:
            v54, v55 = v9, v7
        else:
            v51 = v49 == (<signed long>-1)
            if v51:
                v54, v55 = v6, v7
            else:
                v54, v55 = v9, (<signed long>0)
        v56 = v54 == (<unsigned char>0)
        if v56:
            v58 = v55
        else:
            v58 = -v55
        v59 = v9 == (<unsigned char>0)
        if v59:
            v61 = v58
        else:
            v61 = -v58
        v62 = v61 + v7
        v63 = v6 == (<unsigned char>0)
        if v63:
            v65 = v58
        else:
            v65 = -v58
        v66 = v65 + v7
        if v59:
            v67, v68, v69, v70, v71, v72 = v8, v9, v62, v5, v6, v66
        else:
            v67, v68, v69, v70, v71, v72 = v5, v6, v66, v8, v9, v62
        v73 = <double>v58
        return v73
    elif v11 == 1: # fold
        v74 = v6 == (<unsigned char>0)
        if v74:
            v76 = v10
        else:
            v76 = -v10
        v77 = v9 == (<unsigned char>0)
        if v77:
            v79 = v76
        else:
            v79 = -v76
        v80 = v79 + v10
        if v74:
            v82 = v76
        else:
            v82 = -v76
        v83 = v82 + v7
        if v77:
            v84, v85, v86, v87, v88, v89 = v8, v9, v80, v5, v6, v83
        else:
            v84, v85, v86, v87, v88, v89 = v5, v6, v83, v8, v9, v80
        v90 = <double>v76
        return v90
    elif v11 == 2: # raise
        v91 = v3 - (<signed long>1)
        v92 = v7 + (<signed long>4)
        v93 = method12(v2, v8, v9, v92, v5, v6, v7, v91)
        v94 = v6 == (<unsigned char>0)
        if v94:
            v95 = method52(v1, v93, v14)
            v96 = v13 + v19
            v97 = v12 + v18
            v98 = v97 - v96
            v99 = libc.math.exp(v98)
            v100 = v95.v2
            del v95
            v101 = method59(v100)
            del v100
            v102 = len(v101)
            v103 = len(v93)
            v104 = v102 == v103
            v105 = v104 == 0
            if v105:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v106 = (<unsigned long long>0)
            v107 = (<double>0.000000)
            return method94(v102, v17, v18, v19, v14, v15, v16, v12, v13, v0, v1, v2, v91, v4, v8, v9, v92, v5, v6, v7, v99, v101, v93, v106, v107)
        else:
            tmp16 = method16(v0, v93, v17)
            v109, v110, v111, v112 = tmp16.v0, tmp16.v1, tmp16.v2, tmp16.v3
            del tmp16
            del v109; del v111; del v112
            v113 = method26(v110)
            del v110
            v114 = len(v113)
            v115 = len(v93)
            v116 = v114 == v115
            v117 = v116 == 0
            if v117:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v118 = (<unsigned long long>0)
            v119 = (<double>0.000000)
            return method96(v114, v17, v18, v19, v14, v15, v16, v12, v13, v0, v1, v2, v91, v4, v8, v9, v92, v5, v6, v7, v113, v93, v118, v119)
cdef double method94(unsigned long long v0, UH0 v1, double v2, double v3, UH0 v4, double v5, double v6, double v7, double v8, Mut0 v9, Mut2 v10, Heap0 v11, signed long v12, US1 v13, US1 v14, unsigned char v15, signed long v16, US1 v17, unsigned char v18, signed long v19, double v20, numpy.ndarray[double,ndim=1] v21, numpy.ndarray[signed long,ndim=1] v22, unsigned long long v23, double v24):
    cdef bint v25
    cdef unsigned long long v26
    cdef double v27
    cdef US0 v28
    cdef bint v29
    cdef bint v31
    cdef double v39
    cdef double v32
    cdef double v33
    cdef US2 v34
    cdef UH0 v35
    cdef US2 v36
    cdef UH0 v37
    cdef double v40
    cdef double v41
    v25 = v23 < v0
    if v25:
        v26 = v23 + (<unsigned long long>1)
        v27 = v21[v23]
        v28 = v22[v23]
        v29 = v27 == (<double>0.000000)
        if v29:
            v31 = v20 == (<double>0.000000)
        else:
            v31 = 0
        if v31:
            v39 = (<double>0.000000)
        else:
            v32 = libc.math.log(v27)
            v33 = v32 + v5
            v34 = US2_0(v28)
            v35 = UH0_0(v34, v4)
            del v34
            v36 = US2_0(v28)
            v37 = UH0_0(v36, v1)
            del v36
            v39 = method95(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v28, v7, v8, v35, v33, v6, v37, v2, v3)
            del v35; del v37
        v40 = v39 * v27
        v41 = v24 + v40
        return method94(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v26, v41)
    else:
        return v24
cdef double method93(Mut0 v0, Mut2 v1, Heap0 v2, US1 v3, unsigned char v4, signed long v5, US1 v6, unsigned char v7, signed long v8, US1 v9, US0 v10, double v11, double v12, UH0 v13, double v14, double v15, UH0 v16, double v17, double v18):
    cdef signed long v19
    cdef numpy.ndarray[signed long,ndim=1] v20
    cdef bint v21
    cdef Mut3 v22
    cdef double v23
    cdef double v24
    cdef double v25
    cdef double v26
    cdef numpy.ndarray[double,ndim=1] v27
    cdef numpy.ndarray[double,ndim=1] v28
    cdef unsigned long long v29
    cdef unsigned long long v30
    cdef bint v31
    cdef bint v32
    cdef unsigned long long v33
    cdef double v34
    cdef numpy.ndarray[signed long,ndim=1] v36
    cdef numpy.ndarray[double,ndim=1] v37
    cdef numpy.ndarray[object,ndim=1] v38
    cdef numpy.ndarray[double,ndim=1] v39
    cdef Tuple1 tmp17
    cdef numpy.ndarray[double,ndim=1] v40
    cdef unsigned long long v41
    cdef unsigned long long v42
    cdef bint v43
    cdef bint v44
    cdef unsigned long long v45
    cdef double v46
    cdef object v49
    cdef signed long v51
    cdef signed long v52
    cdef numpy.ndarray[signed long,ndim=1] v53
    cdef bint v54
    cdef Mut3 v55
    cdef double v56
    cdef double v57
    cdef double v58
    cdef double v59
    cdef numpy.ndarray[double,ndim=1] v60
    cdef numpy.ndarray[double,ndim=1] v61
    cdef unsigned long long v62
    cdef unsigned long long v63
    cdef bint v64
    cdef bint v65
    cdef unsigned long long v66
    cdef double v67
    cdef numpy.ndarray[signed long,ndim=1] v69
    cdef numpy.ndarray[double,ndim=1] v70
    cdef numpy.ndarray[object,ndim=1] v71
    cdef numpy.ndarray[double,ndim=1] v72
    cdef Tuple1 tmp18
    cdef numpy.ndarray[double,ndim=1] v73
    cdef unsigned long long v74
    cdef unsigned long long v75
    cdef bint v76
    cdef bint v77
    cdef unsigned long long v78
    cdef double v79
    if v10 == 0: # call
        v19 = (<signed long>2)
        v20 = method12(v2, v6, v7, v8, v3, v4, v5, v19)
        v21 = v4 == (<unsigned char>0)
        if v21:
            v22 = method52(v1, v20, v13)
            v23 = v12 + v18
            v24 = v11 + v17
            v25 = v24 - v23
            v26 = libc.math.exp(v25)
            v27 = v22.v2
            del v22
            v28 = method59(v27)
            del v27
            v29 = len(v28)
            v30 = len(v20)
            v31 = v29 == v30
            v32 = v31 == 0
            if v32:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v33 = (<unsigned long long>0)
            v34 = (<double>0.000000)
            return method94(v29, v16, v17, v18, v13, v14, v15, v11, v12, v0, v1, v2, v19, v9, v6, v7, v8, v3, v4, v5, v26, v28, v20, v33, v34)
        else:
            tmp17 = method16(v0, v20, v16)
            v36, v37, v38, v39 = tmp17.v0, tmp17.v1, tmp17.v2, tmp17.v3
            del tmp17
            del v36; del v38; del v39
            v40 = method26(v37)
            del v37
            v41 = len(v40)
            v42 = len(v20)
            v43 = v41 == v42
            v44 = v43 == 0
            if v44:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v45 = (<unsigned long long>0)
            v46 = (<double>0.000000)
            return method96(v41, v16, v17, v18, v13, v14, v15, v11, v12, v0, v1, v2, v19, v9, v6, v7, v8, v3, v4, v5, v40, v20, v45, v46)
    elif v10 == 1: # fold
        raise Exception("impossible")
    elif v10 == 2: # raise
        v51 = (<signed long>1)
        v52 = v5 + (<signed long>4)
        v53 = method12(v2, v6, v7, v52, v3, v4, v5, v51)
        v54 = v4 == (<unsigned char>0)
        if v54:
            v55 = method52(v1, v53, v13)
            v56 = v12 + v18
            v57 = v11 + v17
            v58 = v57 - v56
            v59 = libc.math.exp(v58)
            v60 = v55.v2
            del v55
            v61 = method59(v60)
            del v60
            v62 = len(v61)
            v63 = len(v53)
            v64 = v62 == v63
            v65 = v64 == 0
            if v65:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v66 = (<unsigned long long>0)
            v67 = (<double>0.000000)
            return method94(v62, v16, v17, v18, v13, v14, v15, v11, v12, v0, v1, v2, v51, v9, v6, v7, v52, v3, v4, v5, v59, v61, v53, v66, v67)
        else:
            tmp18 = method16(v0, v53, v16)
            v69, v70, v71, v72 = tmp18.v0, tmp18.v1, tmp18.v2, tmp18.v3
            del tmp18
            del v69; del v71; del v72
            v73 = method26(v70)
            del v70
            v74 = len(v73)
            v75 = len(v53)
            v76 = v74 == v75
            v77 = v76 == 0
            if v77:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v78 = (<unsigned long long>0)
            v79 = (<double>0.000000)
            return method96(v74, v16, v17, v18, v13, v14, v15, v11, v12, v0, v1, v2, v51, v9, v6, v7, v52, v3, v4, v5, v73, v53, v78, v79)
cdef double method92(unsigned long long v0, UH0 v1, double v2, double v3, UH0 v4, double v5, double v6, double v7, double v8, Mut0 v9, Mut2 v10, Heap0 v11, US1 v12, unsigned char v13, signed long v14, US1 v15, unsigned char v16, signed long v17, US1 v18, double v19, numpy.ndarray[double,ndim=1] v20, numpy.ndarray[signed long,ndim=1] v21, unsigned long long v22, double v23):
    cdef bint v24
    cdef unsigned long long v25
    cdef double v26
    cdef US0 v27
    cdef bint v28
    cdef bint v30
    cdef double v38
    cdef double v31
    cdef double v32
    cdef US2 v33
    cdef UH0 v34
    cdef US2 v35
    cdef UH0 v36
    cdef double v39
    cdef double v40
    v24 = v22 < v0
    if v24:
        v25 = v22 + (<unsigned long long>1)
        v26 = v20[v22]
        v27 = v21[v22]
        v28 = v26 == (<double>0.000000)
        if v28:
            v30 = v19 == (<double>0.000000)
        else:
            v30 = 0
        if v30:
            v38 = (<double>0.000000)
        else:
            v31 = libc.math.log(v26)
            v32 = v31 + v5
            v33 = US2_0(v27)
            v34 = UH0_0(v33, v4)
            del v33
            v35 = US2_0(v27)
            v36 = UH0_0(v35, v1)
            del v35
            v38 = method93(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v27, v7, v8, v34, v32, v6, v36, v2, v3)
            del v34; del v36
        v39 = v38 * v26
        v40 = v23 + v39
        return method92(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v25, v40)
    else:
        return v23
cdef double method97(unsigned long long v0, UH0 v1, double v2, double v3, UH0 v4, double v5, double v6, double v7, double v8, Mut0 v9, Mut2 v10, Heap0 v11, US1 v12, unsigned char v13, signed long v14, US1 v15, unsigned char v16, signed long v17, US1 v18, numpy.ndarray[double,ndim=1] v19, numpy.ndarray[signed long,ndim=1] v20, unsigned long long v21, double v22):
    cdef bint v23
    cdef unsigned long long v24
    cdef double v25
    cdef US0 v26
    cdef bint v27
    cdef bint v30
    cdef double v28
    cdef double v38
    cdef double v31
    cdef double v32
    cdef US2 v33
    cdef UH0 v34
    cdef US2 v35
    cdef UH0 v36
    cdef double v39
    cdef double v40
    v23 = v21 < v0
    if v23:
        v24 = v21 + (<unsigned long long>1)
        v25 = v19[v21]
        v26 = v20[v21]
        v27 = v25 == (<double>0.000000)
        if v27:
            v28 = v5 - v6
            v30 = v28 == (<double>float('-inf'))
        else:
            v30 = 0
        if v30:
            v38 = (<double>0.000000)
        else:
            v31 = libc.math.log(v25)
            v32 = v31 + v2
            v33 = US2_0(v26)
            v34 = UH0_0(v33, v4)
            del v33
            v35 = US2_0(v26)
            v36 = UH0_0(v35, v1)
            del v35
            v38 = method93(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v26, v7, v8, v34, v5, v6, v36, v32, v3)
            del v34; del v36
        v39 = v38 * v25
        v40 = v22 + v39
        return method97(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v24, v40)
    else:
        return v22
cdef double method91(Mut0 v0, Mut2 v1, Heap0 v2, US1 v3, unsigned char v4, signed long v5, US1 v6, unsigned char v7, signed long v8, US1 v9, double v10, double v11, UH0 v12, double v13, double v14, UH0 v15, double v16, double v17):
    cdef numpy.ndarray[signed long,ndim=1] v18
    cdef bint v19
    cdef Mut3 v20
    cdef double v21
    cdef double v22
    cdef double v23
    cdef double v24
    cdef numpy.ndarray[double,ndim=1] v25
    cdef numpy.ndarray[double,ndim=1] v26
    cdef unsigned long long v27
    cdef unsigned long long v28
    cdef bint v29
    cdef bint v30
    cdef unsigned long long v31
    cdef double v32
    cdef numpy.ndarray[signed long,ndim=1] v34
    cdef numpy.ndarray[double,ndim=1] v35
    cdef numpy.ndarray[object,ndim=1] v36
    cdef numpy.ndarray[double,ndim=1] v37
    cdef Tuple1 tmp19
    cdef numpy.ndarray[double,ndim=1] v38
    cdef unsigned long long v39
    cdef unsigned long long v40
    cdef bint v41
    cdef bint v42
    cdef unsigned long long v43
    cdef double v44
    v18 = v2.v2
    v19 = v7 == (<unsigned char>0)
    if v19:
        v20 = method52(v1, v18, v12)
        v21 = v11 + v17
        v22 = v10 + v16
        v23 = v22 - v21
        v24 = libc.math.exp(v23)
        v25 = v20.v2
        del v20
        v26 = method59(v25)
        del v25
        v27 = len(v26)
        v28 = len(v18)
        v29 = v27 == v28
        v30 = v29 == 0
        if v30:
            raise Exception("The length of the two arrays has to the same.")
        else:
            pass
        v31 = (<unsigned long long>0)
        v32 = (<double>0.000000)
        return method92(v27, v15, v16, v17, v12, v13, v14, v10, v11, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v24, v26, v18, v31, v32)
    else:
        tmp19 = method16(v0, v18, v15)
        v34, v35, v36, v37 = tmp19.v0, tmp19.v1, tmp19.v2, tmp19.v3
        del tmp19
        del v34; del v36; del v37
        v38 = method26(v35)
        del v35
        v39 = len(v38)
        v40 = len(v18)
        v41 = v39 == v40
        v42 = v41 == 0
        if v42:
            raise Exception("The length of the two arrays has to the same.")
        else:
            pass
        v43 = (<unsigned long long>0)
        v44 = (<double>0.000000)
        return method97(v39, v15, v16, v17, v12, v13, v14, v10, v11, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v38, v18, v43, v44)
cdef double method90(numpy.ndarray[signed long,ndim=1] v0, Mut0 v1, Mut2 v2, Heap0 v3, US1 v4, unsigned char v5, signed long v6, US1 v7, unsigned char v8, signed long v9, double v10, double v11, UH0 v12, double v13, double v14, UH0 v15, double v16, double v17, unsigned long long v18, double v19):
    cdef unsigned long long v20
    cdef double v21
    cdef double v22
    cdef bint v23
    cdef US1 v24
    cdef double v25
    cdef double v26
    cdef double v27
    cdef double v28
    cdef US2 v29
    cdef UH0 v30
    cdef US2 v31
    cdef UH0 v32
    cdef double v33
    cdef unsigned long long v34
    cdef double v35
    cdef double v37
    v20 = len(v0)
    v21 = <double>v20
    v22 = (<double>1.000000) / v21
    v23 = v18 < v20
    if v23:
        v24 = v0[v18]
        v25 = <double>v20
        v26 = (<double>1.000000) / v25
        v27 = libc.math.log(v26)
        v28 = v27 + v10
        v29 = US2_1(v24)
        v30 = UH0_0(v29, v12)
        del v29
        v31 = US2_1(v24)
        v32 = UH0_0(v31, v15)
        del v31
        v33 = method91(v1, v2, v3, v4, v5, v6, v7, v8, v9, v24, v28, v11, v30, v13, v14, v32, v16, v17)
        del v30; del v32
        v34 = v18 + (<unsigned long long>1)
        v35 = v19 + v33
        return method90(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v34, v35)
    else:
        v37 = v19 * v22
        return v37
cdef double method100(unsigned long long v0, UH0 v1, double v2, double v3, UH0 v4, double v5, double v6, double v7, double v8, Mut0 v9, Mut2 v10, Heap0 v11, numpy.ndarray[signed long,ndim=1] v12, signed long v13, US1 v14, unsigned char v15, signed long v16, US1 v17, unsigned char v18, signed long v19, numpy.ndarray[double,ndim=1] v20, numpy.ndarray[signed long,ndim=1] v21, unsigned long long v22, double v23):
    cdef bint v24
    cdef unsigned long long v25
    cdef double v26
    cdef US0 v27
    cdef bint v28
    cdef bint v31
    cdef double v29
    cdef double v39
    cdef double v32
    cdef double v33
    cdef US2 v34
    cdef UH0 v35
    cdef US2 v36
    cdef UH0 v37
    cdef double v40
    cdef double v41
    v24 = v22 < v0
    if v24:
        v25 = v22 + (<unsigned long long>1)
        v26 = v20[v22]
        v27 = v21[v22]
        v28 = v26 == (<double>0.000000)
        if v28:
            v29 = v5 - v6
            v31 = v29 == (<double>float('-inf'))
        else:
            v31 = 0
        if v31:
            v39 = (<double>0.000000)
        else:
            v32 = libc.math.log(v26)
            v33 = v32 + v2
            v34 = US2_0(v27)
            v35 = UH0_0(v34, v4)
            del v34
            v36 = US2_0(v27)
            v37 = UH0_0(v36, v1)
            del v36
            v39 = method99(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v27, v7, v8, v35, v5, v6, v37, v33, v3)
            del v35; del v37
        v40 = v39 * v26
        v41 = v23 + v40
        return method100(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v25, v41)
    else:
        return v23
cdef double method99(Mut0 v0, Mut2 v1, Heap0 v2, numpy.ndarray[signed long,ndim=1] v3, signed long v4, US1 v5, unsigned char v6, signed long v7, US1 v8, unsigned char v9, signed long v10, US0 v11, double v12, double v13, UH0 v14, double v15, double v16, UH0 v17, double v18, double v19):
    cdef bint v20
    cdef US1 v21
    cdef unsigned char v22
    cdef signed long v23
    cdef US1 v24
    cdef unsigned char v25
    cdef signed long v26
    cdef unsigned long long v27
    cdef double v28
    cdef bint v30
    cdef signed long v32
    cdef bint v33
    cdef signed long v35
    cdef signed long v36
    cdef signed long v38
    cdef signed long v39
    cdef US1 v40
    cdef unsigned char v41
    cdef signed long v42
    cdef US1 v43
    cdef unsigned char v44
    cdef signed long v45
    cdef double v46
    cdef signed long v47
    cdef signed long v48
    cdef numpy.ndarray[signed long,ndim=1] v49
    cdef bint v50
    cdef Mut3 v51
    cdef double v52
    cdef double v53
    cdef double v54
    cdef double v55
    cdef numpy.ndarray[double,ndim=1] v56
    cdef numpy.ndarray[double,ndim=1] v57
    cdef unsigned long long v58
    cdef unsigned long long v59
    cdef bint v60
    cdef bint v61
    cdef unsigned long long v62
    cdef double v63
    cdef numpy.ndarray[signed long,ndim=1] v65
    cdef numpy.ndarray[double,ndim=1] v66
    cdef numpy.ndarray[object,ndim=1] v67
    cdef numpy.ndarray[double,ndim=1] v68
    cdef Tuple1 tmp20
    cdef numpy.ndarray[double,ndim=1] v69
    cdef unsigned long long v70
    cdef unsigned long long v71
    cdef bint v72
    cdef bint v73
    cdef unsigned long long v74
    cdef double v75
    if v11 == 0: # call
        v20 = v9 == (<unsigned char>0)
        if v20:
            v21, v22, v23, v24, v25, v26 = v8, v9, v7, v5, v6, v7
        else:
            v21, v22, v23, v24, v25, v26 = v5, v6, v7, v8, v9, v7
        v27 = (<unsigned long long>0)
        v28 = (<double>0.000000)
        return method90(v3, v0, v1, v2, v24, v25, v26, v21, v22, v23, v12, v13, v14, v15, v16, v17, v18, v19, v27, v28)
    elif v11 == 1: # fold
        v30 = v6 == (<unsigned char>0)
        if v30:
            v32 = v10
        else:
            v32 = -v10
        v33 = v9 == (<unsigned char>0)
        if v33:
            v35 = v32
        else:
            v35 = -v32
        v36 = v35 + v10
        if v30:
            v38 = v32
        else:
            v38 = -v32
        v39 = v38 + v7
        if v33:
            v40, v41, v42, v43, v44, v45 = v8, v9, v36, v5, v6, v39
        else:
            v40, v41, v42, v43, v44, v45 = v5, v6, v39, v8, v9, v36
        v46 = <double>v32
        return v46
    elif v11 == 2: # raise
        v47 = v4 - (<signed long>1)
        v48 = v7 + (<signed long>2)
        v49 = method12(v2, v8, v9, v48, v5, v6, v7, v47)
        v50 = v6 == (<unsigned char>0)
        if v50:
            v51 = method52(v1, v49, v14)
            v52 = v13 + v19
            v53 = v12 + v18
            v54 = v53 - v52
            v55 = libc.math.exp(v54)
            v56 = v51.v2
            del v51
            v57 = method59(v56)
            del v56
            v58 = len(v57)
            v59 = len(v49)
            v60 = v58 == v59
            v61 = v60 == 0
            if v61:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v62 = (<unsigned long long>0)
            v63 = (<double>0.000000)
            return method98(v58, v17, v18, v19, v14, v15, v16, v12, v13, v0, v1, v2, v3, v47, v8, v9, v48, v5, v6, v7, v55, v57, v49, v62, v63)
        else:
            tmp20 = method16(v0, v49, v17)
            v65, v66, v67, v68 = tmp20.v0, tmp20.v1, tmp20.v2, tmp20.v3
            del tmp20
            del v65; del v67; del v68
            v69 = method26(v66)
            del v66
            v70 = len(v69)
            v71 = len(v49)
            v72 = v70 == v71
            v73 = v72 == 0
            if v73:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v74 = (<unsigned long long>0)
            v75 = (<double>0.000000)
            return method100(v70, v17, v18, v19, v14, v15, v16, v12, v13, v0, v1, v2, v3, v47, v8, v9, v48, v5, v6, v7, v69, v49, v74, v75)
cdef double method98(unsigned long long v0, UH0 v1, double v2, double v3, UH0 v4, double v5, double v6, double v7, double v8, Mut0 v9, Mut2 v10, Heap0 v11, numpy.ndarray[signed long,ndim=1] v12, signed long v13, US1 v14, unsigned char v15, signed long v16, US1 v17, unsigned char v18, signed long v19, double v20, numpy.ndarray[double,ndim=1] v21, numpy.ndarray[signed long,ndim=1] v22, unsigned long long v23, double v24):
    cdef bint v25
    cdef unsigned long long v26
    cdef double v27
    cdef US0 v28
    cdef bint v29
    cdef bint v31
    cdef double v39
    cdef double v32
    cdef double v33
    cdef US2 v34
    cdef UH0 v35
    cdef US2 v36
    cdef UH0 v37
    cdef double v40
    cdef double v41
    v25 = v23 < v0
    if v25:
        v26 = v23 + (<unsigned long long>1)
        v27 = v21[v23]
        v28 = v22[v23]
        v29 = v27 == (<double>0.000000)
        if v29:
            v31 = v20 == (<double>0.000000)
        else:
            v31 = 0
        if v31:
            v39 = (<double>0.000000)
        else:
            v32 = libc.math.log(v27)
            v33 = v32 + v5
            v34 = US2_0(v28)
            v35 = UH0_0(v34, v4)
            del v34
            v36 = US2_0(v28)
            v37 = UH0_0(v36, v1)
            del v36
            v39 = method99(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v28, v7, v8, v35, v33, v6, v37, v2, v3)
            del v35; del v37
        v40 = v39 * v27
        v41 = v24 + v40
        return method98(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v26, v41)
    else:
        return v24
cdef double method89(Mut0 v0, Mut2 v1, Heap0 v2, numpy.ndarray[signed long,ndim=1] v3, signed long v4, US1 v5, unsigned char v6, signed long v7, US1 v8, unsigned char v9, US0 v10, double v11, double v12, UH0 v13, double v14, double v15, UH0 v16, double v17, double v18):
    cdef bint v19
    cdef US1 v20
    cdef unsigned char v21
    cdef signed long v22
    cdef US1 v23
    cdef unsigned char v24
    cdef signed long v25
    cdef unsigned long long v26
    cdef double v27
    cdef bint v29
    cdef signed long v31
    cdef bint v32
    cdef signed long v34
    cdef signed long v35
    cdef signed long v37
    cdef signed long v38
    cdef US1 v39
    cdef unsigned char v40
    cdef signed long v41
    cdef US1 v42
    cdef unsigned char v43
    cdef signed long v44
    cdef double v45
    cdef signed long v46
    cdef signed long v47
    cdef numpy.ndarray[signed long,ndim=1] v48
    cdef bint v49
    cdef Mut3 v50
    cdef double v51
    cdef double v52
    cdef double v53
    cdef double v54
    cdef numpy.ndarray[double,ndim=1] v55
    cdef numpy.ndarray[double,ndim=1] v56
    cdef unsigned long long v57
    cdef unsigned long long v58
    cdef bint v59
    cdef bint v60
    cdef unsigned long long v61
    cdef double v62
    cdef numpy.ndarray[signed long,ndim=1] v64
    cdef numpy.ndarray[double,ndim=1] v65
    cdef numpy.ndarray[object,ndim=1] v66
    cdef numpy.ndarray[double,ndim=1] v67
    cdef Tuple1 tmp21
    cdef numpy.ndarray[double,ndim=1] v68
    cdef unsigned long long v69
    cdef unsigned long long v70
    cdef bint v71
    cdef bint v72
    cdef unsigned long long v73
    cdef double v74
    if v10 == 0: # call
        v19 = v9 == (<unsigned char>0)
        if v19:
            v20, v21, v22, v23, v24, v25 = v8, v9, v7, v5, v6, v7
        else:
            v20, v21, v22, v23, v24, v25 = v5, v6, v7, v8, v9, v7
        v26 = (<unsigned long long>0)
        v27 = (<double>0.000000)
        return method90(v3, v0, v1, v2, v23, v24, v25, v20, v21, v22, v11, v12, v13, v14, v15, v16, v17, v18, v26, v27)
    elif v10 == 1: # fold
        v29 = v6 == (<unsigned char>0)
        if v29:
            v31 = v7
        else:
            v31 = -v7
        v32 = v9 == (<unsigned char>0)
        if v32:
            v34 = v31
        else:
            v34 = -v31
        v35 = v34 + v7
        if v29:
            v37 = v31
        else:
            v37 = -v31
        v38 = v37 + v7
        if v32:
            v39, v40, v41, v42, v43, v44 = v8, v9, v35, v5, v6, v38
        else:
            v39, v40, v41, v42, v43, v44 = v5, v6, v38, v8, v9, v35
        v45 = <double>v31
        return v45
    elif v10 == 2: # raise
        v46 = v4 - (<signed long>1)
        v47 = v7 + (<signed long>2)
        v48 = method12(v2, v8, v9, v47, v5, v6, v7, v46)
        v49 = v6 == (<unsigned char>0)
        if v49:
            v50 = method52(v1, v48, v13)
            v51 = v12 + v18
            v52 = v11 + v17
            v53 = v52 - v51
            v54 = libc.math.exp(v53)
            v55 = v50.v2
            del v50
            v56 = method59(v55)
            del v55
            v57 = len(v56)
            v58 = len(v48)
            v59 = v57 == v58
            v60 = v59 == 0
            if v60:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v61 = (<unsigned long long>0)
            v62 = (<double>0.000000)
            return method98(v57, v16, v17, v18, v13, v14, v15, v11, v12, v0, v1, v2, v3, v46, v8, v9, v47, v5, v6, v7, v54, v56, v48, v61, v62)
        else:
            tmp21 = method16(v0, v48, v16)
            v64, v65, v66, v67 = tmp21.v0, tmp21.v1, tmp21.v2, tmp21.v3
            del tmp21
            del v64; del v66; del v67
            v68 = method26(v65)
            del v65
            v69 = len(v68)
            v70 = len(v48)
            v71 = v69 == v70
            v72 = v71 == 0
            if v72:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v73 = (<unsigned long long>0)
            v74 = (<double>0.000000)
            return method100(v69, v16, v17, v18, v13, v14, v15, v11, v12, v0, v1, v2, v3, v46, v8, v9, v47, v5, v6, v7, v68, v48, v73, v74)
cdef double method88(unsigned long long v0, UH0 v1, double v2, double v3, UH0 v4, double v5, double v6, double v7, double v8, Mut0 v9, Mut2 v10, Heap0 v11, numpy.ndarray[signed long,ndim=1] v12, signed long v13, US1 v14, unsigned char v15, signed long v16, US1 v17, unsigned char v18, double v19, numpy.ndarray[double,ndim=1] v20, numpy.ndarray[signed long,ndim=1] v21, unsigned long long v22, double v23):
    cdef bint v24
    cdef unsigned long long v25
    cdef double v26
    cdef US0 v27
    cdef bint v28
    cdef bint v30
    cdef double v38
    cdef double v31
    cdef double v32
    cdef US2 v33
    cdef UH0 v34
    cdef US2 v35
    cdef UH0 v36
    cdef double v39
    cdef double v40
    v24 = v22 < v0
    if v24:
        v25 = v22 + (<unsigned long long>1)
        v26 = v20[v22]
        v27 = v21[v22]
        v28 = v26 == (<double>0.000000)
        if v28:
            v30 = v19 == (<double>0.000000)
        else:
            v30 = 0
        if v30:
            v38 = (<double>0.000000)
        else:
            v31 = libc.math.log(v26)
            v32 = v31 + v5
            v33 = US2_0(v27)
            v34 = UH0_0(v33, v4)
            del v33
            v35 = US2_0(v27)
            v36 = UH0_0(v35, v1)
            del v35
            v38 = method89(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v27, v7, v8, v34, v32, v6, v36, v2, v3)
            del v34; del v36
        v39 = v38 * v26
        v40 = v23 + v39
        return method88(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v25, v40)
    else:
        return v23
cdef double method101(unsigned long long v0, UH0 v1, double v2, double v3, UH0 v4, double v5, double v6, double v7, double v8, Mut0 v9, Mut2 v10, Heap0 v11, numpy.ndarray[signed long,ndim=1] v12, signed long v13, US1 v14, unsigned char v15, signed long v16, US1 v17, unsigned char v18, numpy.ndarray[double,ndim=1] v19, numpy.ndarray[signed long,ndim=1] v20, unsigned long long v21, double v22):
    cdef bint v23
    cdef unsigned long long v24
    cdef double v25
    cdef US0 v26
    cdef bint v27
    cdef bint v30
    cdef double v28
    cdef double v38
    cdef double v31
    cdef double v32
    cdef US2 v33
    cdef UH0 v34
    cdef US2 v35
    cdef UH0 v36
    cdef double v39
    cdef double v40
    v23 = v21 < v0
    if v23:
        v24 = v21 + (<unsigned long long>1)
        v25 = v19[v21]
        v26 = v20[v21]
        v27 = v25 == (<double>0.000000)
        if v27:
            v28 = v5 - v6
            v30 = v28 == (<double>float('-inf'))
        else:
            v30 = 0
        if v30:
            v38 = (<double>0.000000)
        else:
            v31 = libc.math.log(v25)
            v32 = v31 + v2
            v33 = US2_0(v26)
            v34 = UH0_0(v33, v4)
            del v33
            v35 = US2_0(v26)
            v36 = UH0_0(v35, v1)
            del v35
            v38 = method89(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v26, v7, v8, v34, v5, v6, v36, v32, v3)
            del v34; del v36
        v39 = v38 * v25
        v40 = v22 + v39
        return method101(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v24, v40)
    else:
        return v22
cdef double method87(Mut0 v0, Mut2 v1, US1 v2, US1 v3, Heap0 v4, numpy.ndarray[signed long,ndim=1] v5, US0 v6, double v7, double v8, UH0 v9, double v10, double v11, UH0 v12, double v13, double v14):
    cdef signed long v15
    cdef unsigned char v16
    cdef signed long v17
    cdef unsigned char v18
    cdef numpy.ndarray[signed long,ndim=1] v19
    cdef bint v20
    cdef Mut3 v21
    cdef double v22
    cdef double v23
    cdef double v24
    cdef double v25
    cdef numpy.ndarray[double,ndim=1] v26
    cdef numpy.ndarray[double,ndim=1] v27
    cdef unsigned long long v28
    cdef unsigned long long v29
    cdef bint v30
    cdef bint v31
    cdef unsigned long long v32
    cdef double v33
    cdef numpy.ndarray[signed long,ndim=1] v35
    cdef numpy.ndarray[double,ndim=1] v36
    cdef numpy.ndarray[object,ndim=1] v37
    cdef numpy.ndarray[double,ndim=1] v38
    cdef Tuple1 tmp22
    cdef numpy.ndarray[double,ndim=1] v39
    cdef unsigned long long v40
    cdef unsigned long long v41
    cdef bint v42
    cdef bint v43
    cdef unsigned long long v44
    cdef double v45
    cdef object v48
    cdef signed long v50
    cdef unsigned char v51
    cdef signed long v52
    cdef unsigned char v53
    cdef signed long v54
    cdef numpy.ndarray[signed long,ndim=1] v55
    cdef bint v56
    cdef Mut3 v57
    cdef double v58
    cdef double v59
    cdef double v60
    cdef double v61
    cdef numpy.ndarray[double,ndim=1] v62
    cdef numpy.ndarray[double,ndim=1] v63
    cdef unsigned long long v64
    cdef unsigned long long v65
    cdef bint v66
    cdef bint v67
    cdef unsigned long long v68
    cdef double v69
    cdef numpy.ndarray[signed long,ndim=1] v71
    cdef numpy.ndarray[double,ndim=1] v72
    cdef numpy.ndarray[object,ndim=1] v73
    cdef numpy.ndarray[double,ndim=1] v74
    cdef Tuple1 tmp23
    cdef numpy.ndarray[double,ndim=1] v75
    cdef unsigned long long v76
    cdef unsigned long long v77
    cdef bint v78
    cdef bint v79
    cdef unsigned long long v80
    cdef double v81
    if v6 == 0: # call
        v15 = (<signed long>2)
        v16 = (<unsigned char>1)
        v17 = (<signed long>1)
        v18 = (<unsigned char>0)
        v19 = method8(v4, v2, v18, v17, v3, v16, v15)
        v20 = v16 == (<unsigned char>0)
        if v20:
            v21 = method52(v1, v19, v9)
            v22 = v8 + v14
            v23 = v7 + v13
            v24 = v23 - v22
            v25 = libc.math.exp(v24)
            v26 = v21.v2
            del v21
            v27 = method59(v26)
            del v26
            v28 = len(v27)
            v29 = len(v19)
            v30 = v28 == v29
            v31 = v30 == 0
            if v31:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v32 = (<unsigned long long>0)
            v33 = (<double>0.000000)
            return method88(v28, v12, v13, v14, v9, v10, v11, v7, v8, v0, v1, v4, v5, v15, v2, v18, v17, v3, v16, v25, v27, v19, v32, v33)
        else:
            tmp22 = method16(v0, v19, v12)
            v35, v36, v37, v38 = tmp22.v0, tmp22.v1, tmp22.v2, tmp22.v3
            del tmp22
            del v35; del v37; del v38
            v39 = method26(v36)
            del v36
            v40 = len(v39)
            v41 = len(v19)
            v42 = v40 == v41
            v43 = v42 == 0
            if v43:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v44 = (<unsigned long long>0)
            v45 = (<double>0.000000)
            return method101(v40, v12, v13, v14, v9, v10, v11, v7, v8, v0, v1, v4, v5, v15, v2, v18, v17, v3, v16, v39, v19, v44, v45)
    elif v6 == 1: # fold
        raise Exception("impossible")
    elif v6 == 2: # raise
        v50 = (<signed long>1)
        v51 = (<unsigned char>1)
        v52 = (<signed long>1)
        v53 = (<unsigned char>0)
        v54 = (<signed long>3)
        v55 = method12(v4, v2, v53, v54, v3, v51, v52, v50)
        v56 = v51 == (<unsigned char>0)
        if v56:
            v57 = method52(v1, v55, v9)
            v58 = v8 + v14
            v59 = v7 + v13
            v60 = v59 - v58
            v61 = libc.math.exp(v60)
            v62 = v57.v2
            del v57
            v63 = method59(v62)
            del v62
            v64 = len(v63)
            v65 = len(v55)
            v66 = v64 == v65
            v67 = v66 == 0
            if v67:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v68 = (<unsigned long long>0)
            v69 = (<double>0.000000)
            return method98(v64, v12, v13, v14, v9, v10, v11, v7, v8, v0, v1, v4, v5, v50, v2, v53, v54, v3, v51, v52, v61, v63, v55, v68, v69)
        else:
            tmp23 = method16(v0, v55, v12)
            v71, v72, v73, v74 = tmp23.v0, tmp23.v1, tmp23.v2, tmp23.v3
            del tmp23
            del v71; del v73; del v74
            v75 = method26(v72)
            del v72
            v76 = len(v75)
            v77 = len(v55)
            v78 = v76 == v77
            v79 = v78 == 0
            if v79:
                raise Exception("The length of the two arrays has to the same.")
            else:
                pass
            v80 = (<unsigned long long>0)
            v81 = (<double>0.000000)
            return method100(v76, v12, v13, v14, v9, v10, v11, v7, v8, v0, v1, v4, v5, v50, v2, v53, v54, v3, v51, v52, v75, v55, v80, v81)
cdef double method86(unsigned long long v0, UH0 v1, double v2, double v3, UH0 v4, double v5, double v6, double v7, double v8, Mut0 v9, Mut2 v10, US1 v11, US1 v12, Heap0 v13, numpy.ndarray[signed long,ndim=1] v14, double v15, numpy.ndarray[double,ndim=1] v16, numpy.ndarray[signed long,ndim=1] v17, unsigned long long v18, double v19):
    cdef bint v20
    cdef unsigned long long v21
    cdef double v22
    cdef US0 v23
    cdef bint v24
    cdef bint v26
    cdef double v34
    cdef double v27
    cdef double v28
    cdef US2 v29
    cdef UH0 v30
    cdef US2 v31
    cdef UH0 v32
    cdef double v35
    cdef double v36
    v20 = v18 < v0
    if v20:
        v21 = v18 + (<unsigned long long>1)
        v22 = v16[v18]
        v23 = v17[v18]
        v24 = v22 == (<double>0.000000)
        if v24:
            v26 = v15 == (<double>0.000000)
        else:
            v26 = 0
        if v26:
            v34 = (<double>0.000000)
        else:
            v27 = libc.math.log(v22)
            v28 = v27 + v5
            v29 = US2_0(v23)
            v30 = UH0_0(v29, v4)
            del v29
            v31 = US2_0(v23)
            v32 = UH0_0(v31, v1)
            del v31
            v34 = method87(v9, v10, v11, v12, v13, v14, v23, v7, v8, v30, v28, v6, v32, v2, v3)
            del v30; del v32
        v35 = v34 * v22
        v36 = v19 + v35
        return method86(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v21, v36)
    else:
        return v19
cdef double method85(Mut0 v0, Mut2 v1, Heap0 v2, US1 v3, US1 v4, numpy.ndarray[signed long,ndim=1] v5, double v6, double v7, UH0 v8, double v9, double v10, UH0 v11, double v12, double v13):
    cdef numpy.ndarray[signed long,ndim=1] v14
    cdef Mut3 v15
    cdef double v16
    cdef double v17
    cdef double v18
    cdef double v19
    cdef numpy.ndarray[double,ndim=1] v20
    cdef numpy.ndarray[double,ndim=1] v21
    cdef unsigned long long v22
    cdef unsigned long long v23
    cdef bint v24
    cdef bint v25
    cdef unsigned long long v26
    cdef double v27
    v14 = v2.v2
    v15 = method52(v1, v14, v8)
    v16 = v7 + v13
    v17 = v6 + v12
    v18 = v17 - v16
    v19 = libc.math.exp(v18)
    v20 = v15.v2
    del v15
    v21 = method59(v20)
    del v20
    v22 = len(v21)
    v23 = len(v14)
    v24 = v22 == v23
    v25 = v24 == 0
    if v25:
        raise Exception("The length of the two arrays has to the same.")
    else:
        pass
    v26 = (<unsigned long long>0)
    v27 = (<double>0.000000)
    return method86(v22, v11, v12, v13, v8, v9, v10, v6, v7, v0, v1, v3, v4, v2, v5, v19, v21, v14, v26, v27)
cdef double method84(numpy.ndarray[signed long,ndim=1] v0, Mut0 v1, Mut2 v2, Heap0 v3, US1 v4, double v5, double v6, UH0 v7, double v8, double v9, UH0 v10, double v11, double v12, unsigned long long v13, double v14):
    cdef unsigned long long v15
    cdef double v16
    cdef double v17
    cdef bint v18
    cdef US1 v19
    cdef unsigned long long v20
    cdef numpy.ndarray[signed long,ndim=1] v21
    cdef unsigned long long v22
    cdef double v23
    cdef double v24
    cdef double v25
    cdef double v26
    cdef US2 v27
    cdef UH0 v28
    cdef double v29
    cdef unsigned long long v30
    cdef double v31
    cdef double v33
    v15 = len(v0)
    v16 = <double>v15
    v17 = (<double>1.000000) / v16
    v18 = v13 < v15
    if v18:
        v19 = v0[v13]
        v20 = v15 - (<unsigned long long>1)
        v21 = numpy.empty(v20,dtype=numpy.int32)
        v22 = (<unsigned long long>0)
        method4(v20, v13, v0, v21, v22)
        v23 = <double>v15
        v24 = (<double>1.000000) / v23
        v25 = libc.math.log(v24)
        v26 = v25 + v5
        v27 = US2_1(v19)
        v28 = UH0_0(v27, v10)
        del v27
        v29 = method85(v1, v2, v3, v4, v19, v21, v26, v6, v7, v8, v9, v28, v11, v12)
        del v21; del v28
        v30 = v13 + (<unsigned long long>1)
        v31 = v14 + v29
        return method84(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v30, v31)
    else:
        v33 = v14 * v17
        return v33
cdef double method83(Mut0 v0, Mut2 v1, Heap0 v2, US1 v3, numpy.ndarray[signed long,ndim=1] v4, double v5, double v6, UH0 v7, double v8, double v9, UH0 v10, double v11, double v12):
    cdef unsigned long long v13
    cdef double v14
    v13 = (<unsigned long long>0)
    v14 = (<double>0.000000)
    return method84(v4, v0, v1, v2, v3, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14)
cdef double method82(numpy.ndarray[signed long,ndim=1] v0, Mut0 v1, Mut2 v2, Heap0 v3, UH0 v4, double v5, double v6, UH0 v7, double v8, double v9, unsigned long long v10, double v11):
    cdef unsigned long long v12
    cdef double v13
    cdef double v14
    cdef bint v15
    cdef US1 v16
    cdef unsigned long long v17
    cdef numpy.ndarray[signed long,ndim=1] v18
    cdef unsigned long long v19
    cdef double v20
    cdef double v21
    cdef double v22
    cdef double v23
    cdef US2 v24
    cdef UH0 v25
    cdef double v26
    cdef unsigned long long v27
    cdef double v28
    cdef double v30
    v12 = len(v0)
    v13 = <double>v12
    v14 = (<double>1.000000) / v13
    v15 = v10 < v12
    if v15:
        v16 = v0[v10]
        v17 = v12 - (<unsigned long long>1)
        v18 = numpy.empty(v17,dtype=numpy.int32)
        v19 = (<unsigned long long>0)
        method4(v17, v10, v0, v18, v19)
        v20 = <double>v12
        v21 = (<double>1.000000) / v20
        v22 = libc.math.log(v21)
        v23 = (<double>0.000000)
        v24 = US2_1(v16)
        v25 = UH0_0(v24, v4)
        del v24
        v26 = method83(v1, v2, v3, v16, v18, v22, v23, v25, v5, v6, v7, v8, v9)
        del v18; del v25
        v27 = v10 + (<unsigned long long>1)
        v28 = v11 + v26
        return method82(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v27, v28)
    else:
        v30 = v11 * v14
        return v30
cpdef void main():
    cdef unsigned long long v0
    cdef unsigned long long v1
    cdef Mut0 v2
    cdef Mut1 v3
    cdef signed long v5
    cdef Mut1 v6
    cdef signed long v8
    cdef US0 v9
    cdef US0 v10
    cdef numpy.ndarray[signed long,ndim=1] v11
    cdef US0 v12
    cdef US0 v13
    cdef US0 v14
    cdef numpy.ndarray[signed long,ndim=1] v15
    cdef US0 v16
    cdef US0 v17
    cdef numpy.ndarray[signed long,ndim=1] v18
    cdef US0 v19
    cdef numpy.ndarray[signed long,ndim=1] v20
    cdef Heap0 v21
    cdef US1 v22
    cdef US1 v23
    cdef US1 v24
    cdef US1 v25
    cdef US1 v26
    cdef US1 v27
    cdef numpy.ndarray[signed long,ndim=1] v28
    cdef unsigned long long v29
    cdef unsigned long long v30
    cdef UH0 v31
    cdef double v32
    cdef double v33
    cdef UH0 v34
    cdef double v35
    cdef double v36
    cdef US1 v37
    cdef unsigned long long v38
    cdef numpy.ndarray[signed long,ndim=1] v39
    cdef unsigned long long v40
    cdef double v41
    cdef double v42
    cdef double v43
    cdef US2 v44
    cdef UH0 v45
    cdef double v46
    cdef US0 v47
    cdef US0 v48
    cdef numpy.ndarray[signed long,ndim=1] v49
    cdef US0 v50
    cdef US0 v51
    cdef US0 v52
    cdef numpy.ndarray[signed long,ndim=1] v53
    cdef US0 v54
    cdef US0 v55
    cdef numpy.ndarray[signed long,ndim=1] v56
    cdef US0 v57
    cdef numpy.ndarray[signed long,ndim=1] v58
    cdef Heap0 v59
    cdef US1 v60
    cdef US1 v61
    cdef US1 v62
    cdef US1 v63
    cdef US1 v64
    cdef US1 v65
    cdef numpy.ndarray[signed long,ndim=1] v66
    cdef unsigned long long v67
    cdef unsigned long long v68
    cdef UH0 v69
    cdef double v70
    cdef double v71
    cdef UH0 v72
    cdef double v73
    cdef double v74
    cdef US1 v75
    cdef unsigned long long v76
    cdef numpy.ndarray[signed long,ndim=1] v77
    cdef unsigned long long v78
    cdef double v79
    cdef double v80
    cdef double v81
    cdef US2 v82
    cdef UH0 v83
    cdef double v84
    cdef signed long v85
    cdef unsigned long long v86
    cdef unsigned long long v87
    cdef Mut2 v88
    cdef Mut1 v89
    cdef signed long v91
    cdef US0 v92
    cdef US0 v93
    cdef numpy.ndarray[signed long,ndim=1] v94
    cdef US0 v95
    cdef US0 v96
    cdef US0 v97
    cdef numpy.ndarray[signed long,ndim=1] v98
    cdef US0 v99
    cdef US0 v100
    cdef numpy.ndarray[signed long,ndim=1] v101
    cdef US0 v102
    cdef numpy.ndarray[signed long,ndim=1] v103
    cdef Heap0 v104
    cdef US1 v105
    cdef US1 v106
    cdef US1 v107
    cdef US1 v108
    cdef US1 v109
    cdef US1 v110
    cdef numpy.ndarray[signed long,ndim=1] v111
    cdef UH0 v112
    cdef double v113
    cdef double v114
    cdef UH0 v115
    cdef double v116
    cdef double v117
    cdef unsigned long long v118
    cdef double v119
    cdef double v120
    cdef signed long v121
    cdef US0 v122
    cdef US0 v123
    cdef numpy.ndarray[signed long,ndim=1] v124
    cdef US0 v125
    cdef US0 v126
    cdef US0 v127
    cdef numpy.ndarray[signed long,ndim=1] v128
    cdef US0 v129
    cdef US0 v130
    cdef numpy.ndarray[signed long,ndim=1] v131
    cdef US0 v132
    cdef numpy.ndarray[signed long,ndim=1] v133
    cdef Heap0 v134
    cdef US1 v135
    cdef US1 v136
    cdef US1 v137
    cdef US1 v138
    cdef US1 v139
    cdef US1 v140
    cdef numpy.ndarray[signed long,ndim=1] v141
    cdef UH0 v142
    cdef double v143
    cdef double v144
    cdef UH0 v145
    cdef double v146
    cdef double v147
    cdef unsigned long long v148
    cdef double v149
    cdef double v150
    cdef signed long v151
    v0 = (<unsigned long long>3)
    v1 = (<unsigned long long>7)
    v2 = method0(v0, v1)
    v3 = Mut1((<signed long>0))
    while method2(v3):
        v5 = v3.v0
        v6 = Mut1((<signed long>0))
        while method3(v6):
            v8 = v6.v0
            v9 = 0
            v10 = 2
            v11 = numpy.empty(2,dtype=numpy.int32)
            v11[0] = v9; v11[1] = v10
            v12 = 1
            v13 = 0
            v14 = 2
            v15 = numpy.empty(3,dtype=numpy.int32)
            v15[0] = v12; v15[1] = v13; v15[2] = v14
            v16 = 1
            v17 = 0
            v18 = numpy.empty(2,dtype=numpy.int32)
            v18[0] = v16; v18[1] = v17
            v19 = 0
            v20 = numpy.empty(1,dtype=numpy.int32)
            v20[0] = v19
            v21 = Heap0(v20, v15, v11, v18)
            del v11; del v15; del v18; del v20
            v22 = 1
            v23 = 2
            v24 = 0
            v25 = 1
            v26 = 2
            v27 = 0
            v28 = numpy.empty(6,dtype=numpy.int32)
            v28[0] = v22; v28[1] = v23; v28[2] = v24; v28[3] = v25; v28[4] = v26; v28[5] = v27
            v29 = len(v28)
            v30 = numpy.random.randint(0,v29)
            v31 = UH0_1()
            v32 = (<double>0.000000)
            v33 = (<double>0.000000)
            v34 = UH0_1()
            v35 = (<double>0.000000)
            v36 = (<double>0.000000)
            v37 = v28[v30]
            v38 = v29 - (<unsigned long long>1)
            v39 = numpy.empty(v38,dtype=numpy.int32)
            v40 = (<unsigned long long>0)
            method4(v38, v30, v28, v39, v40)
            del v28
            v41 = <double>v29
            v42 = (<double>1.000000) / v41
            v43 = libc.math.log(v42)
            v44 = US2_1(v37)
            v45 = UH0_0(v44, v31)
            del v31; del v44
            v46 = method5(v2, v21, v37, v39, v43, v45, v32, v33, v34, v35, v36)
            del v21; del v34; del v39; del v45
            v47 = 0
            v48 = 2
            v49 = numpy.empty(2,dtype=numpy.int32)
            v49[0] = v47; v49[1] = v48
            v50 = 1
            v51 = 0
            v52 = 2
            v53 = numpy.empty(3,dtype=numpy.int32)
            v53[0] = v50; v53[1] = v51; v53[2] = v52
            v54 = 1
            v55 = 0
            v56 = numpy.empty(2,dtype=numpy.int32)
            v56[0] = v54; v56[1] = v55
            v57 = 0
            v58 = numpy.empty(1,dtype=numpy.int32)
            v58[0] = v57
            v59 = Heap0(v58, v53, v49, v56)
            del v49; del v53; del v56; del v58
            v60 = 1
            v61 = 2
            v62 = 0
            v63 = 1
            v64 = 2
            v65 = 0
            v66 = numpy.empty(6,dtype=numpy.int32)
            v66[0] = v60; v66[1] = v61; v66[2] = v62; v66[3] = v63; v66[4] = v64; v66[5] = v65
            v67 = len(v66)
            v68 = numpy.random.randint(0,v67)
            v69 = UH0_1()
            v70 = (<double>0.000000)
            v71 = (<double>0.000000)
            v72 = UH0_1()
            v73 = (<double>0.000000)
            v74 = (<double>0.000000)
            v75 = v66[v68]
            v76 = v67 - (<unsigned long long>1)
            v77 = numpy.empty(v76,dtype=numpy.int32)
            v78 = (<unsigned long long>0)
            method4(v76, v68, v66, v77, v78)
            del v66
            v79 = <double>v67
            v80 = (<double>1.000000) / v79
            v81 = libc.math.log(v80)
            v82 = US2_1(v75)
            v83 = UH0_0(v82, v69)
            del v69; del v82
            v84 = method37(v2, v59, v75, v77, v81, v83, v70, v71, v72, v73, v74)
            del v59; del v72; del v77; del v83
            v85 = v8 + (<signed long>1)
            v6.v0 = v85
        del v6
        v86 = (<unsigned long long>3)
        v87 = (<unsigned long long>7)
        v88 = method45(v86, v87)
        v89 = Mut1((<signed long>0))
        while method47(v89):
            v91 = v89.v0
            v92 = 0
            v93 = 2
            v94 = numpy.empty(2,dtype=numpy.int32)
            v94[0] = v92; v94[1] = v93
            v95 = 1
            v96 = 0
            v97 = 2
            v98 = numpy.empty(3,dtype=numpy.int32)
            v98[0] = v95; v98[1] = v96; v98[2] = v97
            v99 = 1
            v100 = 0
            v101 = numpy.empty(2,dtype=numpy.int32)
            v101[0] = v99; v101[1] = v100
            v102 = 0
            v103 = numpy.empty(1,dtype=numpy.int32)
            v103[0] = v102
            v104 = Heap0(v103, v98, v94, v101)
            del v94; del v98; del v101; del v103
            v105 = 1
            v106 = 2
            v107 = 0
            v108 = 1
            v109 = 2
            v110 = 0
            v111 = numpy.empty(6,dtype=numpy.int32)
            v111[0] = v105; v111[1] = v106; v111[2] = v107; v111[3] = v108; v111[4] = v109; v111[5] = v110
            v112 = UH0_1()
            v113 = (<double>0.000000)
            v114 = (<double>0.000000)
            v115 = UH0_1()
            v116 = (<double>0.000000)
            v117 = (<double>0.000000)
            v118 = (<unsigned long long>0)
            v119 = (<double>0.000000)
            v120 = method48(v111, v2, v88, v104, v112, v113, v114, v115, v116, v117, v118, v119)
            del v104; del v111; del v112; del v115
            v121 = v91 + (<signed long>1)
            v89.v0 = v121
        del v89
        v122 = 0
        v123 = 2
        v124 = numpy.empty(2,dtype=numpy.int32)
        v124[0] = v122; v124[1] = v123
        v125 = 1
        v126 = 0
        v127 = 2
        v128 = numpy.empty(3,dtype=numpy.int32)
        v128[0] = v125; v128[1] = v126; v128[2] = v127
        v129 = 1
        v130 = 0
        v131 = numpy.empty(2,dtype=numpy.int32)
        v131[0] = v129; v131[1] = v130
        v132 = 0
        v133 = numpy.empty(1,dtype=numpy.int32)
        v133[0] = v132
        v134 = Heap0(v133, v128, v124, v131)
        del v124; del v128; del v131; del v133
        v135 = 1
        v136 = 2
        v137 = 0
        v138 = 1
        v139 = 2
        v140 = 0
        v141 = numpy.empty(6,dtype=numpy.int32)
        v141[0] = v135; v141[1] = v136; v141[2] = v137; v141[3] = v138; v141[4] = v139; v141[5] = v140
        v142 = UH0_1()
        v143 = (<double>0.000000)
        v144 = (<double>0.000000)
        v145 = UH0_1()
        v146 = (<double>0.000000)
        v147 = (<double>0.000000)
        v148 = (<unsigned long long>0)
        v149 = (<double>0.000000)
        v150 = method82(v141, v2, v88, v134, v142, v143, v144, v145, v146, v147, v148, v149)
        del v88; del v134; del v141; del v142; del v145
        print('summary -',v5,v150)
        v151 = v5 + (<signed long>1)
        v3.v0 = v151
    del v2
