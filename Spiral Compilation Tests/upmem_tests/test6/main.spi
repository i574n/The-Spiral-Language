// Does the scalar map work?

open utils

let compile_kernel (kernel_i : i32) =
    $"if not os.path.exists('kernels'): os.mkdir('kernels')"
    inl file = $"open(f'kernels/g{!kernel_i}.c','w')" : $"object"
    $"!file.write(kernels[!kernel_i])"
    $"if os.system(f'dpu-upmem-dpurte-clang -o kernels/g{!kernel_i}.dpu kernels/g{!kernel_i}.c') \!= 0: raise Exception('Compilation failed.')"

let rec qwe () : () = ()
inl assign forall t. (a : t) (b : t) : () = ()

inl scalar_map forall a b. (f : a -> b) (in' : a) : b = join
    inl out : b = real default `b
    inl kernel_i, vars = join_backend UPMEM_C_Kernel assign out (f in')
    compile_kernel kernel_i
    inl dpu = $"DpuSet(nr_dpus=1, binary=f'kernels/g{!kernel_i}.dpu', profile='backend=simulator')" : $"DpuSet"
    inl m = real dpu_pack dpu vars
    $"!dpu.exec()" // Note: Putting in log=stdout and not using a printf inside the kernel results in an error.
    real dpu_unpack dpu m out

inl main () =
    global "import os"
    global "from io import StringIO"
    global "from sys import stdout"
    global "import struct"

    inl x : i32 = scalar_map (fun (a,b) => a+b) (1,2)
    $"print(!x)"
    ()