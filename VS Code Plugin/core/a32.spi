// The 32-bit array module.
open loop

// Creates an array.
inl create forall t. (size : u32) : array t = !!!!ArrayU32Create(`t,size)
// Indexes into an array.
inl index forall t. (ar : array t) (i : u32) : t = !!!!ArrayU32Index(ar,i)
// Sets the value of an array at the specified index.
inl set forall t. (ar : array t) (i : u32) (v : t) : () = !!!!ArrayU32IndexSet(ar,i,v)
// Returns the length of an array.
inl length forall t. (ar : array t) : u32 = !!!!ArrayU32Length(ar)
// Creates an array with a single element.
inl singleton x = inl a = create 1 in set a 0 x . a
// Initializes array using the given function.
inl init nearTo f = 
    inl ar = create nearTo
    for' (from: 0 nearTo:) (fun i => set ar i (f i))
    ar
// Applies a function to each element of the array, threading an accumulator argument through the computation. If the input function is f and the elements are i0...iN then computes f (... (f s i0)...) iN
inl fold f s ar = for (from: 0 nearTo: length ar) (fun i s => f s (index ar i)) s
inl q x = fold x
// Maps an array.
inl map f ar = init (length ar) (fun i => f (index ar i))
// Iterates over an array.
inl iter f ar = for' (from: 0 nearTo: length ar) (index ar >> f)
// Filters the elements of an array using the function.
inl filter f ar =
    inl nearTo = length ar
    inl ar' = create nearTo
    for (from:0 nearTo:) (fun i count => if f i then set ar' i (index ar i) . count + 1 else count) 0
    |> fun nearTo => init nearTo (index ar')
// Concatenates an array of arrays.
inl concat ar =
    inl nearTo = fold (fun s x => s + length x) 0 ar
    inl ar' = create nearTo
    inl _ = fold (fold (fun i x => set ar' i x . i+1)) 0 ar
    ar'
// Appends two arrays.
inl append a b = init (length a + length b) (fun i => inl l = length a in if i < l then index a i else index b (i - l))
// Finds the index of the true applicant.
inl findIndex f x =
    let rec loop i = 
        if i < length x then if f (index x i) then i else loop (i+1) 
        else failwith "The true applicant does not exist."
    loop 0
// Slices an array between a range.
inl slice (from:nearTo:) x = init (nearTo-from) (fun i => index x (i+from))
// Slices an array from the start of a range.
inl sliceFrom from x = slice (from:nearTo:length x) x