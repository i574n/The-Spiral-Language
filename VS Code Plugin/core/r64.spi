// Python's list module.
open loop

// Concatenates an array of strings.
inl join' (sep : string) (l : rarray string) : string = $"!sep.join(!l)"
// Removes the element at the given index and returns it.
inl pop forall t. (l : rarray t) (i : u64) : t = $"!l.pop(!i)"
// Appends to an array.
inl add forall a. (l : rarray a) (x : a) : () = $"!l.append(!x)"
// Creates an array.
inl create forall a. (size : u64) : rarray a = $"[None]*!size"
// Indexes into an array.
inl index forall a. (l : rarray a) (i : u64) : a = $"!l[!i]"
// Sets the value of an array at the specified index.
inl set forall a. (l : rarray a) (i : u64) (v : a) : () = $"!l[!i] = !v"
// Returns the length of an array.
inl length forall a. (l : rarray a) : u64 = $"len(!l)"
// Creates an empty array.
inl empty forall t. : rarray t = $"[]"
// Creates an array with a single element.
inl singleton forall t. (x : t) : rarray t = $"[!x]"

// -------

// Initializes array using the given function.
inl init nearTo f = 
    inl ar = create nearTo
    for' (from: 0 nearTo:) (fun i => set ar i (f i))
    ar
// Applies a function to each element of the array, threading an accumulator argument through the computation. If the input function is f and the elements are i0...iN then computes f (... (f s i0)...) iN
inl fold f s ar = for (from: 0 nearTo: length ar) (fun i s => f s (index ar i)) s
// Similar to fold with the intial state as the first element of the array.
inl reduce f ar =
    inl nearTo = length ar
    if nearTo = 0 then failwith "The array must be greater than 0."
    for (from: 1 nearTo:) (fun i s => f s (index ar i)) (index ar 0)
// Same as fold from the other direction.
inl foldBack f ar s = forDown (nearFrom: length ar to:0) (fun i s => f (index ar i) s) s
// Maps an array.
inl map f ar = init (length ar) (fun i => f (index ar i))
// Iterates over an array.
inl iter f ar = for' (from: 0 nearTo: length ar) (index ar >> f)
// Iterates over an array. Provides the index as the first argument.
inl iteri f ar = for' (from: 0 nearTo: length ar) (fun i => f i (index ar i))
// Filters the elements of an array using the function.
inl filter f ar =
    inl nearTo = length ar
    inl ar' = create nearTo
    for (from:0 nearTo:) (fun i count => if f i then set ar' i (index ar i) . count + 1 else count) 0
    |> fun nearTo => init nearTo (index ar')
// Concatenates an array of arrays.
inl concat ar =
    inl nearTo = fold (fun s x => s + length x) 0 ar
    inl ar' = create nearTo
    inl _ = fold (fold (fun i x => set ar' i x . i+1)) 0 ar
    ar'
// Appends two arrays.
inl append a b = init (length a + length b) (fun i => inl l = length a in if i < l then index a i else index b (i - l))
// Finds the index of the true applicant.
inl findIndex f x =
    let rec loop i = 
        if i < length x then if f (index x i) then i else loop (i+1) 
        else failwith "The true applicant does not exist."
    loop 0
// Slices an array between a range.
inl slice (from:nearTo:) x = init (nearTo-from) (fun i => index x (i+from))
// Slices an array from the start of a range.
inl sliceFrom from x = slice (from:nearTo:length x) x
// Applies the mapping function to each element of the two arrays producing a new array with the result of the applications.
inl map2 f a b = 
    inl l,l' = length a, length b
    if l <> l' then failwith "The two arrays have to have the same size."
    init l (fun i => f (index a i) (index b i))
// Folds over the array while producing the residual array resulting from that operation.
inl mapFold f s a =
    inl nearTo = length a
    inl ar = create nearTo
    ar, for (from: 0 nearTo:) (fun i s => 
        inl a,b = f s (index a i)
        set ar i a
        b
        ) s
// Folds over the two arrays while producing the residual array resulting from that operation.
inl mapFold2 f s a b =
    inl nearTo = length a
    if nearTo <> length b then failwith "The two arrays have to have the same size."
    inl ar = create nearTo
    ar, for (from: 0 nearTo:) (fun i s => 
        inl a,b = f s (index a i) (index b i)
        set ar i a
        b
        ) s
// Converts the array to an list.
inl toList x = foldBack (::) x Nil
// Returns true if the applying the checker function to every element of the array returns true.
inl forall' f x =
    let rec loop i = if i < length x then f (index x i) && loop (i+1) else true
    loop 0
// Returns true if the applying the checker function to every element pair of the two arrays returns true.
inl forall2 f x1 x2 =
    if length x1 <> length x2 then failwith "The two arrays have differing lengths."
    let rec loop i = if i < length x1 then f (index x1 i) (index x2 i) && loop (i+1) else true
    loop 0
// Removes the element at index.
inl removeAtIndex i dist = init (length dist-1) (fun i' => index dist (if i <= i' then i'+1 else i'))

instance equable rarray t = fun x1 x2 => 
    if length x1 <> length x2 then false
    else
        let rec loop i = if i < length x1 then index x1 i = index x2 i && loop (i+1) else true
        loop 0

instance comparable rarray t = fun x1 x2 => 
    if length x1 < length x2 then LT
    elif length x1 > length x2 then GT
    else
        let rec loop i = 
            if i < length x1 then 
                inl x = comp (index x1 i) (index x2 i)
                if eq_is x then loop (i+1) else x 
            else EQ
        loop 0