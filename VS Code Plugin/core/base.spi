prototype equable a : a -> a -> bool

nominal order = i32
prototype comparable a : a -> a -> order
inl EQ = order 0i32
inl eq_is (order x) : bool = !!!!EQ(x, 0i32)
inl LT = order -1i32
inl lt_is (order x) : bool = !!!!EQ(x, -1i32)
inl GT = order 1i32
inl gt_is (order x) : bool = !!!!EQ(x, 1i32)

prototype hashable a : a -> i32

union option a = Some: a | None
union result a b = Ok: a | Error: b
union rec list a = Nil | Cons: a * list a
// Concatenates an element to the head of a list.
inl (::) a b = Cons: a,b