prototype equable a : a -> a -> bool

nominal order = i32
prototype comparable a : a -> a -> order
inl eq() = order 0i32
inl eq_is (order x) : bool = !!!!EQ(x, 0i32)
inl lt() = order -1i32
inl lt_is (order x) : bool = !!!!EQ(x, -1i32)
inl gt() = order 1i32
inl gt_is (order x) : bool = !!!!EQ(x, 1i32)

prototype hashable a : a -> i32

union option a = Some : a | None
union choice2 a b = C1of2 : a | C2of2 : b
union result a b = Ok : a | Error : b
union rec list a = Nil | Cons : a * list a
// Concatenates an element to the head of a list.
inl (::) a b = Cons (a,b)

// Array with a dimension.
nominal a dim a = array_base a
// Creates an array.
prototype create ar dim {int} el : dim -> ar dim el
// Indexes into an array.
prototype index ar dim {int} el : ar dim el -> dim -> el
// Sets the value of an array at the specified index.
prototype set ar dim {int} el : ar dim el -> dim -> el -> ()
// Returns the length of an array.
prototype length ar dim {int} el : ar dim el -> dim

instance create a = fun size => a !!!!ArrayCreate(`el,size)
instance index a = fun (a ar) i => !!!!ArrayIndex(ar,i)
instance set a = fun (a ar) i v => !!!!ArrayIndexSet(ar,i,v)
instance length a = fun (a ar) => !!!!ArrayLength(`dim,ar)

// Python native
type obj = $"object"
// Converts a Spiral record to a Cython record.
inl record forall t {record}. (x : t) : obj = !!!!ToPythonRecord(x)
// Converts a Spiral record to a Cython named tuple.
inl namedtuple forall t {record}. (n : string) (x : t) : obj = !!!!ToPythonNamedTuple(n,x)
// Puts a statement in the global scope.
inl global (x : string) : () = !!!!Global(x)
nominal ra dim a = $"list"

instance create ra = fun size => $"[None]*!size"
instance index ra = fun ar i => $"!ar[!i]"
instance set ra = fun ar i v => $"!ar[!i] = !v"
instance length ra = fun ar => $"len(!ar)"