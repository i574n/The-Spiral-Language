open loop

inl create forall t. (size : i32) : array t = !!!!ArrayCreate(`t,size)
inl index forall t. (ar : array t) (i : i32) : t = !!!!ArrayIndex(ar,i)
inl set forall t. (ar : array t) (i : i32) (v : t) : () = !!!!ArrayIndexSet(ar,i,v)
inl length forall t. (ar : array t) : i32 = !!!!ArrayLength(ar)
inl singleton x = inl a = create 1 in set a 0 x . a
inl init nearTo f = 
    inl ar = create nearTo
    for' (from: 0 nearTo:) (fun i => set ar i (f i))
    ar
inl fold f s ar = for (from: 0 nearTo: length ar) (fun i s => f s (index ar i)) s
inl map f ar = init (length ar) (fun i => f (index ar i))
inl filter f ar =
    inl nearTo = length ar
    inl ar' = create nearTo
    for (from:0 nearTo:) (fun i count => if f i then set ar' i (index ar i) . count + 1 else count) 0
    |> fun nearTo => init nearTo (index ar')
inl concat ar =
    inl nearTo = fold (fun s x => s + length x) 0 ar
    inl ar' = create nearTo
    inl _ = fold (fold (fun i x => set ar' i x . i+1)) 0 ar
    ar'
